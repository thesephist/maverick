__ink_ident_new = () => (() => { let self; return self = {i: __ink_negate(1), next: () => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()} })()

std = load(__Ink_String(`../vendor/std`));
log = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[log] || null : (__ink_acc_trgt.log !== undefined ? __ink_acc_trgt.log : null)})();
f = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[format] || null : (__ink_acc_trgt.format !== undefined ? __ink_acc_trgt.format : null)})();
slice = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[slice] || null : (__ink_acc_trgt.slice !== undefined ? __ink_acc_trgt.slice : null)})();
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
reduce = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reduce] || null : (__ink_acc_trgt.reduce !== undefined ? __ink_acc_trgt.reduce : null)})();
every = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[every] || null : (__ink_acc_trgt.every !== undefined ? __ink_acc_trgt.every : null)})();
str = load(__Ink_String(`../vendor/str`));
digit__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[digit__ink_qm__] || null : (__ink_acc_trgt.digit__ink_qm__ !== undefined ? __ink_acc_trgt.digit__ink_qm__ : null)})();
hasPrefix__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[hasPrefix__ink_qm__] || null : (__ink_acc_trgt.hasPrefix__ink_qm__ !== undefined ? __ink_acc_trgt.hasPrefix__ink_qm__ : null)})();
index = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[index] || null : (__ink_acc_trgt.index !== undefined ? __ink_acc_trgt.index : null)})();
mkiota = (() => {let __ink_acc_trgt = __as_ink_string(load(__Ink_String(`iota`))); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[__ink_ident_new] || null : (__ink_acc_trgt.__ink_ident_new !== undefined ? __ink_acc_trgt.__ink_ident_new : null)})();
Newline = char(10);
Tab = char(9);
iota = (() => {let __ink_acc_trgt = __as_ink_string(mkiota()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})();
Tok = {Separator: iota(), Comment: iota(), Ident: iota(), EmptyIdent: iota(), NumberLiteral: iota(), StringLiteral: iota(), TrueLiteral: iota(), FalseLiteral: iota(), AccessorOp: iota(), EqOp: iota(), FunctionArrow: iota(), KeyValueSeparator: iota(), DefineOp: iota(), MatchColon: iota(), CaseArrow: iota(), SubOp: iota(), NegOp: iota(), AddOp: iota(), MulOp: iota(), DivOp: iota(), ModOp: iota(), GtOp: iota(), LtOp: iota(), AndOp: iota(), OrOp: iota(), XorOp: iota(), LParen: iota(), RParen: iota(), LBracket: iota(), RBracket: iota(), LBrace: iota(), RBrace: iota()};
typeName = type => reduce(keys(Tok), (acc, k) => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return k })()] || null : (__ink_acc_trgt[(() => { return k })()] !== undefined ? __ink_acc_trgt[(() => { return k })()] : null)})(), [[() => (type), () => (k)], [() => (__Ink_Empty), () => (acc)]]), __Ink_String(`(unknown token)`));
tkString = tok => f(__Ink_String(`{{ 0 }}({{ 1 }}) @ {{2}}:{{3}}`), [typeName((() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})()), (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})()]);
token = (type, val, line, col, i) => ({type: type, val: val, line: line, col: col, i: i});
tokenizeWithOpt = (s, lexComments) => (() => { let S; let commit; let commitChar; let commitClear; let ensureSeparator; let finalize; let simpleCommit; let simpleCommitChar; let tokens; S = {i: __ink_negate(1), buf: __Ink_String(``), strbuf: __Ink_String(``), strbufLine: 0, strbufCol: 0, lastType: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})(), line: 1, col: 0, inStringLiteral: false}; tokens = []; simpleCommit = tok => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(lastType, (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})()) : (__ink_assgn_trgt.lastType) = (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(); return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(tokens); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(tokens), tok) : (__ink_assgn_trgt[len(tokens)]) = tok; return __ink_assgn_trgt})() })(); simpleCommitChar = type => simpleCommit(token(type, null, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(), __ink_match(type, [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[TrueLiteral] || null : (__ink_acc_trgt.TrueLiteral !== undefined ? __ink_acc_trgt.TrueLiteral : null)})()), () => (((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - 4))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FalseLiteral] || null : (__ink_acc_trgt.FalseLiteral !== undefined ? __ink_acc_trgt.FalseLiteral : null)})()), () => (((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - 5))], [() => (__Ink_Empty), () => (((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - 1))]]))); commitClear = () => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})(), [[() => (__Ink_String(``)), () => (__Ink_Empty)], [() => (__Ink_Empty), () => ((() => { let cbuf; cbuf = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, __Ink_String(``)) : (__ink_assgn_trgt.buf) = __Ink_String(``); return __ink_assgn_trgt})(); return __ink_match(cbuf, [[() => (__Ink_String(`true`)), () => (simpleCommitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[TrueLiteral] || null : (__ink_acc_trgt.TrueLiteral !== undefined ? __ink_acc_trgt.TrueLiteral : null)})()))], [() => (__Ink_String(`false`)), () => (simpleCommitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FalseLiteral] || null : (__ink_acc_trgt.FalseLiteral !== undefined ? __ink_acc_trgt.FalseLiteral : null)})()))], [() => (__Ink_Empty), () => (__ink_match(digit__ink_qm__(cbuf), [[() => (true), () => (simpleCommit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NumberLiteral] || null : (__ink_acc_trgt.NumberLiteral !== undefined ? __ink_acc_trgt.NumberLiteral : null)})(), number(cbuf), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() - len(cbuf)), ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - len(cbuf)))))], [() => (false), () => (simpleCommit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), cbuf, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() - len(cbuf)), ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - len(cbuf)))))]]))]]) })())]]); commit = tok => (() => { commitClear(); return simpleCommit(tok) })(); commitChar = type => commit(token(type, null, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})())); ensureSeparator = () => (() => { commitClear(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[lastType] || null : (__ink_acc_trgt.lastType !== undefined ? __ink_acc_trgt.lastType : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LParen] || null : (__ink_acc_trgt.LParen !== undefined ? __ink_acc_trgt.LParen : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBracket] || null : (__ink_acc_trgt.LBracket !== undefined ? __ink_acc_trgt.LBracket : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBrace] || null : (__ink_acc_trgt.LBrace !== undefined ? __ink_acc_trgt.LBrace : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AddOp] || null : (__ink_acc_trgt.AddOp !== undefined ? __ink_acc_trgt.AddOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[SubOp] || null : (__ink_acc_trgt.SubOp !== undefined ? __ink_acc_trgt.SubOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MulOp] || null : (__ink_acc_trgt.MulOp !== undefined ? __ink_acc_trgt.MulOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DivOp] || null : (__ink_acc_trgt.DivOp !== undefined ? __ink_acc_trgt.DivOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ModOp] || null : (__ink_acc_trgt.ModOp !== undefined ? __ink_acc_trgt.ModOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NegOp] || null : (__ink_acc_trgt.NegOp !== undefined ? __ink_acc_trgt.NegOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[GtOp] || null : (__ink_acc_trgt.GtOp !== undefined ? __ink_acc_trgt.GtOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LtOp] || null : (__ink_acc_trgt.LtOp !== undefined ? __ink_acc_trgt.LtOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EqOp] || null : (__ink_acc_trgt.EqOp !== undefined ? __ink_acc_trgt.EqOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[KeyValueSeparator] || null : (__ink_acc_trgt.KeyValueSeparator !== undefined ? __ink_acc_trgt.KeyValueSeparator : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FunctionArrow] || null : (__ink_acc_trgt.FunctionArrow !== undefined ? __ink_acc_trgt.FunctionArrow : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchColon] || null : (__ink_acc_trgt.MatchColon !== undefined ? __ink_acc_trgt.MatchColon : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[CaseArrow] || null : (__ink_acc_trgt.CaseArrow !== undefined ? __ink_acc_trgt.CaseArrow : null)})()), () => (null)], [() => (__Ink_Empty), () => (commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})()))]]) })(); finalize = () => (() => { ensureSeparator(); return tokens })(); __ink_match(hasPrefix__ink_qm__(s, __Ink_String(`#!`)), [[() => (true), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, index(s, Newline)) : (__ink_assgn_trgt.i) = index(s, Newline); return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})() })())]]); return (() => { let __ink_trampolined_sub; let sub; return sub = () => (() => { __ink_trampolined_sub = () => (() => { let advance; let c; (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1)) : (__ink_assgn_trgt.col) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1); return __ink_assgn_trgt})(); c = (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] : null)})(); return __ink_match([c, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[inStringLiteral] || null : (__ink_acc_trgt.inStringLiteral !== undefined ? __ink_acc_trgt.inStringLiteral : null)})()], [[() => ([null, __Ink_Empty]), () => (finalize())], [() => ([__Ink_String(`'`), __Ink_Empty]), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[inStringLiteral] || null : (__ink_acc_trgt.inStringLiteral !== undefined ? __ink_acc_trgt.inStringLiteral : null)})(), [[() => (true), () => ((() => { commit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[StringLiteral] || null : (__ink_acc_trgt.StringLiteral !== undefined ? __ink_acc_trgt.StringLiteral : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbufLine] || null : (__ink_acc_trgt.strbufLine !== undefined ? __ink_acc_trgt.strbufLine : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbufCol] || null : (__ink_acc_trgt.strbufCol !== undefined ? __ink_acc_trgt.strbufCol : null)})(), (((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - len((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})())) - 1))); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(inStringLiteral, false) : (__ink_assgn_trgt.inStringLiteral) = false; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (false), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbuf, __Ink_String(``)) : (__ink_assgn_trgt.strbuf) = __Ink_String(``); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbufLine, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})()) : (__ink_assgn_trgt.strbufLine) = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbufCol, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})()) : (__ink_assgn_trgt.strbufCol) = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(inStringLiteral, true) : (__ink_assgn_trgt.inStringLiteral) = true; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => ([__Ink_Empty, true]), () => (__ink_match(c, [[() => (Newline), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, 0) : (__ink_assgn_trgt.col) = 0; return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbuf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + c)) : (__ink_assgn_trgt.strbuf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + c); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`\\`)), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbuf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] : null)})())) : (__ink_assgn_trgt.strbuf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] : null)})()); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1)) : (__ink_assgn_trgt.col) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbuf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + c)) : (__ink_assgn_trgt.strbuf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + c); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_Empty), () => (__ink_match(c, [[() => (__Ink_String(`\``)), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] : null)})(), [[() => (__Ink_String(`\``)), () => (__ink_match(advance = index(slice(s, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), len(s)), Newline), [[() => (__ink_negate(1)), () => ((() => { __ink_match(lexComments, [[() => (true), () => (commit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Comment] || null : (__ink_acc_trgt.Comment !== undefined ? __ink_acc_trgt.Comment : null)})(), slice(s, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), len(s)), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})())))]]); return finalize() })())], [() => (__Ink_Empty), () => ((() => { let col; let i; let line; line = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(); col = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(); i = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + advance)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + advance); return __ink_assgn_trgt})(); __ink_match(lexComments, [[() => (true), () => (commit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Comment] || null : (__ink_acc_trgt.Comment !== undefined ? __ink_acc_trgt.Comment : null)})(), slice(s, i, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})()), line, col, i)))]]); ensureSeparator(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, 0) : (__ink_assgn_trgt.col) = 0; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_Empty), () => ((() => { let col; let i; let line; line = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(); col = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(); i = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => { let __ink_trampolined_sub; let sub; return sub = () => (() => { __ink_trampolined_sub = () => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] : null)})(), [[() => (__Ink_String(`\``)), () => ((() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1)) : (__ink_assgn_trgt.col) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1); return __ink_assgn_trgt})())], [() => (Newline), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, 0) : (__ink_assgn_trgt.col) = 0; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (null), () => (null)], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1)) : (__ink_assgn_trgt.col) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub) })() })()(); __ink_match(lexComments, [[() => (true), () => (commit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Comment] || null : (__ink_acc_trgt.Comment !== undefined ? __ink_acc_trgt.Comment : null)})(), slice(s, i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)), line, col, i)))]]); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (Newline), () => ((() => { ensureSeparator(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, 0) : (__ink_assgn_trgt.col) = 0; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (Tab), () => ((() => { commitClear(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(` `)), () => ((() => { commitClear(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`_`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`~`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NegOp] || null : (__ink_acc_trgt.NegOp !== undefined ? __ink_acc_trgt.NegOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`+`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AddOp] || null : (__ink_acc_trgt.AddOp !== undefined ? __ink_acc_trgt.AddOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`*`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MulOp] || null : (__ink_acc_trgt.MulOp !== undefined ? __ink_acc_trgt.MulOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`/`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DivOp] || null : (__ink_acc_trgt.DivOp !== undefined ? __ink_acc_trgt.DivOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`%`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ModOp] || null : (__ink_acc_trgt.ModOp !== undefined ? __ink_acc_trgt.ModOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`&`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AndOp] || null : (__ink_acc_trgt.AndOp !== undefined ? __ink_acc_trgt.AndOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`|`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[OrOp] || null : (__ink_acc_trgt.OrOp !== undefined ? __ink_acc_trgt.OrOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`^`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[XorOp] || null : (__ink_acc_trgt.XorOp !== undefined ? __ink_acc_trgt.XorOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`<`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LtOp] || null : (__ink_acc_trgt.LtOp !== undefined ? __ink_acc_trgt.LtOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`>`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[GtOp] || null : (__ink_acc_trgt.GtOp !== undefined ? __ink_acc_trgt.GtOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`,`)), () => ((() => { ensureSeparator(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`.`)), () => (__ink_match([(() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})(), every(map((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})(), digit__ink_qm__))], [[() => ([__Ink_String(``), __Ink_Empty]), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => ([__Ink_Empty, true]), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + __Ink_String(`.`))) : (__ink_assgn_trgt.buf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + __Ink_String(`.`)); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_String(`:`)), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] : null)})(), [[() => (__Ink_String(`=`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`:`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchColon] || null : (__ink_acc_trgt.MatchColon !== undefined ? __ink_acc_trgt.MatchColon : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { ensureSeparator(); commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[KeyValueSeparator] || null : (__ink_acc_trgt.KeyValueSeparator !== undefined ? __ink_acc_trgt.KeyValueSeparator : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_String(`=`)), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] : null)})(), [[() => (__Ink_String(`>`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FunctionArrow] || null : (__ink_acc_trgt.FunctionArrow !== undefined ? __ink_acc_trgt.FunctionArrow : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EqOp] || null : (__ink_acc_trgt.EqOp !== undefined ? __ink_acc_trgt.EqOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_String(`-`)), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] : null)})(), [[() => (__Ink_String(`>`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[CaseArrow] || null : (__ink_acc_trgt.CaseArrow !== undefined ? __ink_acc_trgt.CaseArrow : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[SubOp] || null : (__ink_acc_trgt.SubOp !== undefined ? __ink_acc_trgt.SubOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_String(`(`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LParen] || null : (__ink_acc_trgt.LParen !== undefined ? __ink_acc_trgt.LParen : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`)`)), () => ((() => { ensureSeparator(); commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RParen] || null : (__ink_acc_trgt.RParen !== undefined ? __ink_acc_trgt.RParen : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`[`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBracket] || null : (__ink_acc_trgt.LBracket !== undefined ? __ink_acc_trgt.LBracket : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`]`)), () => ((() => { ensureSeparator(); commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RBracket] || null : (__ink_acc_trgt.RBracket !== undefined ? __ink_acc_trgt.RBracket : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`{`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBrace] || null : (__ink_acc_trgt.LBrace !== undefined ? __ink_acc_trgt.LBrace : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`}`)), () => ((() => { ensureSeparator(); commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RBrace] || null : (__ink_acc_trgt.RBrace !== undefined ? __ink_acc_trgt.RBrace : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + c)) : (__ink_assgn_trgt.buf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + c); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]))]]) })(); return __ink_resolve_trampoline(__ink_trampolined_sub) })() })()() })();
tokenize = s => tokenizeWithOpt(s, false);
tokenizeWithComments = s => tokenizeWithOpt(s, true)

std = load(__Ink_String(`../vendor/std`));
log = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[log] || null : (__ink_acc_trgt.log !== undefined ? __ink_acc_trgt.log : null)})();
f = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[format] || null : (__ink_acc_trgt.format !== undefined ? __ink_acc_trgt.format : null)})();
slice = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[slice] || null : (__ink_acc_trgt.slice !== undefined ? __ink_acc_trgt.slice : null)})();
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
each = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[each] || null : (__ink_acc_trgt.each !== undefined ? __ink_acc_trgt.each : null)})();
cat = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[cat] || null : (__ink_acc_trgt.cat !== undefined ? __ink_acc_trgt.cat : null)})();
Tokenize = load(__Ink_String(`tokenize`));
Tok = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Tok] || null : (__ink_acc_trgt.Tok !== undefined ? __ink_acc_trgt.Tok : null)})();
typeName = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[typeName] || null : (__ink_acc_trgt.typeName !== undefined ? __ink_acc_trgt.typeName : null)})();
tkString = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[tkString] || null : (__ink_acc_trgt.tkString !== undefined ? __ink_acc_trgt.tkString : null)})();
mkiota = (() => {let __ink_acc_trgt = __as_ink_string(load(__Ink_String(`iota`))); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[__ink_ident_new] || null : (__ink_acc_trgt.__ink_ident_new !== undefined ? __ink_acc_trgt.__ink_ident_new : null)})();
iota = (() => {let __ink_acc_trgt = __as_ink_string(mkiota()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})();
Node = {UnaryExpr: iota(), BinaryExpr: iota(), FnCall: iota(), MatchClause: iota(), MatchExpr: iota(), ExprList: iota(), EmptyIdent: iota(), Ident: iota(), NumberLiteral: iota(), StringLiteral: iota(), BooleanLiteral: iota(), ObjectLiteral: iota(), ObjectEntry: iota(), ListLiteral: iota(), FnLiteral: iota()};
ndString = node => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NumberLiteral] || null : (__ink_acc_trgt.NumberLiteral !== undefined ? __ink_acc_trgt.NumberLiteral : null)})()), () => (f(__Ink_String(`Lit({{ val }})`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[StringLiteral] || null : (__ink_acc_trgt.StringLiteral !== undefined ? __ink_acc_trgt.StringLiteral : null)})()), () => (f(__Ink_String(`Lit({{ val }})`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BooleanLiteral] || null : (__ink_acc_trgt.BooleanLiteral !== undefined ? __ink_acc_trgt.BooleanLiteral : null)})()), () => (f(__Ink_String(`Lit({{ val }})`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[UnaryExpr] || null : (__ink_acc_trgt.UnaryExpr !== undefined ? __ink_acc_trgt.UnaryExpr : null)})()), () => (f(__Ink_String(`UnrExpr({{0}} {{1}})`), [typeName((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})()), ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})()), () => (f(__Ink_String(`BinExpr({{0}} {{1}} {{2}})`), [ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), typeName((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})()), ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => (f(__Ink_String(`Ident({{val}})`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})()), () => (__Ink_String(`EmptyIdent`))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnCall] || null : (__ink_acc_trgt.FnCall !== undefined ? __ink_acc_trgt.FnCall : null)})()), () => (f(__Ink_String(`Call({{0}} {{1}})`), [ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})()), __as_ink_string(__as_ink_string(__Ink_String(`(`) + cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})(), ndString), __Ink_String(` `))) + __Ink_String(`)`))]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})()), () => (f(__Ink_String(`Fn({{0}} {{1}})`), [__as_ink_string(__as_ink_string(__Ink_String(`(`) + cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})(), ndString), __Ink_String(` `))) + __Ink_String(`)`)), ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})()), () => (__as_ink_string(__as_ink_string(__Ink_String(`(`) + cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), ndString), __Ink_String(` `))) + __Ink_String(`)`)))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchExpr] || null : (__ink_acc_trgt.MatchExpr !== undefined ? __ink_acc_trgt.MatchExpr : null)})()), () => (f(__Ink_String(`Match({{0}} {{1}})`), [ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[condition] || null : (__ink_acc_trgt.condition !== undefined ? __ink_acc_trgt.condition : null)})()), __as_ink_string(__as_ink_string(__Ink_String(`{`) + cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[clauses] || null : (__ink_acc_trgt.clauses !== undefined ? __ink_acc_trgt.clauses : null)})(), ndString), __Ink_String(` `))) + __Ink_String(`}`))]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchClause] || null : (__ink_acc_trgt.MatchClause !== undefined ? __ink_acc_trgt.MatchClause : null)})()), () => (f(__Ink_String(`Clause({{0}} {{1}})`), [ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()), ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[expr] || null : (__ink_acc_trgt.expr !== undefined ? __ink_acc_trgt.expr : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ListLiteral] || null : (__ink_acc_trgt.ListLiteral !== undefined ? __ink_acc_trgt.ListLiteral : null)})()), () => (f(__Ink_String(`List({{0}})`), [cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), ndString), __Ink_String(` `))]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectLiteral] || null : (__ink_acc_trgt.ObjectLiteral !== undefined ? __ink_acc_trgt.ObjectLiteral : null)})()), () => (f(__Ink_String(`Obj({{0}})`), [cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[entries] || null : (__ink_acc_trgt.entries !== undefined ? __ink_acc_trgt.entries : null)})(), ndString), __Ink_String(` `))]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectEntry] || null : (__ink_acc_trgt.ObjectEntry !== undefined ? __ink_acc_trgt.ObjectEntry : null)})()), () => (f(__Ink_String(`Entry({{0}} {{1}})`), [ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()), ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})())]))], [() => (__Ink_Empty), () => (__as_ink_string(__as_ink_string(__Ink_String(`Unknown(`) + string(node)) + __Ink_String(`)`)))]]);
opPriority = tok => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()), () => (100)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ModOp] || null : (__ink_acc_trgt.ModOp !== undefined ? __ink_acc_trgt.ModOp : null)})()), () => (80)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MulOp] || null : (__ink_acc_trgt.MulOp !== undefined ? __ink_acc_trgt.MulOp : null)})()), () => (50)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DivOp] || null : (__ink_acc_trgt.DivOp !== undefined ? __ink_acc_trgt.DivOp : null)})()), () => (50)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AddOp] || null : (__ink_acc_trgt.AddOp !== undefined ? __ink_acc_trgt.AddOp : null)})()), () => (40)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[SubOp] || null : (__ink_acc_trgt.SubOp !== undefined ? __ink_acc_trgt.SubOp : null)})()), () => (40)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[GtOp] || null : (__ink_acc_trgt.GtOp !== undefined ? __ink_acc_trgt.GtOp : null)})()), () => (30)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LtOp] || null : (__ink_acc_trgt.LtOp !== undefined ? __ink_acc_trgt.LtOp : null)})()), () => (30)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EqOp] || null : (__ink_acc_trgt.EqOp !== undefined ? __ink_acc_trgt.EqOp : null)})()), () => (30)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AndOp] || null : (__ink_acc_trgt.AndOp !== undefined ? __ink_acc_trgt.AndOp : null)})()), () => (20)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[XorOp] || null : (__ink_acc_trgt.XorOp !== undefined ? __ink_acc_trgt.XorOp : null)})()), () => (15)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[OrOp] || null : (__ink_acc_trgt.OrOp !== undefined ? __ink_acc_trgt.OrOp : null)})()), () => (10)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})()), () => (0)], [() => (__Ink_Empty), () => (__ink_negate(1))]]);
ident__ink_qm__ = node => __ink_match(node, [[() => (null), () => (false)], [() => (__Ink_Empty), () => (__ink_eq((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()))]]);
binaryOp__ink_qm__ = tok => (opPriority(tok) > __ink_negate(1));
parse = tokens => (() => { let nodes; nodes = []; __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), [[() => ({type: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})(), val: __Ink_Empty, line: __Ink_Empty, col: __Ink_Empty, i: __Ink_Empty}), () => ((() => { return tokens = slice(tokens, 1, len(tokens)) })())]]); return (() => { let __ink_trampolined_sub; let sub; return sub = idx => (() => { __ink_trampolined_sub = idx => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})(), [[() => (null), () => (nodes)], [() => (__Ink_Empty), () => ((() => { let result; result = parseExpr(tokens, idx); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()) : (__ink_assgn_trgt[len(nodes)]) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()) })())], [() => (__Ink_Empty), () => (f(__Ink_String(`parse err @ {{line}}:{{col}}: {{err}}`), {err: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), line: (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1) })()] || null : (__ink_acc_trgt[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1) })()] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), col: (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1) })()] || null : (__ink_acc_trgt[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1) })()] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})()}))]]) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub, idx) })() })()(0) })();
parseBinaryExpr = (left, op, prevPriority, tokens, idx) => (() => { let S; let nodes; let ops; let result; let right; result = parseAtom(tokens, idx); right = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); idx = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(); S = {idx: idx}; ops = [op]; nodes = [left, right]; __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ((() => { let __ink_trampolined_sub; let sub; return sub = () => (() => { __ink_trampolined_sub = () => __ink_match(binaryOp__ink_qm__((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})()), [[() => (true), () => ((() => { let choices; let priority; priority = opPriority((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})()); choices = [__ink_negate((() => { return (prevPriority < priority) })()), __ink_negate((() => { return (opPriority((() => {let __ink_acc_trgt = __as_ink_string(ops); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (len(ops) - 1) })()] || null : (__ink_acc_trgt[(() => { return (len(ops) - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return (len(ops) - 1) })()] : null)})()) < priority) })())]; return __ink_match(choices, [[() => ([true, __Ink_Empty]), () => (null)], [() => ([__Ink_Empty, true]), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(ops); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(ops), (() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})()) : (__ink_assgn_trgt[len(ops)]) = (() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)) : (__ink_assgn_trgt.idx) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1); return __ink_assgn_trgt})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => (null), () => ({node: right, idx: (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: __Ink_String(`unexpected end of input, expected binary operator`)})], [() => (__Ink_Empty), () => ((() => { let result; result = parseAtom(tokens, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()) : (__ink_assgn_trgt[len(nodes)]) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()) : (__ink_assgn_trgt.idx) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => (result)]]) })())]]) })())], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => (null), () => ({node: right, idx: (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: __Ink_String(`unexpected end of input, expected binary operator`)})], [() => (__Ink_Empty), () => ((() => { let result; result = parseBinaryExpr((() => {let __ink_acc_trgt = __as_ink_string(nodes); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (len(nodes) - 1) })()] || null : (__ink_acc_trgt[(() => { return (len(nodes) - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return (len(nodes) - 1) })()] : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), opPriority((() => {let __ink_acc_trgt = __as_ink_string(ops); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (len(ops) - 1) })()] || null : (__ink_acc_trgt[(() => { return (len(ops) - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return (len(ops) - 1) })()] : null)})()), tokens, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return (len(nodes) - 1) })(), (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()) : (__ink_assgn_trgt[(() => { return (len(nodes) - 1) })()]) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()) : (__ink_assgn_trgt.idx) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => (result)]]) })())]]))]]) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub) })() })()())], [() => (__Ink_Empty), () => (result)]]); each(ops, (op, i) => (() => { let node; node = (() => {let __ink_acc_trgt = __as_ink_string(nodes); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(i + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(i + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(i + 1) })()] : null)})(); return (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})(), op: (() => {let __ink_acc_trgt = __as_ink_string(op); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), left: (() => {let __ink_acc_trgt = __as_ink_string(nodes); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), right: node}) : (__ink_assgn_trgt[0]) = {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})(), op: (() => {let __ink_acc_trgt = __as_ink_string(op); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), left: (() => {let __ink_acc_trgt = __as_ink_string(nodes); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), right: node}; return __ink_assgn_trgt})() })()); return {node: (() => {let __ink_acc_trgt = __as_ink_string(nodes); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), idx: (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: null} })();
parseExpr = (tokens, idx) => (() => { let S; let atom; let consumeDanglingSeparator; let result; S = {idx: idx}; consumeDanglingSeparator = () => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => ({type: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})(), val: __Ink_Empty, line: __Ink_Empty, col: __Ink_Empty, i: __Ink_Empty}), () => ((() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)) : (__ink_assgn_trgt.idx) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1); return __ink_assgn_trgt})())]]); result = parseAtom(tokens, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()); atom = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()) : (__ink_assgn_trgt.idx) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(); return __ink_assgn_trgt})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => (null), () => ({node: null, idx: __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1), err: __Ink_String(`unexpected end of input, expected continued expression`)})], [() => (__Ink_Empty), () => ((() => { let next; let produceBinaryExpr; let produceMatchExpr; next = (() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)) : (__ink_assgn_trgt.idx) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1); return __ink_assgn_trgt})(); produceBinaryExpr = () => (() => { let binExpr; let result; result = parseBinaryExpr(atom, next, __ink_negate(1), tokens, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()); binExpr = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()) : (__ink_assgn_trgt.idx) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(); return __ink_assgn_trgt})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => ({type: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchColon] || null : (__ink_acc_trgt.MatchColon !== undefined ? __ink_acc_trgt.MatchColon : null)})(), val: __Ink_Empty, line: __Ink_Empty, col: __Ink_Empty, i: __Ink_Empty}), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)) : (__ink_assgn_trgt.idx) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1); return __ink_assgn_trgt})(); return produceMatchExpr(binExpr) })())], [() => (__Ink_Empty), () => ((() => { consumeDanglingSeparator(); return {node: binExpr, idx: (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: null} })())]]))], [() => (__Ink_Empty), () => (result)]]) })(); produceMatchExpr = condition => (() => { let clauses; let result; result = parseMatchBody(tokens, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()); clauses = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()) : (__ink_assgn_trgt.idx) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(); return __ink_assgn_trgt})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ((() => { consumeDanglingSeparator(); return {node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchExpr] || null : (__ink_acc_trgt.MatchExpr !== undefined ? __ink_acc_trgt.MatchExpr : null)})(), condition: condition, clauses: clauses}, idx: (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()} })())], [() => (__Ink_Empty), () => (result)]]) })(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(next); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})()), () => ({node: atom, idx: (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: null})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RightParen] || null : (__ink_acc_trgt.RightParen !== undefined ? __ink_acc_trgt.RightParen : null)})()), () => ({node: atom, idx: ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1), err: null})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[KeyValueSeparator] || null : (__ink_acc_trgt.KeyValueSeparator !== undefined ? __ink_acc_trgt.KeyValueSeparator : null)})()), () => ({node: atom, idx: ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1), err: null})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[CaseArrow] || null : (__ink_acc_trgt.CaseArrow !== undefined ? __ink_acc_trgt.CaseArrow : null)})()), () => ({node: atom, idx: ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1), err: null})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AddOp] || null : (__ink_acc_trgt.AddOp !== undefined ? __ink_acc_trgt.AddOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[SubOp] || null : (__ink_acc_trgt.SubOp !== undefined ? __ink_acc_trgt.SubOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MulOp] || null : (__ink_acc_trgt.MulOp !== undefined ? __ink_acc_trgt.MulOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DivOp] || null : (__ink_acc_trgt.DivOp !== undefined ? __ink_acc_trgt.DivOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ModOp] || null : (__ink_acc_trgt.ModOp !== undefined ? __ink_acc_trgt.ModOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AndOp] || null : (__ink_acc_trgt.AndOp !== undefined ? __ink_acc_trgt.AndOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[XorOp] || null : (__ink_acc_trgt.XorOp !== undefined ? __ink_acc_trgt.XorOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[OrOp] || null : (__ink_acc_trgt.OrOp !== undefined ? __ink_acc_trgt.OrOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[GtOp] || null : (__ink_acc_trgt.GtOp !== undefined ? __ink_acc_trgt.GtOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LtOp] || null : (__ink_acc_trgt.LtOp !== undefined ? __ink_acc_trgt.LtOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EqOp] || null : (__ink_acc_trgt.EqOp !== undefined ? __ink_acc_trgt.EqOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchColon] || null : (__ink_acc_trgt.MatchColon !== undefined ? __ink_acc_trgt.MatchColon : null)})()), () => (produceMatchExpr(atom))], [() => (__Ink_Empty), () => ({node: null, idx: (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: f(__Ink_String(`unexpected token {{0}} (parseExpr)`), [tkString(next)])})]]) })())]]) })())], [() => (__Ink_Empty), () => (result)]]) })();
parseAtom = (tokens, idx) => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})(), [[() => (null), () => ({node: null, idx: idx, err: __Ink_String(`unexpected end of input, expected atom`)})], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NegOp] || null : (__ink_acc_trgt.NegOp !== undefined ? __ink_acc_trgt.NegOp : null)})()), () => ((() => { let result; result = parseAtom(tokens, __as_ink_string(idx + 1)); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[UnaryExpr] || null : (__ink_acc_trgt.UnaryExpr !== undefined ? __ink_acc_trgt.UnaryExpr : null)})(), op: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NegOp] || null : (__ink_acc_trgt.NegOp !== undefined ? __ink_acc_trgt.NegOp : null)})(), left: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()}, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()})], [() => (__Ink_Empty), () => (result)]]) })())], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(idx + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] : null)})(), [[() => (null), () => ({node: null, idx: __as_ink_string(idx + 1), err: __Ink_String(`unexpected end of input, expected start of atom`)})], [() => (__Ink_Empty), () => ((() => { let __ink_trampolined_consumePotentialFunctionCall; let consumePotentialFunctionCall; let tok; tok = (() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})(); consumePotentialFunctionCall = (fnNode, idx) => (() => { __ink_trampolined_consumePotentialFunctionCall = (fnNode, idx) => (() => { return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})(), [[() => ({type: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LParen] || null : (__ink_acc_trgt.LParen !== undefined ? __ink_acc_trgt.LParen : null)})(), val: __Ink_Empty, line: __Ink_Empty, col: __Ink_Empty, i: __Ink_Empty}), () => ((() => { let result; result = parseFnCall(fnNode, tokens, idx); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => (__ink_trampoline(__ink_trampolined_consumePotentialFunctionCall, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()))], [() => (__Ink_Empty), () => (result)]]) })())], [() => (__Ink_Empty), () => ({node: fnNode, idx: idx})]]) })(); return __ink_resolve_trampoline(__ink_trampolined_consumePotentialFunctionCall, fnNode, idx) })(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NumberLiteral] || null : (__ink_acc_trgt.NumberLiteral !== undefined ? __ink_acc_trgt.NumberLiteral : null)})()), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NumberLiteral] || null : (__ink_acc_trgt.NumberLiteral !== undefined ? __ink_acc_trgt.NumberLiteral : null)})(), val: (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()}, idx: __as_ink_string(idx + 1)})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[StringLiteral] || null : (__ink_acc_trgt.StringLiteral !== undefined ? __ink_acc_trgt.StringLiteral : null)})()), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[StringLiteral] || null : (__ink_acc_trgt.StringLiteral !== undefined ? __ink_acc_trgt.StringLiteral : null)})(), val: (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()}, idx: __as_ink_string(idx + 1)})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[TrueLiteral] || null : (__ink_acc_trgt.TrueLiteral !== undefined ? __ink_acc_trgt.TrueLiteral : null)})()), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BooleanLiteral] || null : (__ink_acc_trgt.BooleanLiteral !== undefined ? __ink_acc_trgt.BooleanLiteral : null)})(), val: true}, idx: __as_ink_string(idx + 1)})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FalseLiteral] || null : (__ink_acc_trgt.FalseLiteral !== undefined ? __ink_acc_trgt.FalseLiteral : null)})()), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BooleanLiteral] || null : (__ink_acc_trgt.BooleanLiteral !== undefined ? __ink_acc_trgt.BooleanLiteral : null)})(), val: false}, idx: __as_ink_string(idx + 1)})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(idx + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FunctionArrow] || null : (__ink_acc_trgt.FunctionArrow !== undefined ? __ink_acc_trgt.FunctionArrow : null)})()), () => (parseFnLiteral(tokens, idx))], [() => (__Ink_Empty), () => (consumePotentialFunctionCall({type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()}, __as_ink_string(idx + 1)))]]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})()), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(idx + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FunctionArrow] || null : (__ink_acc_trgt.FunctionArrow !== undefined ? __ink_acc_trgt.FunctionArrow : null)})()), () => (parseFnLiteral(tokens, idx))], [() => (__Ink_Empty), () => (consumePotentialFunctionCall({type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})(), val: (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()}, __as_ink_string(idx + 1)))]]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LParen] || null : (__ink_acc_trgt.LParen !== undefined ? __ink_acc_trgt.LParen : null)})()), () => ((() => { let exprs; let result; exprs = []; result = parseGroup(tokens, idx, parseExpr, exprs, (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RParen] || null : (__ink_acc_trgt.RParen !== undefined ? __ink_acc_trgt.RParen : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => (null), () => ({node: null, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: __Ink_String(`unexpected end of input, expected continued expression`)})], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FunctionArrow] || null : (__ink_acc_trgt.FunctionArrow !== undefined ? __ink_acc_trgt.FunctionArrow : null)})()), () => (parseFnLiteral(tokens, idx))], [() => (__Ink_Empty), () => (consumePotentialFunctionCall({type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})(), exprs: exprs}, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()))]]))]]))], [() => (__Ink_Empty), () => (result)]]) })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBrace] || null : (__ink_acc_trgt.LBrace !== undefined ? __ink_acc_trgt.LBrace : null)})()), () => ((() => { let entries; let result; entries = []; result = parseGroup(tokens, idx, parseObjectEntry, entries, (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RBrace] || null : (__ink_acc_trgt.RBrace !== undefined ? __ink_acc_trgt.RBrace : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectLiteral] || null : (__ink_acc_trgt.ObjectLiteral !== undefined ? __ink_acc_trgt.ObjectLiteral : null)})(), entries: entries}, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()})], [() => (__Ink_Empty), () => (result)]]) })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBracket] || null : (__ink_acc_trgt.LBracket !== undefined ? __ink_acc_trgt.LBracket : null)})()), () => (parseListLiteral(tokens, idx))], [() => (__Ink_Empty), () => ({node: null, idx: idx, err: f(__Ink_String(`unexpected token {{0}} (parseAtom)`), [tkString((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})())])})]]) })())]]))]]))]]);
parseGroup = (tokens, idx, subparser, acc, guardTok) => (() => { return (() => { let __ink_trampolined_sub; let sub; return sub = idx => (() => { __ink_trampolined_sub = idx => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})(), [[() => ({type: guardTok, val: __Ink_Empty, line: __Ink_Empty, col: __Ink_Empty, i: __Ink_Empty}), () => ({idx: __as_ink_string(idx + 1)})], [() => (__Ink_Empty), () => ((() => { let expr; let result; result = subparser(tokens, idx); expr = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), expr) : (__ink_assgn_trgt[len(acc)]) = expr; return __ink_assgn_trgt})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => (null), () => ({node: null, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: __as_ink_string(__Ink_String(`unexpected end of input, expected `) + typeName(guardTok))})], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => (guardTok), () => ({node: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), idx: __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)})], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()))]]))]]) })())], [() => (__Ink_Empty), () => (result)]]) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub, idx) })() })()(__as_ink_string(idx + 1)) })();
parseListLiteral = (tokens, idx) => (() => { let exprs; let result; exprs = []; result = parseGroup(tokens, idx, parseExpr, exprs, (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RBracket] || null : (__ink_acc_trgt.RBracket !== undefined ? __ink_acc_trgt.RBracket : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ListLiteral] || null : (__ink_acc_trgt.ListLiteral !== undefined ? __ink_acc_trgt.ListLiteral : null)})(), exprs: exprs}, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()})], [() => (__Ink_Empty), () => (result)]]) })();
parseFnLiteral = (tokens, idx) => (() => { let args; let processBody; let tok; args = []; processBody = idx => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})(), [[() => ({type: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FunctionArrow] || null : (__ink_acc_trgt.FunctionArrow !== undefined ? __ink_acc_trgt.FunctionArrow : null)})(), val: __Ink_Empty, line: __Ink_Empty, col: __Ink_Empty, i: __Ink_Empty}), () => ((() => { let result; result = parseExpr(tokens, __as_ink_string(idx + 1)); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})(), args: args, body: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()}, idx: ((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1)})], [() => (__Ink_Empty), () => (result)]]) })())], [() => (__Ink_Empty), () => ({node: null, idx: idx, error: __Ink_String(`unexpected end of input, expected =>`)})]]); tok = (() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})(); return __ink_match(tok, [[() => (null), () => ({node: null, idx: idx, err: __Ink_String(`unexpected end of input, expected fn args list`)})], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})()), () => (processBody(__as_ink_string(idx + 1)))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(args); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()}) : (__ink_assgn_trgt[0]) = {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()}; return __ink_assgn_trgt})(); return processBody(__as_ink_string(idx + 1)) })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LParen] || null : (__ink_acc_trgt.LParen !== undefined ? __ink_acc_trgt.LParen : null)})()), () => ((() => { let result; result = parseGroup(tokens, idx, parseExpr, args, (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RParen] || null : (__ink_acc_trgt.RParen !== undefined ? __ink_acc_trgt.RParen : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => (processBody((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()))], [() => (__Ink_Empty), () => (result)]]) })())], [() => (__Ink_Empty), () => ({node: null, idx: idx, err: __Ink_String(`unexpected token, expected start of fn literal`)})]]))]]) })();
parseFnCall = (fnNode, tokens, idx) => (() => { let args; args = []; return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(idx + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] : null)})(), [[() => (null), () => ({node: null, idx: __as_ink_string(idx + 1), err: __Ink_String(`unexpected end of input, expected fn args list`)})], [() => (__Ink_Empty), () => ((() => { let result; result = parseGroup(tokens, idx, parseExpr, args, (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RParen] || null : (__ink_acc_trgt.RParen !== undefined ? __ink_acc_trgt.RParen : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnCall] || null : (__ink_acc_trgt.FnCall !== undefined ? __ink_acc_trgt.FnCall : null)})(), fn: fnNode, args: args}, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()})], [() => (__Ink_Empty), () => (result)]]) })())]]) })();
parseMatchBody = (tokens, idx) => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(idx + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] : null)})(), [[() => (null), () => ({node: null, idx: __as_ink_string(idx + 1), err: __Ink_String(`unexpected end of input, expected {`)})], [() => (__Ink_Empty), () => ((() => { let clauses; let result; clauses = []; result = parseGroup(tokens, idx, parseMatchClause, clauses, (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RBrace] || null : (__ink_acc_trgt.RBrace !== undefined ? __ink_acc_trgt.RBrace : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: clauses, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()})], [() => (__Ink_Empty), () => (result)]]) })())]]);
parseMatchClause = (tokens, idx) => (() => { let atom; let result; result = parseExpr(tokens, idx); atom = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => (null), () => ({node: null, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: __Ink_String(`unexpected end of input, expected ->`)})], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1) })()] : null)})(), [[() => (null), () => ({node: null, idx: __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1), err: __Ink_String(`unexpected end of input, expected expression in clause following ->`)})], [() => (__Ink_Empty), () => ((() => { let clauseResult; clauseResult = parseExpr(tokens, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(clauseResult); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchClause] || null : (__ink_acc_trgt.MatchClause !== undefined ? __ink_acc_trgt.MatchClause : null)})(), target: atom, expr: (() => {let __ink_acc_trgt = __as_ink_string(clauseResult); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()}, idx: (() => {let __ink_acc_trgt = __as_ink_string(clauseResult); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()})], [() => (__Ink_Empty), () => (clauseResult)]]) })())]]))]]))], [() => (__Ink_Empty), () => (result)]]) })();
parseObjectEntry = (tokens, idx) => (() => { let atom; let result; result = parseExpr(tokens, idx); atom = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => (null), () => ({node: null, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: __Ink_String(`unexpected end of input, expected :`)})], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1) })()] : null)})(), [[() => (null), () => ({node: null, idx: __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1), err: __Ink_String(`unexpected end of input, expected expression in entry following :`)})], [() => (__Ink_Empty), () => ((() => { let valResult; valResult = parseExpr(tokens, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(valResult); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectEntry] || null : (__ink_acc_trgt.ObjectEntry !== undefined ? __ink_acc_trgt.ObjectEntry : null)})(), key: atom, val: (() => {let __ink_acc_trgt = __as_ink_string(valResult); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()}, idx: (() => {let __ink_acc_trgt = __as_ink_string(valResult); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()})], [() => (__Ink_Empty), () => (valResult)]]) })())]]))]]))], [() => (__Ink_Empty), () => (result)]]) })()

std = load(__Ink_String(`../vendor/std`));
log = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[log] || null : (__ink_acc_trgt.log !== undefined ? __ink_acc_trgt.log : null)})();
f = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[format] || null : (__ink_acc_trgt.format !== undefined ? __ink_acc_trgt.format : null)})();
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
each = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[each] || null : (__ink_acc_trgt.each !== undefined ? __ink_acc_trgt.each : null)})();
filter = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[filter] || null : (__ink_acc_trgt.filter !== undefined ? __ink_acc_trgt.filter : null)})();
clone = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[clone] || null : (__ink_acc_trgt.clone !== undefined ? __ink_acc_trgt.clone : null)})();
append = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[append] || null : (__ink_acc_trgt.append !== undefined ? __ink_acc_trgt.append : null)})();
Tokenize = load(__Ink_String(`tokenize`));
Tok = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Tok] || null : (__ink_acc_trgt.Tok !== undefined ? __ink_acc_trgt.Tok : null)})();
tkString = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[tkString] || null : (__ink_acc_trgt.tkString !== undefined ? __ink_acc_trgt.tkString : null)})();
Parse = load(__Ink_String(`parse`));
Node = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Node] || null : (__ink_acc_trgt.Node !== undefined ? __ink_acc_trgt.Node : null)})();
ident__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ident__ink_qm__] || null : (__ink_acc_trgt.ident__ink_qm__ !== undefined ? __ink_acc_trgt.ident__ink_qm__ : null)})();
ndString = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ndString] || null : (__ink_acc_trgt.ndString !== undefined ? __ink_acc_trgt.ndString : null)})();
decl__ink_qm__ = expr => __ink_and(__ink_and(__ink_eq((() => {let __ink_acc_trgt = __as_ink_string(expr); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})()), __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(expr); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})())), ident__ink_qm__((() => {let __ink_acc_trgt = __as_ink_string(expr); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()));
analyzeSubexpr = (node, ctx, tail__ink_qm__) => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})()), () => ((() => { ctx = clone(ctx); (() => {let __ink_assgn_trgt = __as_ink_string(ctx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(decls, {}) : (__ink_assgn_trgt.decls) = {}; return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(exprs, map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), (n, i) => analyzeSubexpr(n, ctx, __ink_eq(__as_ink_string(i + 1), len((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})()))))) : (__ink_assgn_trgt.exprs) = map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), (n, i) => analyzeSubexpr(n, ctx, __ink_eq(__as_ink_string(i + 1), len((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})())))); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(decls, filter(keys((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})()), decl => __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return decl })()] || null : (__ink_acc_trgt[(() => { return decl })()] !== undefined ? __ink_acc_trgt[(() => { return decl })()] : null)})(), null))) : (__ink_assgn_trgt.decls) = filter(keys((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})()), decl => __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return decl })()] || null : (__ink_acc_trgt[(() => { return decl })()] !== undefined ? __ink_acc_trgt[(() => { return decl })()] : null)})(), null)); return __ink_assgn_trgt})(); return node })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})()), () => ((() => { ctx = clone(ctx); __ink_match((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[enclosingFnLit] || null : (__ink_acc_trgt.enclosingFnLit !== undefined ? __ink_acc_trgt.enclosingFnLit : null)})(), [[() => (node), () => (null)], [() => (__Ink_Empty), () => ((() => {let __ink_assgn_trgt = __as_ink_string(ctx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(enclosingFn, null) : (__ink_assgn_trgt.enclosingFn) = null; return __ink_assgn_trgt})())]]); (() => {let __ink_assgn_trgt = __as_ink_string(ctx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(decls, {}) : (__ink_assgn_trgt.decls) = {}; return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(ctx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(args, {}) : (__ink_assgn_trgt.args) = {}; return __ink_assgn_trgt})(); each((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})(), n => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(n); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => ((() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return (() => {let __ink_acc_trgt = __as_ink_string(n); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})() })(), true) : (__ink_assgn_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(n); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})() })()]) = true; return __ink_assgn_trgt})())]])); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(body, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})(), ctx, true)) : (__ink_assgn_trgt.body) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})(), ctx, true); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(decls, filter(keys((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})()), decl => __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return decl })()] || null : (__ink_acc_trgt[(() => { return decl })()] !== undefined ? __ink_acc_trgt[(() => { return decl })()] : null)})(), null))) : (__ink_assgn_trgt.decls) = filter(keys((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})()), decl => __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return decl })()] || null : (__ink_acc_trgt[(() => { return decl })()] !== undefined ? __ink_acc_trgt[(() => { return decl })()] : null)})(), null)); return __ink_assgn_trgt})(); return node })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchExpr] || null : (__ink_acc_trgt.MatchExpr !== undefined ? __ink_acc_trgt.MatchExpr : null)})()), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(condition, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[condition] || null : (__ink_acc_trgt.condition !== undefined ? __ink_acc_trgt.condition : null)})(), ctx, false)) : (__ink_assgn_trgt.condition) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[condition] || null : (__ink_acc_trgt.condition !== undefined ? __ink_acc_trgt.condition : null)})(), ctx, false); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(clauses, map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[clauses] || null : (__ink_acc_trgt.clauses !== undefined ? __ink_acc_trgt.clauses : null)})(), n => analyzeSubexpr(n, ctx, true))) : (__ink_assgn_trgt.clauses) = map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[clauses] || null : (__ink_acc_trgt.clauses !== undefined ? __ink_acc_trgt.clauses : null)})(), n => analyzeSubexpr(n, ctx, true)); return __ink_assgn_trgt})(); return node })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchClause] || null : (__ink_acc_trgt.MatchClause !== undefined ? __ink_acc_trgt.MatchClause : null)})()), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(target, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})(), ctx, false)) : (__ink_assgn_trgt.target) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})(), ctx, false); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(expr, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[expr] || null : (__ink_acc_trgt.expr !== undefined ? __ink_acc_trgt.expr : null)})(), ctx, true)) : (__ink_assgn_trgt.expr) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[expr] || null : (__ink_acc_trgt.expr !== undefined ? __ink_acc_trgt.expr : null)})(), ctx, true); return __ink_assgn_trgt})(); return node })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnCall] || null : (__ink_acc_trgt.FnCall !== undefined ? __ink_acc_trgt.FnCall : null)})()), () => ((() => { let recursiveCall__ink_qm__; let simpleName__ink_qm__; (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(fn, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})(), ctx, false)) : (__ink_assgn_trgt.fn) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})(), ctx, false); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(args, map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})(), n => analyzeSubexpr(n, ctx, false))) : (__ink_assgn_trgt.args) = map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})(), n => analyzeSubexpr(n, ctx, false)); return __ink_assgn_trgt})(); simpleName__ink_qm__ = __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()); recursiveCall__ink_qm__ = (() => { return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[enclosingFn] || null : (__ink_acc_trgt.enclosingFn !== undefined ? __ink_acc_trgt.enclosingFn : null)})(), [[() => (null), () => (false)], [() => (__Ink_Empty), () => (__ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(), (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[enclosingFn] || null : (__ink_acc_trgt.enclosingFn !== undefined ? __ink_acc_trgt.enclosingFn : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()))]]) })(); return __ink_match(__ink_and(__ink_and(simpleName__ink_qm__, recursiveCall__ink_qm__), tail__ink_qm__), [[() => (true), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[enclosingFn] || null : (__ink_acc_trgt.enclosingFn !== undefined ? __ink_acc_trgt.enclosingFn : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(recurred__ink_qm__, true) : (__ink_assgn_trgt.recurred__ink_qm__) = true; return __ink_assgn_trgt})(); return {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnCall] || null : (__ink_acc_trgt.FnCall !== undefined ? __ink_acc_trgt.FnCall : null)})(), fn: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: __Ink_String(`__ink_trampoline`)}, args: append([{type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: __as_ink_string(__Ink_String(`__ink_trampolined_`) + (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})())}], (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})())} })())], [() => (__Ink_Empty), () => (node)]]) })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})()), () => ((() => { let defn__ink_qm__; let fnLiteral__ink_qm__; let simpleName__ink_qm__; defn__ink_qm__ = __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})()); simpleName__ink_qm__ = __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()); fnLiteral__ink_qm__ = __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})()); __ink_match(__ink_and(__ink_and(defn__ink_qm__, simpleName__ink_qm__), fnLiteral__ink_qm__), [[() => (true), () => ((() => { let fnCtx; fnCtx = clone(ctx); (() => {let __ink_assgn_trgt = __as_ink_string(fnCtx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(enclosingFn, (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()) : (__ink_assgn_trgt.enclosingFn) = (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(fnCtx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(enclosingFnLit, (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()) : (__ink_assgn_trgt.enclosingFnLit) = (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(left, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})(), ctx, false)) : (__ink_assgn_trgt.left) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})(), ctx, false); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(right, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})(), fnCtx, false)) : (__ink_assgn_trgt.right) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})(), fnCtx, false); return __ink_assgn_trgt})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(fnCtx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[enclosingFn] || null : (__ink_acc_trgt.enclosingFn !== undefined ? __ink_acc_trgt.enclosingFn : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[recurred__ink_qm__] || null : (__ink_acc_trgt.recurred__ink_qm__ !== undefined ? __ink_acc_trgt.recurred__ink_qm__ : null)})(), [[() => (true), () => ((() => { let trampolinedFnName; trampolinedFnName = __as_ink_string(__Ink_String(`__ink_trampolined_`) + (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(fnCtx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[enclosingFn] || null : (__ink_acc_trgt.enclosingFn !== undefined ? __ink_acc_trgt.enclosingFn : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return trampolinedFnName })(), true) : (__ink_assgn_trgt[(() => { return trampolinedFnName })()]) = true; return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(right, {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})(), args: clone((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()), decls: [], body: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})(), decls: [], exprs: [{type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})(), op: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})(), left: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: trampolinedFnName}, right: (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()}, {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnCall] || null : (__ink_acc_trgt.FnCall !== undefined ? __ink_acc_trgt.FnCall : null)})(), fn: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: __Ink_String(`__ink_resolve_trampoline`)}, args: append([{type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: trampolinedFnName}], clone((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()))}]}}) : (__ink_assgn_trgt.right) = {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})(), args: clone((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()), decls: [], body: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})(), decls: [], exprs: [{type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})(), op: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})(), left: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: trampolinedFnName}, right: (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()}, {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnCall] || null : (__ink_acc_trgt.FnCall !== undefined ? __ink_acc_trgt.FnCall : null)})(), fn: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: __Ink_String(`__ink_resolve_trampoline`)}, args: append([{type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: trampolinedFnName}], clone((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()))}]}}; return __ink_assgn_trgt})() })())]]) })())], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(left, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})(), ctx, false)) : (__ink_assgn_trgt.left) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})(), ctx, false); return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(right, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})(), ctx, false)) : (__ink_assgn_trgt.right) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})(), ctx, false); return __ink_assgn_trgt})() })())]]); __ink_match(decl__ink_qm__(node), [[() => (true), () => ((() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})() })(), true) : (__ink_assgn_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})() })()]) = true; return __ink_assgn_trgt})())]]); return node })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[UnaryExpr] || null : (__ink_acc_trgt.UnaryExpr !== undefined ? __ink_acc_trgt.UnaryExpr : null)})()), () => ((() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(left, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})(), ctx, false)) : (__ink_assgn_trgt.left) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})(), ctx, false); return __ink_assgn_trgt})())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectLiteral] || null : (__ink_acc_trgt.ObjectLiteral !== undefined ? __ink_acc_trgt.ObjectLiteral : null)})()), () => ((() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(entries, map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[entries] || null : (__ink_acc_trgt.entries !== undefined ? __ink_acc_trgt.entries : null)})(), e => analyzeSubexpr(e, ctx, false))) : (__ink_assgn_trgt.entries) = map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[entries] || null : (__ink_acc_trgt.entries !== undefined ? __ink_acc_trgt.entries : null)})(), e => analyzeSubexpr(e, ctx, false)); return __ink_assgn_trgt})())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectEntry] || null : (__ink_acc_trgt.ObjectEntry !== undefined ? __ink_acc_trgt.ObjectEntry : null)})()), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(key, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})(), ctx, false)) : (__ink_assgn_trgt.key) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})(), ctx, false); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(val, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(), ctx, false)) : (__ink_assgn_trgt.val) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(), ctx, false); return __ink_assgn_trgt})(); return node })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ListLiteral] || null : (__ink_acc_trgt.ListLiteral !== undefined ? __ink_acc_trgt.ListLiteral : null)})()), () => ((() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(exprs, map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), e => analyzeSubexpr(e, ctx, false))) : (__ink_assgn_trgt.exprs) = map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), e => analyzeSubexpr(e, ctx, false)); return __ink_assgn_trgt})())], [() => (__Ink_Empty), () => (node)]]);
analyze = node => analyzeSubexpr(node, {decls: {}, args: {}}, false)

std = load(__Ink_String(`../vendor/std`));
log = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[log] || null : (__ink_acc_trgt.log !== undefined ? __ink_acc_trgt.log : null)})();
f = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[format] || null : (__ink_acc_trgt.format !== undefined ? __ink_acc_trgt.format : null)})();
clone = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[clone] || null : (__ink_acc_trgt.clone !== undefined ? __ink_acc_trgt.clone : null)})();
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
cat = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[cat] || null : (__ink_acc_trgt.cat !== undefined ? __ink_acc_trgt.cat : null)})();
str = load(__Ink_String(`../vendor/str`));
replace = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replace] || null : (__ink_acc_trgt.replace !== undefined ? __ink_acc_trgt.replace : null)})();
quicksort = load(__Ink_String(`../vendor/quicksort`));
sort__ink_em__ = (() => {let __ink_acc_trgt = __as_ink_string(quicksort); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[sort__ink_em__] || null : (__ink_acc_trgt.sort__ink_em__ !== undefined ? __ink_acc_trgt.sort__ink_em__ : null)})();
Tokenize = load(__Ink_String(`tokenize`));
Tok = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Tok] || null : (__ink_acc_trgt.Tok !== undefined ? __ink_acc_trgt.Tok : null)})();
Parse = load(__Ink_String(`parse`));
Node = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Node] || null : (__ink_acc_trgt.Node !== undefined ? __ink_acc_trgt.Node : null)})();
ident__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ident__ink_qm__] || null : (__ink_acc_trgt.ident__ink_qm__ !== undefined ? __ink_acc_trgt.ident__ink_qm__ : null)})();
ndString = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ndString] || null : (__ink_acc_trgt.ndString !== undefined ? __ink_acc_trgt.ndString : null)})();
gen = node => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnCall] || null : (__ink_acc_trgt.FnCall !== undefined ? __ink_acc_trgt.FnCall : null)})()), () => (genFnCall(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[UnaryExpr] || null : (__ink_acc_trgt.UnaryExpr !== undefined ? __ink_acc_trgt.UnaryExpr : null)})()), () => (genUnaryExpr(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})()), () => (genBinaryExpr(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NumberLiteral] || null : (__ink_acc_trgt.NumberLiteral !== undefined ? __ink_acc_trgt.NumberLiteral : null)})()), () => (genNumberLiteral(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[StringLiteral] || null : (__ink_acc_trgt.StringLiteral !== undefined ? __ink_acc_trgt.StringLiteral : null)})()), () => (genStringLiteral(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BooleanLiteral] || null : (__ink_acc_trgt.BooleanLiteral !== undefined ? __ink_acc_trgt.BooleanLiteral : null)})()), () => (genBooleanLiteral(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})()), () => (genFnLiteral(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ListLiteral] || null : (__ink_acc_trgt.ListLiteral !== undefined ? __ink_acc_trgt.ListLiteral : null)})()), () => (genListLiteral(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectLiteral] || null : (__ink_acc_trgt.ObjectLiteral !== undefined ? __ink_acc_trgt.ObjectLiteral : null)})()), () => (genObjectLiteral(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => (genIdent(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})()), () => (genEmpty())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})()), () => (genExprList(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchExpr] || null : (__ink_acc_trgt.MatchExpr !== undefined ? __ink_acc_trgt.MatchExpr : null)})()), () => (genMatchExpr(node))], [() => (__Ink_Empty), () => (genErr(__Ink_String(`not implemented!`)))]]);
genErr = msg => f(__Ink_String(`throw new Error("{{0}}")`), [replace(msg, __Ink_String(`"`), __Ink_String(`\\"`))]);
genEmpty = () => __Ink_String(`__Ink_Empty`);
genBooleanLiteral = node => string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})());
genNumberLiteral = node => string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})());
genStringLiteral = node => f(__Ink_String(`__Ink_String(\`{{0}}\`)`), [(() => { let s; s = (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(); s = replace(s, __Ink_String(`\\`), __Ink_String(`\\\\`)); return s = replace(s, __Ink_String(`\``), __Ink_String(`\\\``)) })()]);
genListLiteral = node => __as_ink_string(__as_ink_string(__Ink_String(`[`) + cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), gen), __Ink_String(`, `))) + __Ink_String(`]`));
genObjectEntry = node => f(__Ink_String(`{{0}}: {{1}}`), [__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => (gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})()), () => (gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NumberLiteral] || null : (__ink_acc_trgt.NumberLiteral !== undefined ? __ink_acc_trgt.NumberLiteral : null)})()), () => (gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()))], [() => (__Ink_Empty), () => (__as_ink_string(__as_ink_string(__Ink_String(`[`) + gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})())) + __Ink_String(`]`)))]]), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})())]);
genObjectLiteral = node => __as_ink_string(__as_ink_string(__Ink_String(`{`) + cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[entries] || null : (__ink_acc_trgt.entries !== undefined ? __ink_acc_trgt.entries : null)})(), genObjectEntry), __Ink_String(`, `))) + __Ink_String(`}`));
genFnArg = (node, i) => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => (genIdent(node))], [() => (__Ink_Empty), () => (__as_ink_string(__Ink_String(`__`) + string(i)))]]);
genFnLiteral = node => f(__Ink_String(`{{0}} => {{1}}`), [__ink_match(len((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()), [[() => (0), () => (__Ink_String(`()`))], [() => (1), () => (genFnArg((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), 0))], [() => (__Ink_Empty), () => (__as_ink_string(__as_ink_string(__Ink_String(`(`) + cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})(), genFnArg), __Ink_String(`, `))) + __Ink_String(`)`)))]]), __ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectLiteral] || null : (__ink_acc_trgt.ObjectLiteral !== undefined ? __ink_acc_trgt.ObjectLiteral : null)})()), () => (__as_ink_string(__as_ink_string(__Ink_String(`(`) + gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})())) + __Ink_String(`)`)))], [() => (__Ink_Empty), () => (__ink_match(__ink_or(__ink_eq(len((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})()), 0), __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})())), [[() => (true), () => (gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()))], [() => (__Ink_Empty), () => (gen({type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})(), decls: (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})(), exprs: [(() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()]}))]]))]])]);
genFnCall = node => f(__Ink_String(`{{0}}({{1}})`), [__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})()), () => (__as_ink_string(__as_ink_string(__Ink_String(`(`) + gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})())) + __Ink_String(`)`)))], [() => (__Ink_Empty), () => (gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})()))]]), cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})(), gen), __Ink_String(`, `))]);
genUnaryExpr = node => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NegOp] || null : (__ink_acc_trgt.NegOp !== undefined ? __ink_acc_trgt.NegOp : null)})()), () => (f(__Ink_String(`__ink_negate({{0}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})())]))], [() => (__Ink_Empty), () => (genErr(f(__Ink_String(`UnaryExpr with unknown op: {{0}}`), [(() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})()])))]]);
genBinaryExpr = node => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AddOp] || null : (__ink_acc_trgt.AddOp !== undefined ? __ink_acc_trgt.AddOp : null)})()), () => (f(__Ink_String(`__as_ink_string({{0}} + {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[SubOp] || null : (__ink_acc_trgt.SubOp !== undefined ? __ink_acc_trgt.SubOp : null)})()), () => (f(__Ink_String(`({{0}} - {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MulOp] || null : (__ink_acc_trgt.MulOp !== undefined ? __ink_acc_trgt.MulOp : null)})()), () => (f(__Ink_String(`({{0}} * {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DivOp] || null : (__ink_acc_trgt.DivOp !== undefined ? __ink_acc_trgt.DivOp : null)})()), () => (f(__Ink_String(`({{0}} / {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ModOp] || null : (__ink_acc_trgt.ModOp !== undefined ? __ink_acc_trgt.ModOp : null)})()), () => (f(__Ink_String(`({{0}} % {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AndOp] || null : (__ink_acc_trgt.AndOp !== undefined ? __ink_acc_trgt.AndOp : null)})()), () => (f(__Ink_String(`__ink_and({{0}}, {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[XorOp] || null : (__ink_acc_trgt.XorOp !== undefined ? __ink_acc_trgt.XorOp : null)})()), () => (f(__Ink_String(`__ink_xor({{0}}, {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[OrOp] || null : (__ink_acc_trgt.OrOp !== undefined ? __ink_acc_trgt.OrOp : null)})()), () => (f(__Ink_String(`__ink_or({{0}}, {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EqOp] || null : (__ink_acc_trgt.EqOp !== undefined ? __ink_acc_trgt.EqOp : null)})()), () => (f(__Ink_String(`__ink_eq({{0}}, {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[GtOp] || null : (__ink_acc_trgt.GtOp !== undefined ? __ink_acc_trgt.GtOp : null)})()), () => (f(__Ink_String(`({{0}} > {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LtOp] || null : (__ink_acc_trgt.LtOp !== undefined ? __ink_acc_trgt.LtOp : null)})()), () => (f(__Ink_String(`({{0}} < {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})()), () => (__ink_match([(() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})()], [[() => ([(() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()]), () => ((() => { let tmpDfn; tmpDfn = clone((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(tmpDfn); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(left, {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: __Ink_String(`__ink_assgn_trgt`)}) : (__ink_assgn_trgt.left) = {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: __Ink_String(`__ink_assgn_trgt`)}; return __ink_assgn_trgt})(); return f(cat([__Ink_String(`(() => {let __ink_assgn_trgt = __as_ink_string({{0}})`), __Ink_String(`__is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign({{3}}, {{2}}) : {{1}} = {{2}}`), __Ink_String(`return __ink_assgn_trgt})()`)], __Ink_String(`; `)), [gen((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), genDefineTarget(tmpDfn), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]) })())], [() => (__Ink_Empty), () => (f(__Ink_String(`{{0}} = {{1}}`), [genDefineTarget((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))]]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => (f(cat([__Ink_String(`(() => {let __ink_acc_trgt = __as_ink_string({{0}})`), __Ink_String(`return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[{{1}}] || null : (__ink_acc_trgt.{{1}} !== undefined ? __ink_acc_trgt.{{1}} : null)})()`)], __Ink_String(`; `)), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => (__Ink_Empty), () => (f(cat([__Ink_String(`(() => {let __ink_acc_trgt = __as_ink_string({{0}})`), __Ink_String(`return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[{{1}}] || null : (__ink_acc_trgt[{{1}}] !== undefined ? __ink_acc_trgt[{{1}}] : null)})()`)], __Ink_String(`; `)), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))]]))], [() => (__Ink_Empty), () => (genErr(f(__Ink_String(`BinaryExpr with unknown op: {{0}}`), [(() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})()])))]]);
genDefineTarget = node => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})()), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => (f(__Ink_String(`({{0}}.{{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => (__Ink_Empty), () => (f(__Ink_String(`({{0}}[{{1}}])`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))]]))], [() => (__Ink_Empty), () => (gen(node))]]);
genIdent = node => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(), [[() => (__Ink_String(`break`)), () => (__Ink_String(`__ink_ident_break`))], [() => (__Ink_String(`case`)), () => (__Ink_String(`__ink_ident_case`))], [() => (__Ink_String(`catch`)), () => (__Ink_String(`__ink_ident_catch`))], [() => (__Ink_String(`class`)), () => (__Ink_String(`__ink_ident_class`))], [() => (__Ink_String(`const`)), () => (__Ink_String(`__ink_ident_const`))], [() => (__Ink_String(`continue`)), () => (__Ink_String(`__ink_ident_continue`))], [() => (__Ink_String(`debugger`)), () => (__Ink_String(`__ink_ident_debugger`))], [() => (__Ink_String(`default`)), () => (__Ink_String(`__ink_ident_default`))], [() => (__Ink_String(`delete`)), () => (__Ink_String(`__ink_ident_delete`))], [() => (__Ink_String(`do`)), () => (__Ink_String(`__ink_ident_do`))], [() => (__Ink_String(`else`)), () => (__Ink_String(`__ink_ident_else`))], [() => (__Ink_String(`export`)), () => (__Ink_String(`__ink_ident_export`))], [() => (__Ink_String(`extends`)), () => (__Ink_String(`__ink_ident_extends`))], [() => (__Ink_String(`finally`)), () => (__Ink_String(`__ink_ident_finally`))], [() => (__Ink_String(`for`)), () => (__Ink_String(`__ink_ident_for`))], [() => (__Ink_String(`function`)), () => (__Ink_String(`__ink_ident_function`))], [() => (__Ink_String(`if`)), () => (__Ink_String(`__ink_ident_if`))], [() => (__Ink_String(`import`)), () => (__Ink_String(`__ink_ident_import`))], [() => (__Ink_String(`in`)), () => (__Ink_String(`__ink_ident_in`))], [() => (__Ink_String(`instanceof`)), () => (__Ink_String(`__ink_ident_instanceof`))], [() => (__Ink_String(`new`)), () => (__Ink_String(`__ink_ident_new`))], [() => (__Ink_String(`return`)), () => (__Ink_String(`__ink_ident_return`))], [() => (__Ink_String(`super`)), () => (__Ink_String(`__ink_ident_super`))], [() => (__Ink_String(`switch`)), () => (__Ink_String(`__ink_ident_switch`))], [() => (__Ink_String(`this`)), () => (__Ink_String(`__ink_ident_this`))], [() => (__Ink_String(`throw`)), () => (__Ink_String(`__ink_ident_throw`))], [() => (__Ink_String(`try`)), () => (__Ink_String(`__ink_ident_try`))], [() => (__Ink_String(`typeof`)), () => (__Ink_String(`__ink_ident_typeof`))], [() => (__Ink_String(`var`)), () => (__Ink_String(`__ink_ident_var`))], [() => (__Ink_String(`void`)), () => (__Ink_String(`__ink_ident_void`))], [() => (__Ink_String(`while`)), () => (__Ink_String(`__ink_ident_while`))], [() => (__Ink_String(`with`)), () => (__Ink_String(`__ink_ident_with`))], [() => (__Ink_String(`yield`)), () => (__Ink_String(`__ink_ident_yield`))], [() => (__Ink_Empty), () => ((() => { let ident; ident = replace((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(), __Ink_String(`?`), __Ink_String(`__ink_qm__`)); ident = replace(ident, __Ink_String(`!`), __Ink_String(`__ink_em__`)); return replace(ident, __Ink_String(`@`), __Ink_String(`__ink_am__`)) })())]]);
genExprListExprs = (decls, exprs) => f(__Ink_String(`(() => { {{0}}{{1}} })()`), [cat(map(sort__ink_em__(decls), decl => f(__Ink_String(`let {{0}}; `), [genIdent({val: decl})])), __Ink_String(``)), cat(map(exprs, (expr, i) => __ink_match(__as_ink_string(i + 1), [[() => (len(exprs)), () => (__as_ink_string(__Ink_String(`return `) + gen(expr)))], [() => (__Ink_Empty), () => (gen(expr))]])), __Ink_String(`; `))]);
genExprList = node => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), [[() => ([]), () => (__Ink_String(`null`))], [() => (__Ink_Empty), () => (genExprListExprs((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})()))]]);
genMatchExpr = node => f(__Ink_String(`__ink_match({{0}}, [{{1}}])`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[condition] || null : (__ink_acc_trgt.condition !== undefined ? __ink_acc_trgt.condition : null)})()), cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[clauses] || null : (__ink_acc_trgt.clauses !== undefined ? __ink_acc_trgt.clauses : null)})(), genMatchClause), __Ink_String(`, `))]);
genMatchClause = node => f(__Ink_String(`[() => ({{0}}), () => ({{1}})]`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[expr] || null : (__ink_acc_trgt.expr !== undefined ? __ink_acc_trgt.expr : null)})())])

std = load(__Ink_String(`../vendor/std`));
log = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[log] || null : (__ink_acc_trgt.log !== undefined ? __ink_acc_trgt.log : null)})();
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
each = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[each] || null : (__ink_acc_trgt.each !== undefined ? __ink_acc_trgt.each : null)})();
cat = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[cat] || null : (__ink_acc_trgt.cat !== undefined ? __ink_acc_trgt.cat : null)})();
Tokenize = load(__Ink_String(`tokenize`));
tokenize = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[tokenize] || null : (__ink_acc_trgt.tokenize !== undefined ? __ink_acc_trgt.tokenize : null)})();
tkString = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[tkString] || null : (__ink_acc_trgt.tkString !== undefined ? __ink_acc_trgt.tkString : null)})();
Parse = load(__Ink_String(`parse`));
parse = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[parse] || null : (__ink_acc_trgt.parse !== undefined ? __ink_acc_trgt.parse : null)})();
ndString = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ndString] || null : (__ink_acc_trgt.ndString !== undefined ? __ink_acc_trgt.ndString : null)})();
Analyze = load(__Ink_String(`analyze`));
analyze = (() => {let __ink_acc_trgt = __as_ink_string(Analyze); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[analyze] || null : (__ink_acc_trgt.analyze !== undefined ? __ink_acc_trgt.analyze : null)})();
Gen = load(__Ink_String(`gen`));
gen = (() => {let __ink_acc_trgt = __as_ink_string(Gen); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[gen] || null : (__ink_acc_trgt.gen !== undefined ? __ink_acc_trgt.gen : null)})();
Newline = char(10);
main = prog => (() => { let nodes; let tokens; tokens = tokenize(prog); nodes = parse(tokens); return __ink_match(type(nodes), [[() => (__Ink_String(`composite`)), () => ((() => { let analyzed; analyzed = map(nodes, analyze); return __as_ink_string(cat(map(analyzed, gen), __as_ink_string(__Ink_String(`;`) + Newline)) + Newline) })())], [() => (__Ink_String(`string`)), () => (nodes)]]) })()

