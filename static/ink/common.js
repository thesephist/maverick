str = s => bind(s, __Ink_String(`valueOf`))(s);
arr = bind(Object, __Ink_String(`values`));
hae = (tag, classList, attrs, events, children) => ({tag: str(tag), attrs: (() => {let __ink_assgn_trgt = __as_ink_string(attrs); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return __Ink_String(`class`) })(), arr(map(classList, str))) : (__ink_assgn_trgt[(() => { return __Ink_String(`class`) })()]) = arr(map(classList, str)); return __ink_assgn_trgt})(), events: events, children: arr(map(children, child => __ink_match(type(child), [[() => (__Ink_String(`string`)), () => (str(child))], [() => (__Ink_Empty), () => (child)]])))});
ha = (tag, classList, attrs, children) => hae(tag, classList, attrs, {}, children);
h = (tag, classList, children) => hae(tag, classList, {}, {}, children);
Renderer = root => (() => { let InitialDom; let node; let render; let self; render = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(window); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Torus] || null : (__ink_acc_trgt.Torus !== undefined ? __ink_acc_trgt.Torus : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[render] || null : (__ink_acc_trgt.render !== undefined ? __ink_acc_trgt.render : null)})(); InitialDom = h(__Ink_String(`div`), [], []); node = render(null, null, InitialDom); bind(root, __Ink_String(`appendChild`))(node); return self = {node: node, prev: InitialDom, update: jdom => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(node, render((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[prev] || null : (__ink_acc_trgt.prev !== undefined ? __ink_acc_trgt.prev : null)})(), jdom)) : (__ink_assgn_trgt.node) = render((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[prev] || null : (__ink_acc_trgt.prev !== undefined ? __ink_acc_trgt.prev : null)})(), jdom); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(prev, jdom) : (__ink_assgn_trgt.prev) = jdom; return __ink_assgn_trgt})(); return (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})() })()} })()

Tab = char(9);
Newline = char(10);
getItem = bind(localStorage, __Ink_String(`getItem`));
setItem = bind(localStorage, __Ink_String(`setItem`));
removeItem = bind(localStorage, __Ink_String(`removeItem`));
delay = (fn, timeout) => (() => { let S; let dateNow; S = {to: null}; dateNow = bind(Date, __Ink_String(`now`)); return arg => (() => { clearTimeout((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[to] || null : (__ink_acc_trgt.to !== undefined ? __ink_acc_trgt.to : null)})()); return (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(to, setTimeout(() => fn(arg), timeout)) : (__ink_assgn_trgt.to) = setTimeout(() => fn(arg), timeout); return __ink_assgn_trgt})() })() })();
translateInkToJS = (() => {let __ink_acc_trgt = __as_ink_string(load(__Ink_String(`september/ink/translate`))); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[main] || null : (__ink_acc_trgt.main !== undefined ? __ink_acc_trgt.main : null)})();
getEvalOutput = prog => (() => { let compiled; compiled = translateInkToJS(prog); return __ink_match(index(compiled, __Ink_String(`err @`)), [[() => (__ink_negate(1)), () => ((() => { let log; let out; let replOutput; out = s => (() => { append((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replOutputs] || null : (__ink_acc_trgt.replOutputs !== undefined ? __ink_acc_trgt.replOutputs : null)})(), split(s, Newline)); return render() })(); log = s => out(__as_ink_string(string(s) + Newline)); replOutput = eval(bind(compiled, __Ink_String(`toString`))()); return string(replOutput) })())], [() => (__Ink_Empty), () => (compiled)]]) })();
Link = (name, href) => ha(__Ink_String(`a`), [], {href: href, target: __Ink_String(`_blank`)}, name);
Header = () => h(__Ink_String(`header`), [], [__Ink_String(`Ink playground`)]);
Editor = () => h(__Ink_String(`editor`), [], [hae(__Ink_String(`textarea`), [], {value: (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[file] || null : (__ink_acc_trgt.file !== undefined ? __ink_acc_trgt.file : null)})()}, {input: evt => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(file, (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})()) : (__ink_assgn_trgt.file) = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); return __ink_assgn_trgt})(); persistFile(); return render() })(), keydown: evt => __ink_match([__ink_or((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ctrlKey] || null : (__ink_acc_trgt.ctrlKey !== undefined ? __ink_acc_trgt.ctrlKey : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[metaKey] || null : (__ink_acc_trgt.metaKey !== undefined ? __ink_acc_trgt.metaKey : null)})()), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()], [[() => ([true, __Ink_String(`Enter`)]), () => (runRepl())], [() => ([__Ink_Empty, __Ink_String(`Tab`)]), () => (null)]])}, [])]);
Repl = () => h(__Ink_String(`div`), [__Ink_String(`repl`)], [hae(__Ink_String(`button`), [], {}, {click: runRepl}, [__Ink_String(`Run`)]), h(__Ink_String(`ol`), [__Ink_String(`replOutput`)], map((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replOutputs] || null : (__ink_acc_trgt.replOutputs !== undefined ? __ink_acc_trgt.replOutputs : null)})(), output => h(__Ink_String(`li`), [], [h(__Ink_String(`code`), [], [output])]))), hae(__Ink_String(`input`), [__Ink_String(`replLine`)], {value: (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})()}, {input: evt => render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})()) : (__ink_assgn_trgt.line) = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); return __ink_assgn_trgt})()), keydown: evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})(), [[() => (__Ink_String(`Enter`)), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replOutputs] || null : (__ink_acc_trgt.replOutputs !== undefined ? __ink_acc_trgt.replOutputs : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replOutputs] || null : (__ink_acc_trgt.replOutputs !== undefined ? __ink_acc_trgt.replOutputs : null)})()), getEvalOutput((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})())) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replOutputs] || null : (__ink_acc_trgt.replOutputs !== undefined ? __ink_acc_trgt.replOutputs : null)})())]) = getEvalOutput((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})()); return __ink_assgn_trgt})(); return render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __Ink_String(``)) : (__ink_assgn_trgt.line) = __Ink_String(``); return __ink_assgn_trgt})()) })())]])}, [])]);
root = bind(document, __Ink_String(`querySelector`))(__Ink_String(`#root`));
r = Renderer(root);
update = (() => {let __ink_acc_trgt = __as_ink_string(r); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[update] || null : (__ink_acc_trgt.update !== undefined ? __ink_acc_trgt.update : null)})();
State = {file: __ink_match(restored = getItem(__Ink_String(`State.file`)), [[() => (null), () => (__Ink_String(`'Hello, ' + 'World!'`))], [() => (__Ink_Empty), () => (restored)]]), line: __Ink_String(``), replOutputs: []};
clearRepl = () => render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(replOutputs, []) : (__ink_assgn_trgt.replOutputs) = []; return __ink_assgn_trgt})());
runRepl = () => render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(replOutputs, [getEvalOutput((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[file] || null : (__ink_acc_trgt.file !== undefined ? __ink_acc_trgt.file : null)})())]) : (__ink_assgn_trgt.replOutputs) = [getEvalOutput((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[file] || null : (__ink_acc_trgt.file !== undefined ? __ink_acc_trgt.file : null)})())]; return __ink_assgn_trgt})());
persistFileImmediately = () => setItem(__Ink_String(`State.file`), (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[file] || null : (__ink_acc_trgt.file !== undefined ? __ink_acc_trgt.file : null)})());
persistFile = delay(persistFileImmediately, 800);
render = () => (() => { return update(h(__Ink_String(`div`), [__Ink_String(`app`)], [Header(), Editor(), Repl()])) })();
render()

