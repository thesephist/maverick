str = s => bind(s, __Ink_String(`valueOf`))(s);
arr = bind(Object, __Ink_String(`values`));
hae = (tag, classList, attrs, events, children) => ({tag: str(tag), attrs: (() => {let __ink_assgn_trgt = __as_ink_string(attrs); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return __Ink_String(`class`) })(), arr(map(classList, str))) : (__ink_assgn_trgt[(() => { return __Ink_String(`class`) })()]) = arr(map(classList, str)); return __ink_assgn_trgt})(), events: events, children: arr(map(children, child => __ink_match(type(child), [[() => (__Ink_String(`string`)), () => (str(child))], [() => (__Ink_Empty), () => (child)]])))});
ha = (tag, classList, attrs, children) => hae(tag, classList, attrs, {}, children);
h = (tag, classList, children) => hae(tag, classList, {}, {}, children);
Renderer = root => (() => { let InitialDom; let node; let render; let self; render = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(window); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Torus] || null : (__ink_acc_trgt.Torus !== undefined ? __ink_acc_trgt.Torus : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[render] || null : (__ink_acc_trgt.render !== undefined ? __ink_acc_trgt.render : null)})(); InitialDom = h(__Ink_String(`div`), [], []); node = render(null, null, InitialDom); bind(root, __Ink_String(`appendChild`))(node); return self = {node: node, prev: InitialDom, update: jdom => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(node, render((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[prev] || null : (__ink_acc_trgt.prev !== undefined ? __ink_acc_trgt.prev : null)})(), jdom)) : (__ink_assgn_trgt.node) = render((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[prev] || null : (__ink_acc_trgt.prev !== undefined ? __ink_acc_trgt.prev : null)})(), jdom); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(prev, jdom) : (__ink_assgn_trgt.prev) = jdom; return __ink_assgn_trgt})(); return (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})() })()} })()

Examples = {[__Ink_String(`Hello World`)]: __Ink_String(`log('Hello, ' + 'World!')`), [__Ink_String(`FizzBuzz`)]: __Ink_String(`fizzbuzz := n => each(
	range(1, n + 1, 1)
	n => [n % 3, n % 5] :: {
		[0, 0] -> log('FizzBuzz')
		[0, _] -> log('Fizz')
		[_, 0] -> log('Buzz')
		_ -> log(n)
	}
)

fizzbuzz(20)`), [__Ink_String(`Fibonacci`)]: __Ink_String(`\` naive implementation \`
fib := n => n :: {
	0 -> 0
	1 -> 1
	_ -> fib(n - 1) + fib(n - 2)
}

\` memoized / dynamic programming implementation \`
memo := [0, 1]
fibMemo := n => (
	memo.(n) :: {
		() -> memo.(n) := fibMemo(n - 1) + fibMemo(n - 2)
	}
	memo.(n)
)

out('Naive solution: '), log(fib(20))
out('Dynamic solution: '), log(fibMemo(20))`), [__Ink_String(`Prime sieve`)]: __Ink_String(`\` Ink prime sieve \`

\` we compute primes up to this limit \`
Max := 100

\` is a single number prime? \`
prime? := n => (
	\` is n coprime with nums < p? \`
	max := floor(pow(n, 0.5)) + 1
	(ip := p => p :: {
		max -> true
		_ -> n % p :: {
			0 -> false
			_ -> ip(p + 1)
		}
	})(2)
)

\` primes under N are numbers 2 .. N, filtered by prime? \`
getPrimesUnder := n => filter(range(2, n, 1), prime?)

\` display results \`
primes := getPrimesUnder(Max)
log(f('Total number of primes under {{ 0 }}: {{ 1 }}'
	[Max, len(primes)]))
log(stringList(primes))`)}

Tab = char(9);
Newline = char(10);
Line = {Prog: 0, Result: 1, Log: 2, Error: 3};
Page = {Home: __Ink_String(`home`), About: __Ink_String(`about`)};
Embedded__ink_qm__ = (() => { let searchParams; searchParams = jsnew(URLSearchParams, [(() => {let __ink_acc_trgt = __as_ink_string(location); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[search] || null : (__ink_acc_trgt.search !== undefined ? __ink_acc_trgt.search : null)})()]); return __ink_match(bind(searchParams, __Ink_String(`get`))(__Ink_String(`embed`)), [[() => (null), () => (false)], [() => (__Ink_String(``)), () => (false)], [() => (__Ink_Empty), () => (true)]]) })();
getItem = bind(localStorage, __Ink_String(`getItem`));
setItem = bind(localStorage, __Ink_String(`setItem`));
removeItem = bind(localStorage, __Ink_String(`removeItem`));
delay = (fn, timeout) => (() => { let S; let dateNow; S = {to: null}; dateNow = bind(Date, __Ink_String(`now`)); return arg => (() => { clearTimeout((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[to] || null : (__ink_acc_trgt.to !== undefined ? __ink_acc_trgt.to : null)})()); return (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(to, setTimeout(() => fn(arg), timeout)) : (__ink_assgn_trgt.to) = setTimeout(() => fn(arg), timeout); return __ink_assgn_trgt})() })() })();
translateInkToJS = (() => {let __ink_acc_trgt = __as_ink_string(load(__Ink_String(`september/ink/translate`))); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[main] || null : (__ink_acc_trgt.main !== undefined ? __ink_acc_trgt.main : null)})();
reportError = jsErr => (() => { return (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()), {type: (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Error] || null : (__ink_acc_trgt.Error !== undefined ? __ink_acc_trgt.Error : null)})(), text: __as_ink_string(__as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(jsErr); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[message] || null : (__ink_acc_trgt.message !== undefined ? __ink_acc_trgt.message : null)})() + Newline) + (() => {let __ink_acc_trgt = __as_ink_string(jsErr); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[stack] || null : (__ink_acc_trgt.stack !== undefined ? __ink_acc_trgt.stack : null)})())}) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})())]) = {type: (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Error] || null : (__ink_acc_trgt.Error !== undefined ? __ink_acc_trgt.Error : null)})(), text: __as_ink_string(__as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(jsErr); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[message] || null : (__ink_acc_trgt.message !== undefined ? __ink_acc_trgt.message : null)})() + Newline) + (() => {let __ink_acc_trgt = __as_ink_string(jsErr); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[stack] || null : (__ink_acc_trgt.stack !== undefined ? __ink_acc_trgt.stack : null)})())}; return __ink_assgn_trgt})() })();
evaluateInk = prog => (() => { let compiled; compiled = translateInkToJS(prog); return __ink_match(index(compiled, __Ink_String(`parse err @`)), [[() => (__ink_negate(1)), () => ((() => { let jsProgram; let log; let out; let replOutput; out = s => (() => { let lastLine; __ink_match(lastLine = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()) - 1) })()] || null : (__ink_acc_trgt[(() => { return (len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()) - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return (len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()) - 1) })()] : null)})(), [[() => ({type: (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Log] || null : (__ink_acc_trgt.Log !== undefined ? __ink_acc_trgt.Log : null)})(), text: __Ink_Empty}), () => ((() => { return (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return (len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()) - 1) })(), {type: (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Log] || null : (__ink_acc_trgt.Log !== undefined ? __ink_acc_trgt.Log : null)})(), text: __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(lastLine); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[text] || null : (__ink_acc_trgt.text !== undefined ? __ink_acc_trgt.text : null)})() + s)}) : (__ink_assgn_trgt[(() => { return (len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()) - 1) })()]) = {type: (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Log] || null : (__ink_acc_trgt.Log !== undefined ? __ink_acc_trgt.Log : null)})(), text: __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(lastLine); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[text] || null : (__ink_acc_trgt.text !== undefined ? __ink_acc_trgt.text : null)})() + s)}; return __ink_assgn_trgt})() })())], [() => (__Ink_Empty), () => ((() => { return (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()), {type: (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Log] || null : (__ink_acc_trgt.Log !== undefined ? __ink_acc_trgt.Log : null)})(), text: s}) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})())]) = {type: (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Log] || null : (__ink_acc_trgt.Log !== undefined ? __ink_acc_trgt.Log : null)})(), text: s}; return __ink_assgn_trgt})() })())]]); render(); return null })(); log = s => out(__as_ink_string(string(s) + Newline)); jsProgram = format(__Ink_String(`try { {{ 0 }} } catch (e) { reportError(e); null }`), [compiled]); replOutput = string(eval(str(jsProgram))); (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()), {type: (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Result] || null : (__ink_acc_trgt.Result !== undefined ? __ink_acc_trgt.Result : null)})(), text: replOutput}) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})())]) = {type: (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Result] || null : (__ink_acc_trgt.Result !== undefined ? __ink_acc_trgt.Result : null)})(), text: replOutput}; return __ink_assgn_trgt})(); return replOutput })())], [() => (__Ink_Empty), () => ((() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()), {type: (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Error] || null : (__ink_acc_trgt.Error !== undefined ? __ink_acc_trgt.Error : null)})(), text: compiled}) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})())]) = {type: (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Error] || null : (__ink_acc_trgt.Error !== undefined ? __ink_acc_trgt.Error : null)})(), text: compiled}; return __ink_assgn_trgt})())]]) })();
Link = (name, href) => ha(__Ink_String(`a`), [], {href: href, target: __Ink_String(`_blank`)}, name);
RunButton = () => hae(__Ink_String(`button`), [__Ink_String(`runButton`)], {title: __Ink_String(`Run code (Ctrl + Enter)`)}, {click: runRepl}, [__Ink_String(`Run`)]);
Header = () => h(__Ink_String(`header`), [], [h(__Ink_String(`nav`), [__Ink_String(`left-nav`)], [hae(__Ink_String(`a`), [], {href: __Ink_String(`/`), target: __Ink_String(`_blank`)}, {click: evt => __ink_match(Embedded__ink_qm__, [[() => (false), () => ((() => { bind(evt, __Ink_String(`preventDefault`))(); render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(page, (() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Home] || null : (__ink_acc_trgt.Home !== undefined ? __ink_acc_trgt.Home : null)})()) : (__ink_assgn_trgt.page) = (() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Home] || null : (__ink_acc_trgt.Home !== undefined ? __ink_acc_trgt.Home : null)})(); return __ink_assgn_trgt})()); return focusReplLine() })())]])}, [h(__Ink_String(`strong`), [], [__Ink_String(`Ink`), h(__Ink_String(`span`), [__Ink_String(`desktop`)], [__Ink_String(` playground`)])])]), hae(__Ink_String(`a`), [], {href: __Ink_String(`https://github.com/thesephist/maverick`)}, {click: evt => (() => { bind(evt, __Ink_String(`preventDefault`))(); return render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(page, (() => { return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[page] || null : (__ink_acc_trgt.page !== undefined ? __ink_acc_trgt.page : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Home] || null : (__ink_acc_trgt.Home !== undefined ? __ink_acc_trgt.Home : null)})()), () => ((() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[About] || null : (__ink_acc_trgt.About !== undefined ? __ink_acc_trgt.About : null)})())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[About] || null : (__ink_acc_trgt.About !== undefined ? __ink_acc_trgt.About : null)})()), () => ((() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Home] || null : (__ink_acc_trgt.Home !== undefined ? __ink_acc_trgt.Home : null)})())]]) })()) : (__ink_assgn_trgt.page) = (() => { return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[page] || null : (__ink_acc_trgt.page !== undefined ? __ink_acc_trgt.page : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Home] || null : (__ink_acc_trgt.Home !== undefined ? __ink_acc_trgt.Home : null)})()), () => ((() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[About] || null : (__ink_acc_trgt.About !== undefined ? __ink_acc_trgt.About : null)})())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[About] || null : (__ink_acc_trgt.About !== undefined ? __ink_acc_trgt.About : null)})()), () => ((() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Home] || null : (__ink_acc_trgt.Home !== undefined ? __ink_acc_trgt.Home : null)})())]]) })(); return __ink_assgn_trgt})()) })()}, [__Ink_String(`about`)])]), h(__Ink_String(`nav`), [__Ink_String(`right-nav`)], [__ink_match(Embedded__ink_qm__, [[() => (false), () => (hae(__Ink_String(`select`), [__Ink_String(`exampleSelect`)], {}, {[__Ink_String(`change`)]: evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(), [[() => (__Ink_String(``)), () => (render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(exampleName, (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})()) : (__ink_assgn_trgt.exampleName) = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); return __ink_assgn_trgt})()))], [() => (__Ink_Empty), () => ((() => { let exName; exName = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(file, (() => {let __ink_acc_trgt = __as_ink_string(Examples); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return exName })()] || null : (__ink_acc_trgt[(() => { return exName })()] !== undefined ? __ink_acc_trgt[(() => { return exName })()] : null)})()) : (__ink_assgn_trgt.file) = (() => {let __ink_acc_trgt = __as_ink_string(Examples); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return exName })()] || null : (__ink_acc_trgt[(() => { return exName })()] !== undefined ? __ink_acc_trgt[(() => { return exName })()] : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(exampleName, exName) : (__ink_assgn_trgt.exampleName) = exName; return __ink_assgn_trgt})(); return render() })())]])}, (() => { let defaultOption; let options; defaultOption = ha(__Ink_String(`option`), [], {value: __Ink_String(``), selected: __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exampleName] || null : (__ink_acc_trgt.exampleName !== undefined ? __ink_acc_trgt.exampleName : null)})(), __Ink_String(``))}, [__Ink_String(`-- examples --`)]); options = map(sort__ink_em__(keys(Examples)), k => ha(__Ink_String(`option`), [], {value: k, selected: __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exampleName] || null : (__ink_acc_trgt.exampleName !== undefined ? __ink_acc_trgt.exampleName : null)})(), k)}, [k])); return append([defaultOption], options) })()))]]), hae(__Ink_String(`select`), [__Ink_String(`colorSchemeSelect`)], {}, {[__Ink_String(`change`)]: evt => render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(theme, (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})()) : (__ink_assgn_trgt.theme) = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); return __ink_assgn_trgt})())}, map([__Ink_String(`light`), __Ink_String(`dark`)], theme => ha(__Ink_String(`option`), [], {value: theme, selected: __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[theme] || null : (__ink_acc_trgt.theme !== undefined ? __ink_acc_trgt.theme : null)})(), theme)}, [theme])))])]);
Editor = (() => { let cmEditor; let editorContainer; let getValue; let setOption; let setValue; editorContainer = bind(document, __Ink_String(`createElement`))(__Ink_String(`div`)); (() => {let __ink_assgn_trgt = __as_ink_string(editorContainer); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(className, __Ink_String(`editorContainer`)) : (__ink_assgn_trgt.className) = __Ink_String(`editorContainer`); return __ink_assgn_trgt})(); cmEditor = CodeMirror(editorContainer, {indentUnit: 4, tabSize: 4, lineWrapping: false, lineNumbers: true, indentWithTabs: true, autoCloseBrackets: true}); getValue = bind(cmEditor, __Ink_String(`getValue`)); setValue = bind(cmEditor, __Ink_String(`setValue`)); setOption = bind(cmEditor, __Ink_String(`setOption`)); setOption(__Ink_String(`extraKeys`), {[__Ink_String(`Cmd-Enter`)]: () => runRepl(), [__Ink_String(`Ctrl-Enter`)]: () => runRepl()}); setOption(__Ink_String(`theme`), str(__Ink_String(`maverick`))); bind(cmEditor, __Ink_String(`on`))(__Ink_String(`change`), (__0, changeEvt) => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(file, getValue()) : (__ink_assgn_trgt.file) = getValue(); return __ink_assgn_trgt})(); persistFile(); return render() })()); requestAnimationFrame(() => requestAnimationFrame(() => (() => { return bind(cmEditor, __Ink_String(`refresh`))() })())); return () => (() => { __ink_match((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[file] || null : (__ink_acc_trgt.file !== undefined ? __ink_acc_trgt.file : null)})(), [[() => (getValue()), () => (null)], [() => (__Ink_Empty), () => (setValue(str((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[file] || null : (__ink_acc_trgt.file !== undefined ? __ink_acc_trgt.file : null)})())))]]); return h(__Ink_String(`div`), [__Ink_String(`editor`)], [editorContainer, RunButton()]) })() })();
AddToEditorButton = prog => hae(__Ink_String(`button`), [__Ink_String(`addToEditorButton`)], {}, {click: evt => (() => { bind(evt, __Ink_String(`stopPropagation`))(); return render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(file, __as_ink_string(__as_ink_string(__as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[file] || null : (__ink_acc_trgt.file !== undefined ? __ink_acc_trgt.file : null)})() + Newline) + prog) + Newline)) : (__ink_assgn_trgt.file) = __as_ink_string(__as_ink_string(__as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[file] || null : (__ink_acc_trgt.file !== undefined ? __ink_acc_trgt.file : null)})() + Newline) + prog) + Newline); return __ink_assgn_trgt})()) })()}, __Ink_String(`edit`));
Repl = () => hae(__Ink_String(`div`), [__Ink_String(`repl`)], {}, {click: () => focusReplLine()}, [h(__Ink_String(`div`), [__Ink_String(`replTerm`)], map((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})(), line => (() => { return h(__Ink_String(`div`), [__Ink_String(`replLine`)], [__ink_match((() => {let __ink_acc_trgt = __as_ink_string(line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Prog] || null : (__ink_acc_trgt.Prog !== undefined ? __ink_acc_trgt.Prog : null)})()), () => (hae(__Ink_String(`code`), [__Ink_String(`prog-line`)], {}, {click: evt => (() => { render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, (() => {let __ink_acc_trgt = __as_ink_string(line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[text] || null : (__ink_acc_trgt.text !== undefined ? __ink_acc_trgt.text : null)})()) : (__ink_assgn_trgt.line) = (() => {let __ink_acc_trgt = __as_ink_string(line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[text] || null : (__ink_acc_trgt.text !== undefined ? __ink_acc_trgt.text : null)})(); return __ink_assgn_trgt})()); return focusReplLine() })()}, [__Ink_String(`> `), (() => {let __ink_acc_trgt = __as_ink_string(line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[text] || null : (__ink_acc_trgt.text !== undefined ? __ink_acc_trgt.text : null)})(), AddToEditorButton((() => {let __ink_acc_trgt = __as_ink_string(line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[text] || null : (__ink_acc_trgt.text !== undefined ? __ink_acc_trgt.text : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Result] || null : (__ink_acc_trgt.Result !== undefined ? __ink_acc_trgt.Result : null)})()), () => (h(__Ink_String(`code`), [__Ink_String(`result-line`)], [(() => {let __ink_acc_trgt = __as_ink_string(line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[text] || null : (__ink_acc_trgt.text !== undefined ? __ink_acc_trgt.text : null)})()]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Log] || null : (__ink_acc_trgt.Log !== undefined ? __ink_acc_trgt.Log : null)})()), () => (h(__Ink_String(`code`), [__Ink_String(`log-line`)], [(() => {let __ink_acc_trgt = __as_ink_string(line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[text] || null : (__ink_acc_trgt.text !== undefined ? __ink_acc_trgt.text : null)})()]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Error] || null : (__ink_acc_trgt.Error !== undefined ? __ink_acc_trgt.Error : null)})()), () => (h(__Ink_String(`code`), [__Ink_String(`error-line`)], [(() => {let __ink_acc_trgt = __as_ink_string(line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[text] || null : (__ink_acc_trgt.text !== undefined ? __ink_acc_trgt.text : null)})()]))]])]) })())), h(__Ink_String(`div`), [__Ink_String(`inputLine`)], [h(__Ink_String(`div`), [__Ink_String(`inputPrompt`)], [__Ink_String(`> `)]), hae(__Ink_String(`textarea`), [__Ink_String(`replInputLine`)], {value: (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), autofocus: __ink_negate(Embedded__ink_qm__), placeholder: __Ink_String(`Type an expression to run`)}, {input: evt => (() => { let inputEl; let normHeight; render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})()) : (__ink_assgn_trgt.line) = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); return __ink_assgn_trgt})()); inputEl = (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(inputEl); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[style] || null : (__ink_acc_trgt.style !== undefined ? __ink_acc_trgt.style : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(height, 0) : (__ink_assgn_trgt.height) = 0; return __ink_assgn_trgt})(); return __ink_match(normHeight = (() => {let __ink_acc_trgt = __as_ink_string(inputEl); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[scrollHeight] || null : (__ink_acc_trgt.scrollHeight !== undefined ? __ink_acc_trgt.scrollHeight : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(bind(inputEl, __Ink_String(`getBoundingClientRect`))()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[height] || null : (__ink_acc_trgt.height !== undefined ? __ink_acc_trgt.height : null)})()), () => (null)], [() => (__Ink_Empty), () => ((() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(inputEl); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[style] || null : (__ink_acc_trgt.style !== undefined ? __ink_acc_trgt.style : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(height, __as_ink_string(string(normHeight) + __Ink_String(`px`))) : (__ink_assgn_trgt.height) = __as_ink_string(string(normHeight) + __Ink_String(`px`)); return __ink_assgn_trgt})())]]) })(), keydown: evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})(), [[() => (__Ink_String(`Enter`)), () => ((() => { bind(evt, __Ink_String(`preventDefault`))(); return __ink_match(__ink_or((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ctrlKey] || null : (__ink_acc_trgt.ctrlKey !== undefined ? __ink_acc_trgt.ctrlKey : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[metaKey] || null : (__ink_acc_trgt.metaKey !== undefined ? __ink_acc_trgt.metaKey : null)})()), [[() => (true), () => (runRepl())], [() => (__Ink_Empty), () => (__ink_match(trim((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), __Ink_String(` `)), [[() => (__Ink_String(``)), () => (null)], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})()), {type: (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Prog] || null : (__ink_acc_trgt.Prog !== undefined ? __ink_acc_trgt.Prog : null)})(), text: (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})()}) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})())]) = {type: (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Prog] || null : (__ink_acc_trgt.Prog !== undefined ? __ink_acc_trgt.Prog : null)})(), text: (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})()}; return __ink_assgn_trgt})(); evaluateInk((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __Ink_String(``)) : (__ink_assgn_trgt.line) = __Ink_String(``); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(commandIndex, __ink_negate(1)) : (__ink_assgn_trgt.commandIndex) = __ink_negate(1); return __ink_assgn_trgt})(); render(); return scrollToReplEnd() })())]]))]]) })())], [() => (__Ink_String(`l`)), () => (__ink_match(__ink_or((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ctrlKey] || null : (__ink_acc_trgt.ctrlKey !== undefined ? __ink_acc_trgt.ctrlKey : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[altKey] || null : (__ink_acc_trgt.altKey !== undefined ? __ink_acc_trgt.altKey : null)})()), [[() => (true), () => (render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(replLines, []) : (__ink_assgn_trgt.replLines) = []; return __ink_assgn_trgt})()))]]))], [() => (__Ink_String(`ArrowUp`)), () => ((() => { let historicalCommands; let selectedCmd; bind(evt, __Ink_String(`preventDefault`))(); historicalCommands = map(reverse(filter((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})(), line => __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Prog] || null : (__ink_acc_trgt.Prog !== undefined ? __ink_acc_trgt.Prog : null)})()))), line => (() => {let __ink_acc_trgt = __as_ink_string(line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[text] || null : (__ink_acc_trgt.text !== undefined ? __ink_acc_trgt.text : null)})()); return __ink_match(selectedCmd = (() => {let __ink_acc_trgt = __as_ink_string(historicalCommands); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[commandIndex] || null : (__ink_acc_trgt.commandIndex !== undefined ? __ink_acc_trgt.commandIndex : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[commandIndex] || null : (__ink_acc_trgt.commandIndex !== undefined ? __ink_acc_trgt.commandIndex : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[commandIndex] || null : (__ink_acc_trgt.commandIndex !== undefined ? __ink_acc_trgt.commandIndex : null)})() + 1) })()] : null)})(), [[() => (null), () => (null)], [() => (__Ink_Empty), () => ((() => { let inputLine; (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, selectedCmd) : (__ink_assgn_trgt.line) = selectedCmd; return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(commandIndex, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[commandIndex] || null : (__ink_acc_trgt.commandIndex !== undefined ? __ink_acc_trgt.commandIndex : null)})() + 1)) : (__ink_assgn_trgt.commandIndex) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[commandIndex] || null : (__ink_acc_trgt.commandIndex !== undefined ? __ink_acc_trgt.commandIndex : null)})() + 1); return __ink_assgn_trgt})(); render(); inputLine = bind(document, __Ink_String(`querySelector`))(__Ink_String(`.replInputLine`)); log(selectedCmd); return bind(inputLine, __Ink_String(`setSelectionRange`))(len(selectedCmd), len(selectedCmd)) })())]]) })())], [() => (__Ink_String(`ArrowDown`)), () => ((() => { let historicalCommands; bind(evt, __Ink_String(`preventDefault`))(); historicalCommands = map(reverse(filter((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replLines] || null : (__ink_acc_trgt.replLines !== undefined ? __ink_acc_trgt.replLines : null)})(), line => __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Prog] || null : (__ink_acc_trgt.Prog !== undefined ? __ink_acc_trgt.Prog : null)})()))), line => (() => {let __ink_acc_trgt = __as_ink_string(line); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[text] || null : (__ink_acc_trgt.text !== undefined ? __ink_acc_trgt.text : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[commandIndex] || null : (__ink_acc_trgt.commandIndex !== undefined ? __ink_acc_trgt.commandIndex : null)})(), [[() => (__ink_negate(1)), () => (null)], [() => (__Ink_Empty), () => ((() => { let selectedCmd; selectedCmd = (() => {let __ink_acc_trgt = __as_ink_string(historicalCommands); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[commandIndex] || null : (__ink_acc_trgt.commandIndex !== undefined ? __ink_acc_trgt.commandIndex : null)})() - 1) })()] || null : (__ink_acc_trgt[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[commandIndex] || null : (__ink_acc_trgt.commandIndex !== undefined ? __ink_acc_trgt.commandIndex : null)})() - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[commandIndex] || null : (__ink_acc_trgt.commandIndex !== undefined ? __ink_acc_trgt.commandIndex : null)})() - 1) })()] : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, selectedCmd) : (__ink_assgn_trgt.line) = selectedCmd; return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(commandIndex, ((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[commandIndex] || null : (__ink_acc_trgt.commandIndex !== undefined ? __ink_acc_trgt.commandIndex : null)})() - 1)) : (__ink_assgn_trgt.commandIndex) = ((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[commandIndex] || null : (__ink_acc_trgt.commandIndex !== undefined ? __ink_acc_trgt.commandIndex : null)})() - 1); return __ink_assgn_trgt})(); render(); return __ink_match(selectedCmd, [[() => (null), () => (null)], [() => (__Ink_Empty), () => ((() => { let inputLine; inputLine = bind(document, __Ink_String(`querySelector`))(__Ink_String(`.replInputLine`)); return bind(inputLine, __Ink_String(`setSelectionRange`))(len(selectedCmd), len(selectedCmd)) })())]]) })())]]) })())]])}, [])])]);
Nbsp = char(160);
Credits = () => h(__Ink_String(`div`), [__Ink_String(`credits`)], [__Ink_String(`Ink playground is a project by `), Link(__Ink_String(`Linus`), __Ink_String(`https://thesephist.com/`)), __Ink_String(` built with `), Link(__Ink_String(`Ink`), __Ink_String(`https://dotink.co/`)), __as_ink_string(__as_ink_string(Nbsp + __Ink_String(`&`)) + Nbsp), Link(__Ink_String(`September`), __Ink_String(`https://github.com/thesephist/september`))]);
AboutPage = () => h(__Ink_String(`div`), [__Ink_String(`aboutPage`)], [h(__Ink_String(`div`), [__Ink_String(`aboutContent`)], [hae(__Ink_String(`button`), [__Ink_String(`aboutBackButton`)], {}, {click: () => render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(page, (() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Home] || null : (__ink_acc_trgt.Home !== undefined ? __ink_acc_trgt.Home : null)})()) : (__ink_assgn_trgt.page) = (() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Home] || null : (__ink_acc_trgt.Home !== undefined ? __ink_acc_trgt.Home : null)})(); return __ink_assgn_trgt})())}, [__Ink_String(`← back`)]), h(__Ink_String(`h1`), [], [__Ink_String(`About Ink playground`)]), h(__Ink_String(`p`), [], [__Ink_String(`The Ink playground is a web based IDE and REPL for the `), Link(__Ink_String(`Ink`), __Ink_String(`https://dotink.co/`)), __Ink_String(` programming language. It lets you write and run Ink programs
			privately in the browser. Ink programs in the playground run
			completely within your browser, and are not sent to a centralized
			server.`)]), h(__Ink_String(`p`), [], [__Ink_String(`The playground uses `), Link(__Ink_String(`September`), __Ink_String(`https://github.com/thesephist/september`)), __Ink_String(`, a compiler that compiles Ink to JavaScript, to compile Ink
			programs to JavaScript code for your browser to execute. The
			September compiler is also compiled to JavaScript using itself to
			be included in this app, and runs in the browser when you hit Run.`)]), h(__Ink_String(`p`), [], [__Ink_String(`Once an Ink program is compiled to JavaScript, the playground
			currently uses JavaScript's `), h(__Ink_String(`code`), [], [__Ink_String(`eval()`)]), __Ink_String(` function to execute code in the REPL. This means that a single
			browser session is one long REPL session — global variables are
			not cleared on every program run. There are rare edge cases where
			the compiler will crash on an invalid Ink program, or the compiled
			Ink program will error in a way that's unrecoverable. But because
			the playground is a static site, if anything seems off, you can
			simply reload the page and start fresh. Your Ink program in the
			editor will auto-save every few seconds.`)]), h(__Ink_String(`h2`), [], [__Ink_String(`Standard library and builtins`)]), h(__Ink_String(`p`), [], [__Ink_String(`In the playground, the standard libraries `), h(__Ink_String(`code`), [], [__Ink_String(`std`)]), __Ink_String(`, `), h(__Ink_String(`code`), [], [__Ink_String(`str`)]), __Ink_String(`, and `), h(__Ink_String(`code`), [], [__Ink_String(`quicksort`)]), __Ink_String(` are available from the global scope. This means you can, for
			example, call `), h(__Ink_String(`code`), [], [__Ink_String(`sort!(map([1, 2, 3], n => n * n))`)]), __Ink_String(` without loading any libraries in your program. Many built-in
			functions like `), h(__Ink_String(`code`), [], [__Ink_String(`time`)]), __Ink_String(`, `), h(__Ink_String(`code`), [], [__Ink_String(`rand`)]), __Ink_String(`, `), h(__Ink_String(`code`), [], [__Ink_String(`wait`)]), __Ink_String(`, and most math functions are also supported.`)]), h(__Ink_String(`h2`), [], [__Ink_String(`More about this project`)]), h(__Ink_String(`p`), [], [__Ink_String(`The Ink playground is built using Ink and standard libraries from
			Ink version v0.1.9. The app is written entirely in Ink, but also
			depends on `), Link(__Ink_String(`Torus`), __Ink_String(`https://github.com/thesephist/torus`)), __Ink_String(` to render the user interface. The source code for this project is
			available on GitHub at `), Link(__Ink_String(`thesephist/maverick`), __Ink_String(`https://github.com/thesephist/maverick`)), __Ink_String(`.`)])])]);
root = bind(document, __Ink_String(`querySelector`))(__Ink_String(`#root`));
r = Renderer(root);
update = (() => {let __ink_acc_trgt = __as_ink_string(r); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[update] || null : (__ink_acc_trgt.update !== undefined ? __ink_acc_trgt.update : null)})();
State = {file: (() => { let codeParam; let params; let restored; params = jsnew(URLSearchParams, [(() => {let __ink_acc_trgt = __as_ink_string(location); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[search] || null : (__ink_acc_trgt.search !== undefined ? __ink_acc_trgt.search : null)})()]); return __ink_match(codeParam = bind(params, __Ink_String(`get`))(__Ink_String(`code`)), [[() => (null), () => (__ink_match(restored = getItem(__Ink_String(`State.file`)), [[() => (null), () => ((() => {let __ink_acc_trgt = __as_ink_string(Examples); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[__Ink_String(`Hello World`)] || null : (__ink_acc_trgt[__Ink_String(`Hello World`)] !== undefined ? __ink_acc_trgt[__Ink_String(`Hello World`)] : null)})())], [() => (__Ink_Empty), () => (restored)]]))], [() => (__Ink_Empty), () => ((() => { bind(history, __Ink_String(`replaceState`))(null, null, __Ink_String(`/`)); return codeParam })())]]) })(), line: __Ink_String(``), replLines: [], exampleName: __Ink_String(``), commandIndex: __ink_negate(1), theme: __Ink_String(`light`), page: (() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Home] || null : (__ink_acc_trgt.Home !== undefined ? __ink_acc_trgt.Home : null)})()};
clearRepl = () => render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(replLines, []) : (__ink_assgn_trgt.replLines) = []; return __ink_assgn_trgt})());
focusReplLine = () => (() => { let replLine; return __ink_match(replLine = bind(document, __Ink_String(`querySelector`))(__Ink_String(`.replInputLine`)), [[() => (null), () => (null)], [() => (__Ink_Empty), () => (bind(replLine, __Ink_String(`focus`))())]]) })();
runRepl = () => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(replLines, []) : (__ink_assgn_trgt.replLines) = []; return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(commandIndex, __ink_negate(1)) : (__ink_assgn_trgt.commandIndex) = __ink_negate(1); return __ink_assgn_trgt})(); evaluateInk((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[file] || null : (__ink_acc_trgt.file !== undefined ? __ink_acc_trgt.file : null)})()); render(); return scrollToReplEnd() })();
scrollToReplEnd = () => (() => { let inputLine; return __ink_match(inputLine = bind(document, __Ink_String(`querySelector`))(__Ink_String(`.replInputLine`)), [[() => (null), () => (null)], [() => (__Ink_Empty), () => (bind(inputLine, __Ink_String(`scrollIntoView`))())]]) })();
persistFileImmediately = () => setItem(__Ink_String(`State.file`), (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[file] || null : (__ink_acc_trgt.file !== undefined ? __ink_acc_trgt.file : null)})());
persistFile = delay(persistFileImmediately, 800);
render = () => update(h(__Ink_String(`div`), [__Ink_String(`app`), (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[theme] || null : (__ink_acc_trgt.theme !== undefined ? __ink_acc_trgt.theme : null)})(), __ink_match(Embedded__ink_qm__, [[() => (true), () => (__Ink_String(`embedded`))], [() => (__Ink_Empty), () => (__Ink_String(``))]])], [Header(), __ink_match((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[page] || null : (__ink_acc_trgt.page !== undefined ? __ink_acc_trgt.page : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Home] || null : (__ink_acc_trgt.Home !== undefined ? __ink_acc_trgt.Home : null)})()), () => (h(__Ink_String(`div`), [__Ink_String(`workspace`)], [Editor(), Repl()]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Page); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[About] || null : (__ink_acc_trgt.About !== undefined ? __ink_acc_trgt.About : null)})()), () => (AboutPage())]]), __ink_match(Embedded__ink_qm__, [[() => (false), () => (Credits())]])]));
render()

