/**
 * Ink/JavaScript runtime/interop layer
 * implements Ink system interfaces for web and Node JS runtimes
 */

const __NODE = typeof process === 'object';

/* Ink builtins */

function args() {
	return process.argv;
}

function __ink_ident_in(cb) {
	// TODO
}

function out(s) {
	s = __as_ink_string(s);
	if (__NODE) {
		process.stdout.write(string(s).valueOf());
	} else {
		console.log(string(s).valueOf());
	}
	return null;
}

function dir(path, cb) {
	// TODO
}

function make(path, cb) {
	// TODO
}

function stat(path, cb) {
	// TODO
}

function read(path, offset, length, cb) {
	// TODO
}

function write(path, offset, data, cb) {
	// TODO
}

function __ink_ident_delete(path, cb) {
	// TODO
}

function listen(host, handler) {
	// TODO
}

function req(data, callback) {
	// TODO
}

function rand() {
	return Math.random();
}

function urand(length) {
	// TODO
}

function time() {
	return Date.now() / 1000;
}

function wait(duration, cb) {
	setTimeout(cb, duration * 1000);
	return null;
}

function exec(path, args, stdin, stdoutFn) {
	// TODO
}

function env() {
	if (__NODE) {
		return process.env;
	}
	return {};
}

function exit(code) {
	if (__NODE) {
		process.exit(code);
	}
	return null;
}

function sin(n) {
	return Math.sin(n);
}

function cos(n) {
	return Math.cos(n);
}

function asin(n) {
	return Math.asin(n);
}

function acos(n) {
	return Math.acos(n);
}

function pow(b, n) {
	return Math.pow(b, n);
}

function ln(n) {
	return Math.log(n);
}

function floor(n) {
	return Math.floor(n);
}

function load(path) {
	if (__NODE) {
		return require(string(path).valueOf());
	} else {
		throw new Error('load() not implemented!');
	}
}

function __is_ink_string(x) {
	if (x == null) {
		return false;
	}
	return x.__mark_ink_string;
}

// both JS native strings and __Ink_Strings are valid in the runtime
// semantics but we want to coerce values to __Ink_Strings
// within runtime builtins; this utility fn is useful for this.
function __as_ink_string(x) {
	if (typeof x === 'string') {
		return __Ink_String(x);
	}
	return x;
}

function string(x) {
	x = __as_ink_string(x);
	if (x === null) {
		return '()';
	} else if (typeof x === 'number') {
		return x.toString();
	} else if (__is_ink_string(x)) {
		return x;
	} else if (typeof x === 'boolean') {
		return x.toString();
	} else if (typeof x === 'function') {
		return x.toString(); // implementation-dependent, not specified
	} else if (Array.isArray(x) || typeof x === 'object') {
		const entries = [];
		for (const key of keys(x)) {
			entries.push(`${key}: ${__is_ink_string(x[key]) ? `'${x[key].valueOf().replace('\\', '\\\\').replace('\'', '\\\'')}'` : string(x[key])}`);
		}
		return '{' + entries.join(', ') + '}';
	} else if (x === undefined) {
		return 'undefined'; // undefined behavior
	}
	throw new Error('string() called on unknown type ' + x);
}

function number(x) {
	x = __as_ink_string(x);
	if (x === null) {
		return 0;
	} else if (typeof x === 'number') {
		return x;
	} else if (__is_ink_string(x)) {
		const n = parseFloat(x);
		return isNaN(n) ? null : n;
	} else if (typeof x === 'boolean') {
		return x ? 1 : 0;
	}
	return 0;
}

function point(c) {
	c = __as_ink_string(c);
	return c.valueOf().charCodeAt(0);
}

function char(n) {
	return String.fromCharCode(n);
}

function type(x) {
	x = __as_ink_string(x);
	if (x === null) {
		return '()';
	} else if (typeof x === 'number') {
		return 'number';
	} else if (__is_ink_string(x)) {
		return 'string';
	} else if (typeof x === 'boolean') {
		return 'boolean'
	} else if (typeof x === 'function') {
		return 'function';
	} else if (Array.isArray(x) || typeof x === 'object') {
		return 'composite';
	}
	throw new Error('type() called on unknown type ' + x);
}

function len(x) {
	x = __as_ink_string(x);
	switch (type(x)) {
		case 'string':
			return x.valueOf().length;
		case 'composite':
			if (Array.isArray(x)) {
				// -1 for .length
				return Object.getOwnPropertyNames(x).length - 1;
			} else {
				return Object.getOwnPropertyNames(x).length;
			}
		default:
			throw new Error('len() takes a string or composite value, but got ' + string(x));
	}
}

function keys(x) {
	if (type(x).valueOf() === 'composite') {
		if (Array.isArray(x)) {
			return Object.getOwnPropertyNames(x).filter(name => name !== 'length');
		} else {
			return Object.getOwnPropertyNames(x);
		}
	}
	throw new Error('keys() takes a composite value, but got ' + string(x).valueOf());
}

/* Ink semantics polyfill */

function __ink_negate(x) {
	if (x === true) {
		return false;
	}
	if (x === false) {
		return true;
	}

	return -x;
}

function __ink_eq(a, b) {
	a = __as_ink_string(a);
	b = __as_ink_string(b);
	if (a === __Ink_Empty || b === __Ink_Empty) {
		return true;
	}

	if (a === null && b === null) {
		return true;
	}
	if (a === null || b === null) {
		return false;
	}

	if (typeof a !== typeof b) {
		return false;
	}
	if (__is_ink_string(a) && __is_ink_string(b)) {
		return a.valueOf() === b.valueOf();
	}
	if (typeof a === 'number' || typeof a === 'boolean' || typeof a === 'function') {
		return a === b;
	}

	// deep equality check for composite types
	if (typeof a !== 'object') {
		return false;
	}
	if (len(a) !== len(b)) {
		return false;
	}
	for (const key of keys(a)) {
		if (!__ink_eq(a[key], b[key])) {
			return false;
		}
	}
	return true;
}

function __ink_and(a, b) {
	if (typeof a === 'boolean' && typeof b === 'boolean') {
		return a && b;
	}

	if (__is_ink_string(a) && __is_ink_string(b)) {
		const max = Math.max(a.length, b.length);
		const get = (s, i) => s.valueOf().charCodeAt(i) || 0;

		let res = '';
		for (let i = 0; i < max; i ++) {
			res += String.fromCharCode(get(a, i) & get(b, i));
		}
		return res;
	}

	return a & b;
}

function __ink_or(a, b) {
	if (typeof a === 'boolean' && typeof b === 'boolean') {
		return a || b;
	}

	if (__is_ink_string(a) && __is_ink_string(b)) {
		const max = Math.max(a.length, b.length);
		const get = (s, i) => s.valueOf().charCodeAt(i) || 0;

		let res = '';
		for (let i = 0; i < max; i ++) {
			res += String.fromCharCode(get(a, i) | get(b, i));
		}
		return res;
	}

	return a | b;
}

function __ink_xor(a, b) {
	if (typeof a === 'boolean' && typeof b === 'boolean') {
		return (a && !b) || (!a && b);
	}

	if (__is_ink_string(a) && __is_ink_string(b)) {
		const max = Math.max(a.length, b.length);
		const get = (s, i) => s.valueOf().charCodeAt(i) || 0;

		let res = '';
		for (let i = 0; i < max; i ++) {
			res += String.fromCharCode(get(a, i) ^ get(b, i));
		}
		return res;
	}

	return a ^ b;
}

function __ink_match(cond, clauses) {
	for (const [target, expr] of clauses) {
		if (__ink_eq(cond, target())) {
			return expr();
		}
	}
	return null;
}

/* Ink types */

const __Ink_Empty = Symbol('__Ink_Empty');

const __Ink_String = s => {
	if (__is_ink_string(s)) return s;

	return {
		__mark_ink_string: true,
		assign(i, slice) {
			if (i === s.length) {
				return s += slice;
			}

			return s = s.substr(0, i) + slice + s.substr(i + slice.length);
		},
		toString() {
			return s;
		},
		valueOf() {
			return s;
		},
		get length() {
			return s.length;
		},
	}
}

/* TCE trampoline helpers */

function __ink_resolve_trampoline(fn, ...args) {
	let rv = fn(...args);
	while (rv && rv.__is_ink_trampoline) {
		rv = rv.fn(...rv.args);
	}
	return rv;
}

function __ink_trampoline(fn, ...args) {
	return {
		__is_ink_trampoline: true,
		fn: fn,
		args: args,
	}
}

/* Ink -> JavaScript interop helpers */

const bind = (target, fn) => target[fn].bind(target);

function jsnew(Constructor, args) {
	return new Constructor(...args);
}
!function(t){var e={};function s(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,r){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(r,n,function(e){return t[e]}.bind(null,n));return r},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){const{render:r,Component:n,Styled:o,StyledComponent:i,List:c,ListOf:l,Record:a,Store:d,StoreOf:u,Router:h}=s(1),{jdom:f,css:m}=s(2);t.exports={render:r,Component:n,Styled:o,StyledComponent:i,List:c,ListOf:l,Record:a,Store:d,StoreOf:u,Router:h,jdom:f,css:m}},function(t,e,s){let r=0;const n=t=>null!==t&&"object"==typeof t,o=t=>{void 0===t.attrs&&(t.attrs={}),void 0===t.events&&(t.events={}),void 0===t.children&&(t.children=[])},i=t=>Array.isArray(t)?t:[t],c=()=>document.createComment("");let l=[];const a={replaceChild:()=>{}};const d=(t,e,s)=>{for(const r of Object.keys(t)){const n=i(t[r]),o=i(e[r]||[]);for(const t of n)o.includes(t)||"function"!=typeof t||s(r,t)}},u=(t,e,s)=>{const i=e=>{t&&t!==e&&l.push([2,t,e]),t=e};if(r++,e!==s)if(null===s)i(c());else if("string"==typeof s||"number"==typeof s)"string"==typeof e||"number"==typeof e?t.data=s:i(document.createTextNode(s));else if(void 0!==s.appendChild)i(s);else{(void 0===t||!n(e)||e&&void 0!==e.appendChild||e.tag!==s.tag)&&(e={tag:null},i(document.createElement(s.tag))),o(e),o(s);for(const r of Object.keys(s.attrs)){const n=e.attrs[r],o=s.attrs[r];if("class"===r){const e=o;Array.isArray(e)?t.className=e.join(" "):t.className=e}else if("style"===r){const e=n||{},s=o;for(const r of Object.keys(s))s[r]!==e[r]&&(t.style[r]=s[r]);for(const r of Object.keys(e))void 0===s[r]&&(t.style[r]="")}else r in t?(t[r]!==o||void 0===n&&n!==o)&&(t[r]=o):n!==o&&t.setAttribute(r,o)}for(const r of Object.keys(e.attrs))void 0===s.attrs[r]&&(r in t?t[r]=null:t.removeAttribute(r));d(s.events,e.events,(e,s)=>{t.addEventListener(e,s)}),d(e.events,s.events,(e,s)=>{t.removeEventListener(e,s)});const r=e.children,c=s.children,a=r.length,h=c.length;if(h+a>0){const n=e._nodes||[],o=a<h?a:h;let i=0;for(;i<o;i++)r[i]!==c[i]&&(n[i]=u(n[i],r[i],c[i]));if(a<h)for(;i<h;i++){const e=u(void 0,void 0,c[i]);l.push([0,t,e]),n.push(e)}else{for(;i<a;i++)l.push([1,t,n[i]]);n.splice(h,a-h)}s._nodes=n}}return 0==--r&&function(){const t=l.length;for(let e=0;e<t;e++){const t=l[e],s=t[0];if(1===s)t[1].removeChild(t[2]);else if(2===s){const e=t[1],s=c(),r=e.parentNode;null!==r?(r.replaceChild(s,e),t[1]=s,t[3]=r):t[3]=a}}for(let e=0;e<t;e++){const t=l[e],s=t[0];0===s?t[1].appendChild(t[2]):2===s&&t[3].replaceChild(t[2],t[1])}l=[]}(),t};class h{constructor(...t){this.jdom=void 0,this.node=void 0,this.event={source:null,handler:()=>{}},this.init(...t),void 0===this.node&&this.render()}static from(t){return class extends h{init(...t){this.args=t}compose(){return t(...this.args)}}}init(){}get record(){return this.event.source}bind(t,e){if(this.unbind(),!(t instanceof j))throw new Error(`cannot bind to ${t}, which is not an instance of Evented.`);this.event={source:t,handler:e},t.addHandler(e)}unbind(){this.record&&this.record.removeHandler(this.event.handler),this.event={source:null,handler:()=>{}}}remove(){this.unbind()}compose(){return null}preprocess(t){return t}render(t){t=t||this.record&&this.record.summarize();const e=this.preprocess(this.compose(t),t);if(void 0===e)throw new Error(this.constructor.name+".compose() returned undefined.");try{this.node=u(this.node,this.jdom,e)}catch(t){console.error("rendering error.",t)}return this.jdom=e}}const f=new Set;let m;const p=new WeakMap,v=(t,e)=>t+"{"+e+"}",b=(t,e)=>{let s=[],r="";for(const n of Object.keys(e)){const o=e[n];if("@"===n[0])n.startsWith("@media")?s.push(v(n,b(t,o).join(""))):s.push(v(n,b("",o).join("")));else if("object"==typeof o){const e=n.split(",");for(const r of e)if(r.includes("&")){const e=r.replace(/&/g,t);s=s.concat(b(e,o))}else s=s.concat(b(t+" "+r,o))}else r+=n+":"+o+";"}return r&&s.unshift(v(t,r)),s},g=t=>{const e=(t=>{if(!p.has(t)){const e=JSON.stringify(t);let s=e.length,r=1989;for(;s;)r=13*r^e.charCodeAt(--s);p.set(t,"_torus"+(r>>>0))}return p.get(t)})(t);let s=0;if(!f.has(e)){m||(()=>{const t=document.createElement("style");t.setAttribute("data-torus",""),document.head.appendChild(t),m=t.sheet})();const r=b("."+e,t);for(const t of r)m.insertRule(t,s++);f.add(e)}return e},y=t=>class extends t{styles(){return{}}preprocess(t,e){return n(t)&&(t.attrs=t.attrs||{},t.attrs.class=i(t.attrs.class||[]),t.attrs.class.push(g(this.styles(e)))),t}};class x extends h{get itemClass(){return h}init(t,...e){this.store=t,this.items=new Map,this.filterFn=null,this.itemData=e,this.bind(this.store,()=>this.itemsChanged())}itemsChanged(){const t=this.store.summarize(),e=this.items;for(const s of e.keys())t.includes(s)||(e.get(s).remove(),e.delete(s));for(const s of t)e.has(s)||e.set(s,new this.itemClass(s,()=>this.store.remove(s),...this.itemData));let s=[...e.entries()];null!==this.filterFn&&(s=s.filter(t=>this.filterFn(t[0]))),s.sort((e,s)=>t.indexOf(e[0])-t.indexOf(s[0])),this.items=new Map(s),this.render()}filter(t){this.filterFn=t,this.itemsChanged()}unfilter(){this.filterFn=null,this.itemsChanged()}get components(){return[...this]}get nodes(){return this.components.map(t=>t.node)}[Symbol.iterator](){return this.items.values()}remove(){super.remove();for(const t of this.items.values())t.remove()}compose(){return{tag:"ul",children:this.nodes}}}class j{constructor(){this.handlers=new Set}summarize(){}emitEvent(){const t=this.summarize();for(const e of this.handlers)e(t)}addHandler(t){this.handlers.add(t),t(this.summarize())}removeHandler(t){this.handlers.delete(t)}}class w extends j{constructor(t,e={}){super(),n(t)&&(e=t,t=null),this.id=t,this.data=e}update(t){Object.assign(this.data,t),this.emitEvent()}get(t){return this.data[t]}summarize(){return Object.assign({id:this.id},this.data)}serialize(){return this.summarize()}}class O extends j{constructor(t=[]){super(),this.reset(t)}get recordClass(){return w}get comparator(){return null}create(t,e){return this.add(new this.recordClass(t,e))}add(t){return this.records.add(t),this.emitEvent(),t}remove(t){return this.records.delete(t),this.emitEvent(),t}[Symbol.iterator](){return this.records.values()}find(t){for(const e of this.records)if(e.id===t)return e;return null}reset(t){this.records=new Set(t),this.emitEvent()}summarize(){return[...this.records].map(t=>[this.comparator?this.comparator(t):null,t]).sort((t,e)=>t[0]<e[0]?-1:t[0]>e[0]?1:0).map(t=>t[1])}serialize(){return this.summarize().map(t=>t.serialize())}}const C=t=>{let e;const s=[];for(;null!==e;)if(e=/:\w+/.exec(t),e){const r=e[0];s.push(r.substr(1)),t=t.replace(r,"(.+)")}return[new RegExp(t),s]};const S={render:u,Component:h,Styled:y,StyledComponent:y(h),List:x,ListOf:t=>class extends x{get itemClass(){return t}},Record:w,Store:O,StoreOf:t=>class extends O{get recordClass(){return t}},Router:class extends j{constructor(t){super(),this.routes=Object.entries(t).map(([t,e])=>[t,...C(e)]),this.lastMatch=["",null],this._cb=()=>this.route(location.pathname),window.addEventListener("popstate",this._cb),this._cb()}summarize(){return this.lastMatch}go(t,{replace:e=!1}={}){window.location.pathname!==t&&(e?history.replaceState(null,document.title,t):history.pushState(null,document.title,t),this.route(t))}route(t){for(const[e,s,r]of this.routes){const n=s.exec(t);if(null!==n){const t={},s=n.slice(1);r.forEach((e,r)=>t[e]=s[r]),this.lastMatch=[e,t];break}}this.emitEvent()}remove(){window.removeEventListener("popstate",this._cb)}}};"object"==typeof window&&(window.Torus=S),t.exports&&(t.exports=S)},function(t,e,s){const r=t=>null!==t&&"object"==typeof t,n=(t,e)=>t.substr(0,t.length-e.length),o=(t,e)=>{let s=t[0];for(let r=1,n=e.length;r<=n;r++)s+=e[r-1]+t[r];return s};class i{constructor(t){this.idx=0,this.content=t,this.len=t.length}next(){const t=this.content[this.idx++];return void 0===t&&(this.idx=this.len),t}back(){this.idx--}readUpto(t){const e=this.content.substr(this.idx).indexOf(t);return this.toNext(e)}readUntil(t){const e=this.content.substr(this.idx).indexOf(t)+t.length;return this.toNext(e)}toNext(t){const e=this.content.substr(this.idx);if(-1===t)return this.idx=this.len,e;{const s=e.substr(0,t);return this.idx+=t,s}}clipEnd(t){return!!this.content.endsWith(t)&&(this.content=n(this.content,t),!0)}}const c=t=>{let e="";for(let s=0,r=t.length;s<r;s++)e+="-"===t[s]?t[++s].toUpperCase():t[s];return e},l=t=>{if("!"===(t=t.trim())[0])return{jdom:null,selfClosing:!0};if(!t.includes(" ")){const e=t.endsWith("/");return{jdom:{tag:e?n(t,"/"):t,attrs:{},events:{}},selfClosing:e}}const e=new i(t),s=e.clipEnd("/");let r="",o=!1,l=!1;const a=[];let d=0;const u=t=>{r=r.trim(),(""!==r||t)&&(a.push({type:d,value:r}),o=!1,r="")};for(let t=e.next();void 0!==t;t=e.next())switch(t){case"=":l?r+=t:(u(),o=!0,d=1);break;case" ":l?r+=t:o||(u(),d=0);break;case"\\":l&&(t=e.next(),r+=t);break;case'"':l?(l=!1,u(!0),d=0):1===d&&(l=!0);break;default:r+=t,o=!1}u();let h="";const f={},m={};h=a.shift().value;let p=null,v=a.shift();const b=()=>{p=v,v=a.shift()};for(;void 0!==v;){if(1===v.type){const t=p.value;let e=v.value.trim();if(t.startsWith("on"))m[t.substr(2)]=[e];else if("class"===t)""!==e&&(f[t]=e.split(" "));else if("style"===t){e.endsWith(";")&&(e=e.substr(0,e.length-1));const s={};for(const t of e.split(";")){const e=t.indexOf(":"),r=t.substr(0,e),n=t.substr(e+1);s[c(r.trim())]=n.trim()}f[t]=s}else f[t]=e;b()}else p&&(f[p.value]=!0);b()}return p&&0===p.type&&(f[p.value]=!0),{jdom:{tag:h,attrs:f,events:m},selfClosing:s}},a=t=>{const e=[];let s=null,r=!1;const n=()=>{r&&""===s.trim()||s&&e.push(s),s=null,r=!1},o=t=>{!1===r&&(n(),r=!0,s=""),s+=t};for(let e=t.next();void 0!==e;e=t.next())if("<"===e){if(n(),"/"===t.next()){t.readUntil(">");break}{t.back();const e=l(t.readUpto(">"));t.next(),s=e&&e.jdom,e.selfClosing||null===s||(s.children=a(t))}}else o("&"===e?(i=e+t.readUntil(";"),String.fromCodePoint(+/&#(\w+);/.exec(i)[1])):e);var i;return n(),e},d=new Map,u=/jdom_tpl_obj_\[(\d+)\]/,h=(t,e)=>{if((t=>"string"==typeof t&&t.includes("jdom_tpl_"))(t)){const s=u.exec(t),r=t.split(s[0]),n=s[1],o=h(r[1],e);let i=[];return""!==r[0]&&i.push(r[0]),Array.isArray(e[n])?i=i.concat(e[n]):i.push(e[n]),0!==o.length&&(i=i.concat(o)),i}return""!==t?[t]:[]},f=(t,e)=>{const s=[];for(const n of t)for(const t of h(n,e))r(t)&&v(t,e),s.push(t);const n=s[0],o=s[s.length-1];return"string"==typeof n&&""===n.trim()&&s.shift(),"string"==typeof o&&""===o.trim()&&s.pop(),s},m=(t,e)=>{if(t.length<14)return t;{const s=u.exec(t);if(null===s)return t;if(t.trim()===s[0])return e[s[1]];{const r=t.split(s[0]);return r[0]+e[s[1]]+m(r[1],e)}}},p=(t,e)=>{for(let s=0,r=t.length;s<r;s++){const r=t[s];"string"==typeof r?t[s]=m(r,e):Array.isArray(r)?p(r,e):v(r,e)}},v=(t,e)=>{for(const s of Object.keys(t)){const n=t[s];"string"==typeof n?t[s]=m(n,e):Array.isArray(n)?"children"===s?t.children=f(n,e):p(n,e):r(n)&&v(n,e)}},b=t=>{const e={};let s=0,r=["",""];const n=()=>{"string"==typeof r[1]?e[r[0].trim()]=r[1].trim():e[r[0].trim()]=r[1],r=["",""]};t.readUntil("{");for(let e=t.next();void 0!==e&&"}"!==e;e=t.next()){const o=r[0];switch(e){case'"':case"'":for(r[s]+=e+t.readUntil(e);r[s].endsWith("\\"+e);)r[s]+=t.readUntil(e);break;case":":""===o.trim()||o.includes("&")||o.includes("@")||o.includes(":")?r[s]+=e:s=1;break;case";":s=0,n();break;case"{":t.back(),r[1]=b(t),n();break;default:r[s]+=e}}return""!==r[0].trim()&&n(),e},g=new Map,y={jdom:(t,...e)=>{const s=t.join("jdom_tpl_joiner");try{if(!d.has(s)){const r=e.map((t,e)=>`jdom_tpl_obj_[${e}]`),n=new i(o(t.map(t=>t.replace(/\s+/g," ")),r)),c=a(n)[0],l=typeof c,u=JSON.stringify(c);d.set(s,t=>{if("string"===l)return m(c,t);if("object"===l){const e={},s=JSON.parse(u);return v(Object.assign(e,s),t),e}return null})}return d.get(s)(e)}catch(s){return console.error(`jdom parse error.\ncheck for mismatched brackets, tags, quotes.\n${o(t,e)}\n${s.stack||s}`),""}},css:(t,...e)=>{const s=o(t,e).trim();return g.has(s)||g.set(s,b(new i("{"+s+"}"))),g.get(s)}};"object"==typeof window&&Object.assign(window,y),t.exports&&(t.exports=y)}]);load = s => window

log = val => out(__as_ink_string(string(val) + __Ink_String(`
`)));
scan = cb => (() => { let acc; acc = [__Ink_String(``)]; return __ink_ident_in(evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => (__Ink_String(`end`)), () => (cb((() => {let __ink_acc_trgt = __as_ink_string(acc); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()))], [() => (__Ink_String(`data`)), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(acc); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})() + slice((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})(), 0, (len((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})()) - 1)))) : (__ink_assgn_trgt[0]) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(acc); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})() + slice((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})(), 0, (len((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})()) - 1))); return __ink_assgn_trgt})(); return false })())]])) })();
hToN = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, [__Ink_String(`a`)]: 10, [__Ink_String(`b`)]: 11, [__Ink_String(`c`)]: 12, [__Ink_String(`d`)]: 13, [__Ink_String(`e`)]: 14, [__Ink_String(`f`)]: 15};
nToH = __Ink_String(`0123456789abcdef`);
hex = n => (() => { let __ink_trampolined_sub; let sub; return sub = (p, acc) => (() => { __ink_trampolined_sub = (p, acc) => __ink_match((p < 16), [[() => (true), () => (__as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(nToH); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return p })()] || null : (__ink_acc_trgt[(() => { return p })()] !== undefined ? __ink_acc_trgt[(() => { return p })()] : null)})() + acc))], [() => (false), () => (__ink_trampoline(__ink_trampolined_sub, floor((p / 16)), __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(nToH); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (p % 16) })()] || null : (__ink_acc_trgt[(() => { return (p % 16) })()] !== undefined ? __ink_acc_trgt[(() => { return (p % 16) })()] : null)})() + acc)))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, p, acc) })() })()(floor(n), __Ink_String(``));
xeh = s => (() => { let max; max = len(s); return (() => { let __ink_trampolined_sub; let sub; return sub = (i, acc) => (() => { __ink_trampolined_sub = (i, acc) => __ink_match(i, [[() => (max), () => (acc)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), __as_ink_string((acc * 16) + (() => {let __ink_acc_trgt = __as_ink_string(hToN); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})() })()] : null)})())))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i, acc) })() })()(0, 0) })();
min = numbers => reduce(numbers, (acc, n) => __ink_match((n < acc), [[() => (true), () => (n)], [() => (false), () => (acc)]]), (() => {let __ink_acc_trgt = __as_ink_string(numbers); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})());
max = numbers => reduce(numbers, (acc, n) => __ink_match((n > acc), [[() => (true), () => (n)], [() => (false), () => (acc)]]), (() => {let __ink_acc_trgt = __as_ink_string(numbers); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})());
range = (start, end, step) => (() => { let __ink_trampolined_sub; let span; let sub; span = (end - start); sub = (i, v, acc) => (() => { __ink_trampolined_sub = (i, v, acc) => __ink_match((((() => { return (v - start) })() / span) < 1), [[() => (true), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), v) : (__ink_assgn_trgt[(() => { return i })()]) = v; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), __as_ink_string(v + step), acc) })())], [() => (false), () => (acc)]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i, v, acc) })(); return __ink_match((((() => { return (end - start) })() / step) > 0), [[() => (true), () => (sub(0, start, []))], [() => (false), () => ([])]]) })();
clamp = (start, end, min, max) => (() => { start = (() => { return __ink_match((start < min), [[() => (true), () => (min)], [() => (false), () => (start)]]) })(); end = (() => { return __ink_match((end < min), [[() => (true), () => (min)], [() => (false), () => (end)]]) })(); end = (() => { return __ink_match((end > max), [[() => (true), () => (max)], [() => (false), () => (end)]]) })(); start = (() => { return __ink_match((start > end), [[() => (true), () => (end)], [() => (false), () => (start)]]) })(); return {start: start, end: end} })();
slice = (s, start, end) => (() => { let max; let x; x = clamp(start, end, 0, len(s)); start = (() => {let __ink_acc_trgt = __as_ink_string(x); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[start] || null : (__ink_acc_trgt.start !== undefined ? __ink_acc_trgt.start : null)})(); max = ((() => {let __ink_acc_trgt = __as_ink_string(x); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[end] || null : (__ink_acc_trgt.end !== undefined ? __ink_acc_trgt.end : null)})() - start); return (() => { let __ink_trampolined_sub; let sub; return sub = (i, acc) => (() => { __ink_trampolined_sub = (i, acc) => __ink_match(i, [[() => (max), () => (acc)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(start + i) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(start + i) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(start + i) })()] : null)})()) : (__ink_assgn_trgt[(() => { return i })()]) = (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(start + i) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(start + i) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(start + i) })()] : null)})(); return __ink_assgn_trgt})()))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i, acc) })() })()(0, __ink_match(type(s), [[() => (__Ink_String(`string`)), () => (__Ink_String(``))], [() => (__Ink_String(`composite`)), () => ([])]])) })();
append = (base, child) => (() => { let baseLength; let childLength; baseLength = len(base); childLength = len(child); return (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match(i, [[() => (childLength), () => (base)], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(base); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return __as_ink_string(baseLength + i) })(), (() => {let __ink_acc_trgt = __as_ink_string(child); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})()) : (__ink_assgn_trgt[(() => { return __as_ink_string(baseLength + i) })()]) = (() => {let __ink_acc_trgt = __as_ink_string(child); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1)) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(0) })();
join = (base, child) => append(clone(base), child);
clone = x => __ink_match(type(x), [[() => (__Ink_String(`string`)), () => (__as_ink_string(__Ink_String(``) + x))], [() => (__Ink_String(`composite`)), () => (reduce(keys(x), (acc, k) => (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return k })(), (() => {let __ink_acc_trgt = __as_ink_string(x); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return k })()] || null : (__ink_acc_trgt[(() => { return k })()] !== undefined ? __ink_acc_trgt[(() => { return k })()] : null)})()) : (__ink_assgn_trgt[(() => { return k })()]) = (() => {let __ink_acc_trgt = __as_ink_string(x); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return k })()] || null : (__ink_acc_trgt[(() => { return k })()] !== undefined ? __ink_acc_trgt[(() => { return k })()] : null)})(); return __ink_assgn_trgt})(), {}))], [() => (__Ink_Empty), () => (x)]]);
stringList = list => __as_ink_string(__as_ink_string(__Ink_String(`[`) + cat(map(list, string), __Ink_String(`, `))) + __Ink_String(`]`));
reverse = list => (() => { let __ink_trampolined_sub; let sub; return sub = (acc, i, j) => (() => { __ink_trampolined_sub = (acc, i, j) => __ink_match(j, [[() => (0), () => ((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()) : (__ink_assgn_trgt[(() => { return i })()]) = (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(); return __ink_assgn_trgt})())], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return j })()] || null : (__ink_acc_trgt[(() => { return j })()] !== undefined ? __ink_acc_trgt[(() => { return j })()] : null)})()) : (__ink_assgn_trgt[(() => { return i })()]) = (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return j })()] || null : (__ink_acc_trgt[(() => { return j })()] !== undefined ? __ink_acc_trgt[(() => { return j })()] : null)})(); return __ink_assgn_trgt})(), __as_ink_string(i + 1), (j - 1)))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, acc, i, j) })() })()([], 0, (len(list) - 1));
map = (list, f) => reduce(list, (l, item, i) => (() => {let __ink_assgn_trgt = __as_ink_string(l); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), f(item, i)) : (__ink_assgn_trgt[(() => { return i })()]) = f(item, i); return __ink_assgn_trgt})(), {});
filter = (list, f) => reduce(list, (l, item, i) => __ink_match(f(item, i), [[() => (true), () => ((() => {let __ink_assgn_trgt = __as_ink_string(l); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(l), item) : (__ink_assgn_trgt[len(l)]) = item; return __ink_assgn_trgt})())], [() => (__Ink_Empty), () => (l)]]), []);
reduce = (list, f, acc) => (() => { let max; max = len(list); return (() => { let __ink_trampolined_sub; let sub; return sub = (i, acc) => (() => { __ink_trampolined_sub = (i, acc) => __ink_match(i, [[() => (max), () => (acc)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), f(acc, (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(), i)))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i, acc) })() })()(0, acc) })();
reduceBack = (list, f, acc) => (() => { let __ink_trampolined_sub; let sub; return sub = (i, acc) => (() => { __ink_trampolined_sub = (i, acc) => __ink_match(i, [[() => (__ink_negate(1)), () => (acc)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, (i - 1), f(acc, (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(), i)))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i, acc) })() })()((len(list) - 1), acc);
flatten = list => reduce(list, append, []);
some = list => reduce(list, (acc, x) => __ink_or(acc, x), false);
every = list => reduce(list, (acc, x) => __ink_and(acc, x), true);
cat = (list, joiner) => (() => { let max; return __ink_match(max = len(list), [[() => (0), () => (__Ink_String(``))], [() => (__Ink_Empty), () => ((() => { let __ink_trampolined_sub; let sub; return sub = (i, acc) => (() => { __ink_trampolined_sub = (i, acc) => __ink_match(i, [[() => (max), () => (acc)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), __as_ink_string(joiner + (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})())) : (__ink_assgn_trgt[len(acc)]) = __as_ink_string(joiner + (() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})()); return __ink_assgn_trgt})()))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i, acc) })() })()(1, clone((() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})())))]]) })();
each = (list, f) => (() => { let max; max = len(list); return (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match(i, [[() => (max), () => (null)], [() => (__Ink_Empty), () => ((() => { f((() => {let __ink_acc_trgt = __as_ink_string(list); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(), i); return __ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1)) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(0) })();
encode = str => (() => { let max; max = len(str); return (() => { let __ink_trampolined_sub; let sub; return sub = (i, acc) => (() => { __ink_trampolined_sub = (i, acc) => __ink_match(i, [[() => (max), () => (acc)], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), point((() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})())) : (__ink_assgn_trgt[(() => { return i })()]) = point((() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})()); return __ink_assgn_trgt})()))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i, acc) })() })()(0, []) })();
decode = data => reduce(data, (acc, cp) => (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), char(cp)) : (__ink_assgn_trgt[len(acc)]) = char(cp); return __ink_assgn_trgt})(), __Ink_String(``));
readFile = (path, cb) => (() => { let BufSize; BufSize = 4096; return (() => { let sub; return sub = (offset, acc) => read(path, offset, BufSize, evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => (__Ink_String(`error`)), () => (cb(null))], [() => (__Ink_String(`data`)), () => ((() => { let dataLen; dataLen = len((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})()); return __ink_match(__ink_eq(dataLen, BufSize), [[() => (true), () => (sub(__as_ink_string(offset + dataLen), (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})()) : (__ink_assgn_trgt[len(acc)]) = (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})(); return __ink_assgn_trgt})()))], [() => (false), () => (cb((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})()) : (__ink_assgn_trgt[len(acc)]) = (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[data] || null : (__ink_acc_trgt.data !== undefined ? __ink_acc_trgt.data : null)})(); return __ink_assgn_trgt})()))]]) })())]])) })()(0, __Ink_String(``)) })();
writeFile = (path, data, cb) => __ink_ident_delete(path, evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => (__Ink_String(`end`)), () => (write(path, 0, data, evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => (__Ink_String(`error`)), () => (cb(null))], [() => (__Ink_String(`end`)), () => (cb(true))]])))], [() => (__Ink_Empty), () => (cb(null))]]));
format = (raw, values) => (() => { let append; let max; let readNext; let state; state = {idx: 0, which: 0, key: __Ink_String(``), buf: __Ink_String(``)}; append = c => (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + c)) : (__ink_assgn_trgt.buf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + c); return __ink_assgn_trgt})(); readNext = () => (() => { let c; c = (() => {let __ink_acc_trgt = __as_ink_string(raw); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(); __ink_match((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[which] || null : (__ink_acc_trgt.which !== undefined ? __ink_acc_trgt.which : null)})(), [[() => (0), () => (__ink_match(c, [[() => (__Ink_String(`{`)), () => ((() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 1) : (__ink_assgn_trgt.which) = 1; return __ink_assgn_trgt})())], [() => (__Ink_Empty), () => (append(c))]]))], [() => (1), () => (__ink_match(c, [[() => (__Ink_String(`{`)), () => ((() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 2) : (__ink_assgn_trgt.which) = 2; return __ink_assgn_trgt})())], [() => (__Ink_Empty), () => ((() => { append(__as_ink_string(__Ink_String(`{`) + c)); return (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 0) : (__ink_assgn_trgt.which) = 0; return __ink_assgn_trgt})() })())]]))], [() => (2), () => (__ink_match(c, [[() => (__Ink_String(`}`)), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + string((() => {let __ink_acc_trgt = __as_ink_string(values); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() })()] : null)})()))) : (__ink_assgn_trgt.buf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + string((() => {let __ink_acc_trgt = __as_ink_string(values); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() })()] : null)})())); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(key, __Ink_String(``)) : (__ink_assgn_trgt.key) = __Ink_String(``); return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 3) : (__ink_assgn_trgt.which) = 3; return __ink_assgn_trgt})() })())], [() => (__Ink_String(` `)), () => (null)], [() => (__Ink_Empty), () => ((() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(key, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() + c)) : (__ink_assgn_trgt.key) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})() + c); return __ink_assgn_trgt})())]]))], [() => (3), () => (__ink_match(c, [[() => (__Ink_String(`}`)), () => ((() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(which, 0) : (__ink_assgn_trgt.which) = 0; return __ink_assgn_trgt})())], [() => (__Ink_Empty), () => (null)]]))]]); return (() => {let __ink_assgn_trgt = __as_ink_string(state); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)) : (__ink_assgn_trgt.idx) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1); return __ink_assgn_trgt})() })(); max = len(raw); return (() => { let __ink_trampolined_sub; let sub; return sub = () => (() => { __ink_trampolined_sub = () => __ink_match(((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() < max), [[() => (true), () => ((() => { readNext(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (false), () => ((() => {let __ink_acc_trgt = __as_ink_string(state); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})())]]); return __ink_resolve_trampoline(__ink_trampolined_sub) })() })()() })()

std = load(__Ink_String(`std`));
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
slice = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[slice] || null : (__ink_acc_trgt.slice !== undefined ? __ink_acc_trgt.slice : null)})();
reduce = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reduce] || null : (__ink_acc_trgt.reduce !== undefined ? __ink_acc_trgt.reduce : null)})();
reduceBack = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reduceBack] || null : (__ink_acc_trgt.reduceBack !== undefined ? __ink_acc_trgt.reduceBack : null)})();
checkRange = (lo, hi) => c => (() => { let p; p = point(c); return __ink_and((lo < p), (p < hi)) })();
upper__ink_qm__ = checkRange((point(__Ink_String(`A`)) - 1), __as_ink_string(point(__Ink_String(`Z`)) + 1));
lower__ink_qm__ = checkRange((point(__Ink_String(`a`)) - 1), __as_ink_string(point(__Ink_String(`z`)) + 1));
digit__ink_qm__ = checkRange((point(__Ink_String(`0`)) - 1), __as_ink_string(point(__Ink_String(`9`)) + 1));
letter__ink_qm__ = c => __ink_or(upper__ink_qm__(c), lower__ink_qm__(c));
ws__ink_qm__ = c => __ink_match(point(c), [[() => (32), () => (true)], [() => (10), () => (true)], [() => (9), () => (true)], [() => (13), () => (true)], [() => (__Ink_Empty), () => (false)]]);
hasPrefix__ink_qm__ = (s, prefix) => reduce(prefix, (acc, c, i) => __ink_and(acc, (() => { return __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(), c) })()), true);
hasSuffix__ink_qm__ = (s, suffix) => (() => { let diff; diff = (len(s) - len(suffix)); return reduce(suffix, (acc, c, i) => __ink_and(acc, (() => { return __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(i + diff) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(i + diff) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(i + diff) })()] : null)})(), c) })()), true) })();
matchesAt__ink_qm__ = (s, substring, idx) => (() => { let max; max = len(substring); return (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match(i, [[() => (max), () => (true)], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(idx + i) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(idx + i) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(idx + i) })()] : null)})(), [[() => ((() => { return (() => {let __ink_acc_trgt = __as_ink_string(substring); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})() })()), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1)))], [() => (__Ink_Empty), () => (false)]]))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(0) })();
index = (s, substring) => (() => { let max; max = (len(s) - 1); return (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match(matchesAt__ink_qm__(s, substring, i), [[() => (true), () => (i)], [() => (false), () => (__ink_match((i < max), [[() => (true), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1)))], [() => (false), () => (__ink_negate(1))]]))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(0) })();
contains__ink_qm__ = (s, substring) => (index(s, substring) > __ink_negate(1));
lower = s => reduce(s, (acc, c, i) => __ink_match(upper__ink_qm__(c), [[() => (true), () => ((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), char(__as_ink_string(point(c) + 32))) : (__ink_assgn_trgt[(() => { return i })()]) = char(__as_ink_string(point(c) + 32)); return __ink_assgn_trgt})())], [() => (false), () => ((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), c) : (__ink_assgn_trgt[(() => { return i })()]) = c; return __ink_assgn_trgt})())]]), __Ink_String(``));
upper = s => reduce(s, (acc, c, i) => __ink_match(lower__ink_qm__(c), [[() => (true), () => ((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), char((point(c) - 32))) : (__ink_assgn_trgt[(() => { return i })()]) = char((point(c) - 32)); return __ink_assgn_trgt})())], [() => (false), () => ((() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), c) : (__ink_assgn_trgt[(() => { return i })()]) = c; return __ink_assgn_trgt})())]]), __Ink_String(``));
title = s => (() => { let lowered; lowered = lower(s); return (() => {let __ink_assgn_trgt = __as_ink_string(lowered); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, upper((() => {let __ink_acc_trgt = __as_ink_string(lowered); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})())) : (__ink_assgn_trgt[0]) = upper((() => {let __ink_acc_trgt = __as_ink_string(lowered); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})()); return __ink_assgn_trgt})() })();
replaceNonEmpty = (s, old, __ink_ident_new) => (() => { let lnew; let lold; lold = len(old); lnew = len(__ink_ident_new); return (() => { let __ink_trampolined_sub; let sub; return sub = (acc, i) => (() => { __ink_trampolined_sub = (acc, i) => __ink_match(matchesAt__ink_qm__(acc, old, i), [[() => (true), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(__as_ink_string(slice(acc, 0, i) + __ink_ident_new) + slice(acc, __as_ink_string(i + lold), len(acc))), __as_ink_string(i + lnew)))], [() => (false), () => (__ink_match((i < len(acc)), [[() => (true), () => (__ink_trampoline(__ink_trampolined_sub, acc, __as_ink_string(i + 1)))], [() => (false), () => (acc)]]))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, acc, i) })() })()(s, 0) })();
replace = (s, old, __ink_ident_new) => __ink_match(old, [[() => (__Ink_String(``)), () => (s)], [() => (__Ink_Empty), () => (replaceNonEmpty(s, old, __ink_ident_new))]]);
splitNonEmpty = (s, delim) => (() => { let coll; let ldelim; coll = []; ldelim = len(delim); return (() => { let __ink_trampolined_sub; let sub; return sub = (acc, i, last) => (() => { __ink_trampolined_sub = (acc, i, last) => __ink_match(matchesAt__ink_qm__(acc, delim, i), [[() => (true), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(coll); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(coll), slice(acc, last, i)) : (__ink_assgn_trgt[len(coll)]) = slice(acc, last, i); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub, acc, __as_ink_string(i + ldelim), __as_ink_string(i + ldelim)) })())], [() => (false), () => (__ink_match((i < len(acc)), [[() => (true), () => (__ink_trampoline(__ink_trampolined_sub, acc, __as_ink_string(i + 1), last))], [() => (false), () => ((() => {let __ink_assgn_trgt = __as_ink_string(coll); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(coll), slice(acc, last, len(acc))) : (__ink_assgn_trgt[len(coll)]) = slice(acc, last, len(acc)); return __ink_assgn_trgt})())]]))]]); return __ink_resolve_trampoline(__ink_trampolined_sub, acc, i, last) })() })()(s, 0, 0) })();
split = (s, delim) => __ink_match(delim, [[() => (__Ink_String(``)), () => (map(s, c => c))], [() => (__Ink_Empty), () => (splitNonEmpty(s, delim))]]);
trimPrefixNonEmpty = (s, prefix) => (() => { let idx; let lpref; let max; max = len(s); lpref = len(prefix); idx = (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match((i < max), [[() => (true), () => (__ink_match(matchesAt__ink_qm__(s, prefix, i), [[() => (true), () => (__ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + lpref)))], [() => (false), () => (i)]]))], [() => (false), () => (i)]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(0); return slice(s, idx, len(s)) })();
trimPrefix = (s, prefix) => __ink_match(prefix, [[() => (__Ink_String(``)), () => (s)], [() => (__Ink_Empty), () => (trimPrefixNonEmpty(s, prefix))]]);
trimSuffixNonEmpty = (s, suffix) => (() => { let idx; let lsuf; lsuf = len(suffix); idx = (() => { let __ink_trampolined_sub; let sub; return sub = i => (() => { __ink_trampolined_sub = i => __ink_match((i > __ink_negate(1)), [[() => (true), () => (__ink_match(matchesAt__ink_qm__(s, suffix, (i - lsuf)), [[() => (true), () => (__ink_trampoline(__ink_trampolined_sub, (i - lsuf)))], [() => (false), () => (i)]]))], [() => (false), () => (i)]]); return __ink_resolve_trampoline(__ink_trampolined_sub, i) })() })()(len(s)); return slice(s, 0, idx) })();
trimSuffix = (s, suffix) => __ink_match(suffix, [[() => (__Ink_String(``)), () => (s)], [() => (__Ink_Empty), () => (trimSuffixNonEmpty(s, suffix))]]);
trim = (s, ss) => trimPrefix(trimSuffix(s, ss), ss)

std = load(__Ink_String(`../vendor/std`));
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
clone = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[clone] || null : (__ink_acc_trgt.clone !== undefined ? __ink_acc_trgt.clone : null)})();
sortBy = (v, pred) => (() => { let partition; let vPred; vPred = map(v, pred); partition = (v, lo, hi) => (() => { let __ink_trampolined_lsub; let __ink_trampolined_rsub; let lsub; let pivot; let rsub; pivot = (() => {let __ink_acc_trgt = __as_ink_string(vPred); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return lo })()] || null : (__ink_acc_trgt[(() => { return lo })()] !== undefined ? __ink_acc_trgt[(() => { return lo })()] : null)})(); lsub = i => (() => { __ink_trampolined_lsub = i => __ink_match((() => { return ((() => {let __ink_acc_trgt = __as_ink_string(vPred); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})() < pivot) })(), [[() => (true), () => (__ink_trampoline(__ink_trampolined_lsub, __as_ink_string(i + 1)))], [() => (false), () => (i)]]); return __ink_resolve_trampoline(__ink_trampolined_lsub, i) })(); rsub = j => (() => { __ink_trampolined_rsub = j => __ink_match((() => { return ((() => {let __ink_acc_trgt = __as_ink_string(vPred); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return j })()] || null : (__ink_acc_trgt[(() => { return j })()] !== undefined ? __ink_acc_trgt[(() => { return j })()] : null)})() > pivot) })(), [[() => (true), () => (__ink_trampoline(__ink_trampolined_rsub, (j - 1)))], [() => (false), () => (j)]]); return __ink_resolve_trampoline(__ink_trampolined_rsub, j) })(); return (() => { let __ink_trampolined_sub; let sub; return sub = (i, j) => (() => { __ink_trampolined_sub = (i, j) => (() => { i = lsub(i); j = rsub(j); return __ink_match((() => { return (i < j) })(), [[() => (false), () => (j)], [() => (true), () => ((() => { let tmp; let tmpPred; tmp = (() => {let __ink_acc_trgt = __as_ink_string(v); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(); tmpPred = (() => {let __ink_acc_trgt = __as_ink_string(vPred); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return i })()] || null : (__ink_acc_trgt[(() => { return i })()] !== undefined ? __ink_acc_trgt[(() => { return i })()] : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(v); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), (() => {let __ink_acc_trgt = __as_ink_string(v); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return j })()] || null : (__ink_acc_trgt[(() => { return j })()] !== undefined ? __ink_acc_trgt[(() => { return j })()] : null)})()) : (__ink_assgn_trgt[(() => { return i })()]) = (() => {let __ink_acc_trgt = __as_ink_string(v); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return j })()] || null : (__ink_acc_trgt[(() => { return j })()] !== undefined ? __ink_acc_trgt[(() => { return j })()] : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(v); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return j })(), tmp) : (__ink_assgn_trgt[(() => { return j })()]) = tmp; return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(vPred); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return i })(), (() => {let __ink_acc_trgt = __as_ink_string(vPred); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return j })()] || null : (__ink_acc_trgt[(() => { return j })()] !== undefined ? __ink_acc_trgt[(() => { return j })()] : null)})()) : (__ink_assgn_trgt[(() => { return i })()]) = (() => {let __ink_acc_trgt = __as_ink_string(vPred); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return j })()] || null : (__ink_acc_trgt[(() => { return j })()] !== undefined ? __ink_acc_trgt[(() => { return j })()] : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(vPred); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return j })(), tmpPred) : (__ink_assgn_trgt[(() => { return j })()]) = tmpPred; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub, __as_ink_string(i + 1), (j - 1)) })())]]) })(); return __ink_resolve_trampoline(__ink_trampolined_sub, i, j) })() })()(lo, hi) })(); return (() => { let __ink_trampolined_quicksort; let quicksort; return quicksort = (v, lo, hi) => (() => { __ink_trampolined_quicksort = (v, lo, hi) => __ink_match(len(v), [[() => (0), () => (v)], [() => (__Ink_Empty), () => (__ink_match((() => { return (lo < hi) })(), [[() => (false), () => (v)], [() => (true), () => ((() => { let p; p = partition(v, lo, hi); quicksort(v, lo, p); return __ink_trampoline(__ink_trampolined_quicksort, v, __as_ink_string(p + 1), hi) })())]]))]]); return __ink_resolve_trampoline(__ink_trampolined_quicksort, v, lo, hi) })() })()(v, 0, (len(v) - 1)) })();
sort__ink_em__ = v => sortBy(v, x => x);
sort = v => sort__ink_em__(clone(v))

__ink_ident_new = () => (() => { let self; return self = {i: __ink_negate(1), next: () => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()} })()

std = load(__Ink_String(`../vendor/std`));
log = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[log] || null : (__ink_acc_trgt.log !== undefined ? __ink_acc_trgt.log : null)})();
f = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[format] || null : (__ink_acc_trgt.format !== undefined ? __ink_acc_trgt.format : null)})();
slice = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[slice] || null : (__ink_acc_trgt.slice !== undefined ? __ink_acc_trgt.slice : null)})();
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
reduce = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[reduce] || null : (__ink_acc_trgt.reduce !== undefined ? __ink_acc_trgt.reduce : null)})();
every = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[every] || null : (__ink_acc_trgt.every !== undefined ? __ink_acc_trgt.every : null)})();
str = load(__Ink_String(`../vendor/str`));
digit__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[digit__ink_qm__] || null : (__ink_acc_trgt.digit__ink_qm__ !== undefined ? __ink_acc_trgt.digit__ink_qm__ : null)})();
hasPrefix__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[hasPrefix__ink_qm__] || null : (__ink_acc_trgt.hasPrefix__ink_qm__ !== undefined ? __ink_acc_trgt.hasPrefix__ink_qm__ : null)})();
index = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[index] || null : (__ink_acc_trgt.index !== undefined ? __ink_acc_trgt.index : null)})();
mkiota = (() => {let __ink_acc_trgt = __as_ink_string(load(__Ink_String(`iota`))); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[__ink_ident_new] || null : (__ink_acc_trgt.__ink_ident_new !== undefined ? __ink_acc_trgt.__ink_ident_new : null)})();
Newline = char(10);
Tab = char(9);
iota = (() => {let __ink_acc_trgt = __as_ink_string(mkiota()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})();
Tok = {Separator: iota(), Comment: iota(), Ident: iota(), EmptyIdent: iota(), NumberLiteral: iota(), StringLiteral: iota(), TrueLiteral: iota(), FalseLiteral: iota(), AccessorOp: iota(), EqOp: iota(), FunctionArrow: iota(), KeyValueSeparator: iota(), DefineOp: iota(), MatchColon: iota(), CaseArrow: iota(), SubOp: iota(), NegOp: iota(), AddOp: iota(), MulOp: iota(), DivOp: iota(), ModOp: iota(), GtOp: iota(), LtOp: iota(), AndOp: iota(), OrOp: iota(), XorOp: iota(), LParen: iota(), RParen: iota(), LBracket: iota(), RBracket: iota(), LBrace: iota(), RBrace: iota()};
typeName = type => reduce(keys(Tok), (acc, k) => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return k })()] || null : (__ink_acc_trgt[(() => { return k })()] !== undefined ? __ink_acc_trgt[(() => { return k })()] : null)})(), [[() => (type), () => (k)], [() => (__Ink_Empty), () => (acc)]]), __Ink_String(`(unknown token)`));
tkString = tok => f(__Ink_String(`{{ 0 }}({{ 1 }}) @ {{2}}:{{3}}`), [typeName((() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})()), (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})()]);
token = (type, val, line, col, i) => ({type: type, val: val, line: line, col: col, i: i});
tokenizeWithOpt = (s, lexComments) => (() => { let S; let commit; let commitChar; let commitClear; let ensureSeparator; let finalize; let simpleCommit; let simpleCommitChar; let tokens; S = {i: __ink_negate(1), buf: __Ink_String(``), strbuf: __Ink_String(``), strbufLine: 0, strbufCol: 0, lastType: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})(), line: 1, col: 0, inStringLiteral: false}; tokens = []; simpleCommit = tok => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(lastType, (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})()) : (__ink_assgn_trgt.lastType) = (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(); return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(tokens); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(tokens), tok) : (__ink_assgn_trgt[len(tokens)]) = tok; return __ink_assgn_trgt})() })(); simpleCommitChar = type => simpleCommit(token(type, null, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(), __ink_match(type, [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[TrueLiteral] || null : (__ink_acc_trgt.TrueLiteral !== undefined ? __ink_acc_trgt.TrueLiteral : null)})()), () => (((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - 4))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FalseLiteral] || null : (__ink_acc_trgt.FalseLiteral !== undefined ? __ink_acc_trgt.FalseLiteral : null)})()), () => (((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - 5))], [() => (__Ink_Empty), () => (((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - 1))]]))); commitClear = () => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})(), [[() => (__Ink_String(``)), () => (__Ink_Empty)], [() => (__Ink_Empty), () => ((() => { let cbuf; cbuf = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, __Ink_String(``)) : (__ink_assgn_trgt.buf) = __Ink_String(``); return __ink_assgn_trgt})(); return __ink_match(cbuf, [[() => (__Ink_String(`true`)), () => (simpleCommitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[TrueLiteral] || null : (__ink_acc_trgt.TrueLiteral !== undefined ? __ink_acc_trgt.TrueLiteral : null)})()))], [() => (__Ink_String(`false`)), () => (simpleCommitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FalseLiteral] || null : (__ink_acc_trgt.FalseLiteral !== undefined ? __ink_acc_trgt.FalseLiteral : null)})()))], [() => (__Ink_Empty), () => (__ink_match(digit__ink_qm__(cbuf), [[() => (true), () => (simpleCommit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NumberLiteral] || null : (__ink_acc_trgt.NumberLiteral !== undefined ? __ink_acc_trgt.NumberLiteral : null)})(), number(cbuf), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() - len(cbuf)), ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - len(cbuf)))))], [() => (false), () => (simpleCommit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), cbuf, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() - len(cbuf)), ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - len(cbuf)))))]]))]]) })())]]); commit = tok => (() => { commitClear(); return simpleCommit(tok) })(); commitChar = type => commit(token(type, null, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})())); ensureSeparator = () => (() => { commitClear(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[lastType] || null : (__ink_acc_trgt.lastType !== undefined ? __ink_acc_trgt.lastType : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LParen] || null : (__ink_acc_trgt.LParen !== undefined ? __ink_acc_trgt.LParen : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBracket] || null : (__ink_acc_trgt.LBracket !== undefined ? __ink_acc_trgt.LBracket : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBrace] || null : (__ink_acc_trgt.LBrace !== undefined ? __ink_acc_trgt.LBrace : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AddOp] || null : (__ink_acc_trgt.AddOp !== undefined ? __ink_acc_trgt.AddOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[SubOp] || null : (__ink_acc_trgt.SubOp !== undefined ? __ink_acc_trgt.SubOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MulOp] || null : (__ink_acc_trgt.MulOp !== undefined ? __ink_acc_trgt.MulOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DivOp] || null : (__ink_acc_trgt.DivOp !== undefined ? __ink_acc_trgt.DivOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ModOp] || null : (__ink_acc_trgt.ModOp !== undefined ? __ink_acc_trgt.ModOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NegOp] || null : (__ink_acc_trgt.NegOp !== undefined ? __ink_acc_trgt.NegOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[GtOp] || null : (__ink_acc_trgt.GtOp !== undefined ? __ink_acc_trgt.GtOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LtOp] || null : (__ink_acc_trgt.LtOp !== undefined ? __ink_acc_trgt.LtOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EqOp] || null : (__ink_acc_trgt.EqOp !== undefined ? __ink_acc_trgt.EqOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[KeyValueSeparator] || null : (__ink_acc_trgt.KeyValueSeparator !== undefined ? __ink_acc_trgt.KeyValueSeparator : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FunctionArrow] || null : (__ink_acc_trgt.FunctionArrow !== undefined ? __ink_acc_trgt.FunctionArrow : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchColon] || null : (__ink_acc_trgt.MatchColon !== undefined ? __ink_acc_trgt.MatchColon : null)})()), () => (null)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[CaseArrow] || null : (__ink_acc_trgt.CaseArrow !== undefined ? __ink_acc_trgt.CaseArrow : null)})()), () => (null)], [() => (__Ink_Empty), () => (commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})()))]]) })(); finalize = () => (() => { ensureSeparator(); return tokens })(); __ink_match(hasPrefix__ink_qm__(s, __Ink_String(`#!`)), [[() => (true), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, index(s, Newline)) : (__ink_assgn_trgt.i) = index(s, Newline); return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})() })())]]); return (() => { let __ink_trampolined_sub; let sub; return sub = () => (() => { __ink_trampolined_sub = () => (() => { let advance; let c; (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1)) : (__ink_assgn_trgt.col) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1); return __ink_assgn_trgt})(); c = (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] : null)})(); return __ink_match([c, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[inStringLiteral] || null : (__ink_acc_trgt.inStringLiteral !== undefined ? __ink_acc_trgt.inStringLiteral : null)})()], [[() => ([null, __Ink_Empty]), () => (finalize())], [() => ([__Ink_String(`'`), __Ink_Empty]), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[inStringLiteral] || null : (__ink_acc_trgt.inStringLiteral !== undefined ? __ink_acc_trgt.inStringLiteral : null)})(), [[() => (true), () => ((() => { commit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[StringLiteral] || null : (__ink_acc_trgt.StringLiteral !== undefined ? __ink_acc_trgt.StringLiteral : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbufLine] || null : (__ink_acc_trgt.strbufLine !== undefined ? __ink_acc_trgt.strbufLine : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbufCol] || null : (__ink_acc_trgt.strbufCol !== undefined ? __ink_acc_trgt.strbufCol : null)})(), (((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() - len((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})())) - 1))); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(inStringLiteral, false) : (__ink_assgn_trgt.inStringLiteral) = false; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (false), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbuf, __Ink_String(``)) : (__ink_assgn_trgt.strbuf) = __Ink_String(``); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbufLine, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})()) : (__ink_assgn_trgt.strbufLine) = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbufCol, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})()) : (__ink_assgn_trgt.strbufCol) = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(inStringLiteral, true) : (__ink_assgn_trgt.inStringLiteral) = true; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => ([__Ink_Empty, true]), () => (__ink_match(c, [[() => (Newline), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, 0) : (__ink_assgn_trgt.col) = 0; return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbuf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + c)) : (__ink_assgn_trgt.strbuf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + c); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`\\`)), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbuf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] : null)})())) : (__ink_assgn_trgt.strbuf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + (() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] : null)})()); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1)) : (__ink_assgn_trgt.col) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(strbuf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + c)) : (__ink_assgn_trgt.strbuf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[strbuf] || null : (__ink_acc_trgt.strbuf !== undefined ? __ink_acc_trgt.strbuf : null)})() + c); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_Empty), () => (__ink_match(c, [[() => (__Ink_String(`\``)), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] : null)})(), [[() => (__Ink_String(`\``)), () => (__ink_match(advance = index(slice(s, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), len(s)), Newline), [[() => (__ink_negate(1)), () => ((() => { __ink_match(lexComments, [[() => (true), () => (commit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Comment] || null : (__ink_acc_trgt.Comment !== undefined ? __ink_acc_trgt.Comment : null)})(), slice(s, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(), len(s)), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})())))]]); return finalize() })())], [() => (__Ink_Empty), () => ((() => { let col; let i; let line; line = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(); col = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(); i = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + advance)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + advance); return __ink_assgn_trgt})(); __ink_match(lexComments, [[() => (true), () => (commit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Comment] || null : (__ink_acc_trgt.Comment !== undefined ? __ink_acc_trgt.Comment : null)})(), slice(s, i, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})()), line, col, i)))]]); ensureSeparator(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, 0) : (__ink_assgn_trgt.col) = 0; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_Empty), () => ((() => { let col; let i; let line; line = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(); col = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})(); i = (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => { let __ink_trampolined_sub; let sub; return sub = () => (() => { __ink_trampolined_sub = () => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() })()] : null)})(), [[() => (__Ink_String(`\``)), () => ((() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1)) : (__ink_assgn_trgt.col) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1); return __ink_assgn_trgt})())], [() => (Newline), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, 0) : (__ink_assgn_trgt.col) = 0; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (null), () => (null)], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1)) : (__ink_assgn_trgt.col) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub) })() })()(); __ink_match(lexComments, [[() => (true), () => (commit(token((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Comment] || null : (__ink_acc_trgt.Comment !== undefined ? __ink_acc_trgt.Comment : null)})(), slice(s, i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)), line, col, i)))]]); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (Newline), () => ((() => { ensureSeparator(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1)) : (__ink_assgn_trgt.line) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})() + 1); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(col, 0) : (__ink_assgn_trgt.col) = 0; return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (Tab), () => ((() => { commitClear(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(` `)), () => ((() => { commitClear(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`_`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`~`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NegOp] || null : (__ink_acc_trgt.NegOp !== undefined ? __ink_acc_trgt.NegOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`+`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AddOp] || null : (__ink_acc_trgt.AddOp !== undefined ? __ink_acc_trgt.AddOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`*`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MulOp] || null : (__ink_acc_trgt.MulOp !== undefined ? __ink_acc_trgt.MulOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`/`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DivOp] || null : (__ink_acc_trgt.DivOp !== undefined ? __ink_acc_trgt.DivOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`%`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ModOp] || null : (__ink_acc_trgt.ModOp !== undefined ? __ink_acc_trgt.ModOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`&`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AndOp] || null : (__ink_acc_trgt.AndOp !== undefined ? __ink_acc_trgt.AndOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`|`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[OrOp] || null : (__ink_acc_trgt.OrOp !== undefined ? __ink_acc_trgt.OrOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`^`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[XorOp] || null : (__ink_acc_trgt.XorOp !== undefined ? __ink_acc_trgt.XorOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`<`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LtOp] || null : (__ink_acc_trgt.LtOp !== undefined ? __ink_acc_trgt.LtOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`>`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[GtOp] || null : (__ink_acc_trgt.GtOp !== undefined ? __ink_acc_trgt.GtOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`,`)), () => ((() => { ensureSeparator(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`.`)), () => (__ink_match([(() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})(), every(map((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})(), digit__ink_qm__))], [[() => ([__Ink_String(``), __Ink_Empty]), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => ([__Ink_Empty, true]), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + __Ink_String(`.`))) : (__ink_assgn_trgt.buf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + __Ink_String(`.`)); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_String(`:`)), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] : null)})(), [[() => (__Ink_String(`=`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`:`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchColon] || null : (__ink_acc_trgt.MatchColon !== undefined ? __ink_acc_trgt.MatchColon : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { ensureSeparator(); commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[KeyValueSeparator] || null : (__ink_acc_trgt.KeyValueSeparator !== undefined ? __ink_acc_trgt.KeyValueSeparator : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_String(`=`)), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] : null)})(), [[() => (__Ink_String(`>`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FunctionArrow] || null : (__ink_acc_trgt.FunctionArrow !== undefined ? __ink_acc_trgt.FunctionArrow : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EqOp] || null : (__ink_acc_trgt.EqOp !== undefined ? __ink_acc_trgt.EqOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_String(`-`)), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(s); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1) })()] : null)})(), [[() => (__Ink_String(`>`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[CaseArrow] || null : (__ink_acc_trgt.CaseArrow !== undefined ? __ink_acc_trgt.CaseArrow : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(i, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1)) : (__ink_assgn_trgt.i) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[i] || null : (__ink_acc_trgt.i !== undefined ? __ink_acc_trgt.i : null)})() + 1); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[SubOp] || null : (__ink_acc_trgt.SubOp !== undefined ? __ink_acc_trgt.SubOp : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())]]))], [() => (__Ink_String(`(`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LParen] || null : (__ink_acc_trgt.LParen !== undefined ? __ink_acc_trgt.LParen : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`)`)), () => ((() => { ensureSeparator(); commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RParen] || null : (__ink_acc_trgt.RParen !== undefined ? __ink_acc_trgt.RParen : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`[`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBracket] || null : (__ink_acc_trgt.LBracket !== undefined ? __ink_acc_trgt.LBracket : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`]`)), () => ((() => { ensureSeparator(); commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RBracket] || null : (__ink_acc_trgt.RBracket !== undefined ? __ink_acc_trgt.RBracket : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`{`)), () => ((() => { commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBrace] || null : (__ink_acc_trgt.LBrace !== undefined ? __ink_acc_trgt.LBrace : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_String(`}`)), () => ((() => { ensureSeparator(); commitChar((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RBrace] || null : (__ink_acc_trgt.RBrace !== undefined ? __ink_acc_trgt.RBrace : null)})()); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(buf, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + c)) : (__ink_assgn_trgt.buf) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[buf] || null : (__ink_acc_trgt.buf !== undefined ? __ink_acc_trgt.buf : null)})() + c); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())]]))]]) })(); return __ink_resolve_trampoline(__ink_trampolined_sub) })() })()() })();
tokenize = s => tokenizeWithOpt(s, false);
tokenizeWithComments = s => tokenizeWithOpt(s, true)

std = load(__Ink_String(`../vendor/std`));
log = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[log] || null : (__ink_acc_trgt.log !== undefined ? __ink_acc_trgt.log : null)})();
f = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[format] || null : (__ink_acc_trgt.format !== undefined ? __ink_acc_trgt.format : null)})();
slice = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[slice] || null : (__ink_acc_trgt.slice !== undefined ? __ink_acc_trgt.slice : null)})();
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
each = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[each] || null : (__ink_acc_trgt.each !== undefined ? __ink_acc_trgt.each : null)})();
cat = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[cat] || null : (__ink_acc_trgt.cat !== undefined ? __ink_acc_trgt.cat : null)})();
Tokenize = load(__Ink_String(`tokenize`));
Tok = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Tok] || null : (__ink_acc_trgt.Tok !== undefined ? __ink_acc_trgt.Tok : null)})();
typeName = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[typeName] || null : (__ink_acc_trgt.typeName !== undefined ? __ink_acc_trgt.typeName : null)})();
tkString = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[tkString] || null : (__ink_acc_trgt.tkString !== undefined ? __ink_acc_trgt.tkString : null)})();
mkiota = (() => {let __ink_acc_trgt = __as_ink_string(load(__Ink_String(`iota`))); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[__ink_ident_new] || null : (__ink_acc_trgt.__ink_ident_new !== undefined ? __ink_acc_trgt.__ink_ident_new : null)})();
iota = (() => {let __ink_acc_trgt = __as_ink_string(mkiota()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[next] || null : (__ink_acc_trgt.next !== undefined ? __ink_acc_trgt.next : null)})();
Node = {UnaryExpr: iota(), BinaryExpr: iota(), FnCall: iota(), MatchClause: iota(), MatchExpr: iota(), ExprList: iota(), EmptyIdent: iota(), Ident: iota(), NumberLiteral: iota(), StringLiteral: iota(), BooleanLiteral: iota(), ObjectLiteral: iota(), ObjectEntry: iota(), ListLiteral: iota(), FnLiteral: iota()};
ndString = node => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NumberLiteral] || null : (__ink_acc_trgt.NumberLiteral !== undefined ? __ink_acc_trgt.NumberLiteral : null)})()), () => (f(__Ink_String(`Lit({{ val }})`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[StringLiteral] || null : (__ink_acc_trgt.StringLiteral !== undefined ? __ink_acc_trgt.StringLiteral : null)})()), () => (f(__Ink_String(`Lit({{ val }})`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BooleanLiteral] || null : (__ink_acc_trgt.BooleanLiteral !== undefined ? __ink_acc_trgt.BooleanLiteral : null)})()), () => (f(__Ink_String(`Lit({{ val }})`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[UnaryExpr] || null : (__ink_acc_trgt.UnaryExpr !== undefined ? __ink_acc_trgt.UnaryExpr : null)})()), () => (f(__Ink_String(`UnrExpr({{0}} {{1}})`), [typeName((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})()), ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})()), () => (f(__Ink_String(`BinExpr({{0}} {{1}} {{2}})`), [ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), typeName((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})()), ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => (f(__Ink_String(`Ident({{val}})`), node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})()), () => (__Ink_String(`EmptyIdent`))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnCall] || null : (__ink_acc_trgt.FnCall !== undefined ? __ink_acc_trgt.FnCall : null)})()), () => (f(__Ink_String(`Call({{0}} {{1}})`), [ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})()), __as_ink_string(__as_ink_string(__Ink_String(`(`) + cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})(), ndString), __Ink_String(` `))) + __Ink_String(`)`))]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})()), () => (f(__Ink_String(`Fn({{0}} {{1}})`), [__as_ink_string(__as_ink_string(__Ink_String(`(`) + cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})(), ndString), __Ink_String(` `))) + __Ink_String(`)`)), ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})()), () => (__as_ink_string(__as_ink_string(__Ink_String(`(`) + cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), ndString), __Ink_String(` `))) + __Ink_String(`)`)))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchExpr] || null : (__ink_acc_trgt.MatchExpr !== undefined ? __ink_acc_trgt.MatchExpr : null)})()), () => (f(__Ink_String(`Match({{0}} {{1}})`), [ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[condition] || null : (__ink_acc_trgt.condition !== undefined ? __ink_acc_trgt.condition : null)})()), __as_ink_string(__as_ink_string(__Ink_String(`{`) + cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[clauses] || null : (__ink_acc_trgt.clauses !== undefined ? __ink_acc_trgt.clauses : null)})(), ndString), __Ink_String(` `))) + __Ink_String(`}`))]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchClause] || null : (__ink_acc_trgt.MatchClause !== undefined ? __ink_acc_trgt.MatchClause : null)})()), () => (f(__Ink_String(`Clause({{0}} {{1}})`), [ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()), ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[expr] || null : (__ink_acc_trgt.expr !== undefined ? __ink_acc_trgt.expr : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ListLiteral] || null : (__ink_acc_trgt.ListLiteral !== undefined ? __ink_acc_trgt.ListLiteral : null)})()), () => (f(__Ink_String(`List({{0}})`), [cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), ndString), __Ink_String(` `))]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectLiteral] || null : (__ink_acc_trgt.ObjectLiteral !== undefined ? __ink_acc_trgt.ObjectLiteral : null)})()), () => (f(__Ink_String(`Obj({{0}})`), [cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[entries] || null : (__ink_acc_trgt.entries !== undefined ? __ink_acc_trgt.entries : null)})(), ndString), __Ink_String(` `))]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectEntry] || null : (__ink_acc_trgt.ObjectEntry !== undefined ? __ink_acc_trgt.ObjectEntry : null)})()), () => (f(__Ink_String(`Entry({{0}} {{1}})`), [ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()), ndString((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})())]))], [() => (__Ink_Empty), () => (__as_ink_string(__as_ink_string(__Ink_String(`Unknown(`) + string(node)) + __Ink_String(`)`)))]]);
opPriority = tok => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()), () => (100)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ModOp] || null : (__ink_acc_trgt.ModOp !== undefined ? __ink_acc_trgt.ModOp : null)})()), () => (80)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MulOp] || null : (__ink_acc_trgt.MulOp !== undefined ? __ink_acc_trgt.MulOp : null)})()), () => (50)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DivOp] || null : (__ink_acc_trgt.DivOp !== undefined ? __ink_acc_trgt.DivOp : null)})()), () => (50)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AddOp] || null : (__ink_acc_trgt.AddOp !== undefined ? __ink_acc_trgt.AddOp : null)})()), () => (40)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[SubOp] || null : (__ink_acc_trgt.SubOp !== undefined ? __ink_acc_trgt.SubOp : null)})()), () => (40)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[GtOp] || null : (__ink_acc_trgt.GtOp !== undefined ? __ink_acc_trgt.GtOp : null)})()), () => (30)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LtOp] || null : (__ink_acc_trgt.LtOp !== undefined ? __ink_acc_trgt.LtOp : null)})()), () => (30)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EqOp] || null : (__ink_acc_trgt.EqOp !== undefined ? __ink_acc_trgt.EqOp : null)})()), () => (30)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AndOp] || null : (__ink_acc_trgt.AndOp !== undefined ? __ink_acc_trgt.AndOp : null)})()), () => (20)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[XorOp] || null : (__ink_acc_trgt.XorOp !== undefined ? __ink_acc_trgt.XorOp : null)})()), () => (15)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[OrOp] || null : (__ink_acc_trgt.OrOp !== undefined ? __ink_acc_trgt.OrOp : null)})()), () => (10)], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})()), () => (0)], [() => (__Ink_Empty), () => (__ink_negate(1))]]);
ident__ink_qm__ = node => __ink_match(node, [[() => (null), () => (false)], [() => (__Ink_Empty), () => (__ink_eq((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()))]]);
binaryOp__ink_qm__ = tok => (opPriority(tok) > __ink_negate(1));
parse = tokens => (() => { let nodes; nodes = []; __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), [[() => ({type: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})(), val: __Ink_Empty, line: __Ink_Empty, col: __Ink_Empty, i: __Ink_Empty}), () => ((() => { return tokens = slice(tokens, 1, len(tokens)) })())]]); return (() => { let __ink_trampolined_sub; let sub; return sub = idx => (() => { __ink_trampolined_sub = idx => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})(), [[() => (null), () => (nodes)], [() => (__Ink_Empty), () => ((() => { let result; result = parseExpr(tokens, idx); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()) : (__ink_assgn_trgt[len(nodes)]) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()) })())], [() => (__Ink_Empty), () => (f(__Ink_String(`parse err @ {{line}}:{{col}}: {{err}}`), {err: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), line: (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1) })()] || null : (__ink_acc_trgt[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1) })()] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})(), col: (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1) })()] || null : (__ink_acc_trgt[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return ((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1) })()] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[col] || null : (__ink_acc_trgt.col !== undefined ? __ink_acc_trgt.col : null)})()}))]]) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub, idx) })() })()(0) })();
parseBinaryExpr = (left, op, prevPriority, tokens, idx) => (() => { let S; let nodes; let ops; let result; let right; result = parseAtom(tokens, idx); right = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); idx = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(); S = {idx: idx}; ops = [op]; nodes = [left, right]; __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ((() => { let __ink_trampolined_sub; let sub; return sub = () => (() => { __ink_trampolined_sub = () => __ink_match(binaryOp__ink_qm__((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})()), [[() => (true), () => ((() => { let choices; let priority; priority = opPriority((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})()); choices = [__ink_negate((() => { return (prevPriority < priority) })()), __ink_negate((() => { return (opPriority((() => {let __ink_acc_trgt = __as_ink_string(ops); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (len(ops) - 1) })()] || null : (__ink_acc_trgt[(() => { return (len(ops) - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return (len(ops) - 1) })()] : null)})()) < priority) })())]; return __ink_match(choices, [[() => ([true, __Ink_Empty]), () => (null)], [() => ([__Ink_Empty, true]), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(ops); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(ops), (() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})()) : (__ink_assgn_trgt[len(ops)]) = (() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)) : (__ink_assgn_trgt.idx) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1); return __ink_assgn_trgt})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => (null), () => ({node: right, idx: (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: __Ink_String(`unexpected end of input, expected binary operator`)})], [() => (__Ink_Empty), () => ((() => { let result; result = parseAtom(tokens, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(nodes), (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()) : (__ink_assgn_trgt[len(nodes)]) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()) : (__ink_assgn_trgt.idx) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => (result)]]) })())]]) })())], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => (null), () => ({node: right, idx: (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: __Ink_String(`unexpected end of input, expected binary operator`)})], [() => (__Ink_Empty), () => ((() => { let result; result = parseBinaryExpr((() => {let __ink_acc_trgt = __as_ink_string(nodes); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (len(nodes) - 1) })()] || null : (__ink_acc_trgt[(() => { return (len(nodes) - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return (len(nodes) - 1) })()] : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), opPriority((() => {let __ink_acc_trgt = __as_ink_string(ops); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (len(ops) - 1) })()] || null : (__ink_acc_trgt[(() => { return (len(ops) - 1) })()] !== undefined ? __ink_acc_trgt[(() => { return (len(ops) - 1) })()] : null)})()), tokens, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return (len(nodes) - 1) })(), (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()) : (__ink_assgn_trgt[(() => { return (len(nodes) - 1) })()]) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()) : (__ink_assgn_trgt.idx) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(); return __ink_assgn_trgt})(); return __ink_trampoline(__ink_trampolined_sub) })())], [() => (__Ink_Empty), () => (result)]]) })())]]))]]) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub) })() })()())], [() => (__Ink_Empty), () => (result)]]); each(ops, (op, i) => (() => { let node; node = (() => {let __ink_acc_trgt = __as_ink_string(nodes); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(i + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(i + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(i + 1) })()] : null)})(); return (() => {let __ink_assgn_trgt = __as_ink_string(nodes); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})(), op: (() => {let __ink_acc_trgt = __as_ink_string(op); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), left: (() => {let __ink_acc_trgt = __as_ink_string(nodes); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), right: node}) : (__ink_assgn_trgt[0]) = {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})(), op: (() => {let __ink_acc_trgt = __as_ink_string(op); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), left: (() => {let __ink_acc_trgt = __as_ink_string(nodes); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), right: node}; return __ink_assgn_trgt})() })()); return {node: (() => {let __ink_acc_trgt = __as_ink_string(nodes); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), idx: (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: null} })();
parseExpr = (tokens, idx) => (() => { let S; let atom; let consumeDanglingSeparator; let result; S = {idx: idx}; consumeDanglingSeparator = () => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => ({type: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})(), val: __Ink_Empty, line: __Ink_Empty, col: __Ink_Empty, i: __Ink_Empty}), () => ((() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)) : (__ink_assgn_trgt.idx) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1); return __ink_assgn_trgt})())]]); result = parseAtom(tokens, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()); atom = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()) : (__ink_assgn_trgt.idx) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(); return __ink_assgn_trgt})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => (null), () => ({node: null, idx: __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1), err: __Ink_String(`unexpected end of input, expected continued expression`)})], [() => (__Ink_Empty), () => ((() => { let next; let produceBinaryExpr; let produceMatchExpr; next = (() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)) : (__ink_assgn_trgt.idx) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1); return __ink_assgn_trgt})(); produceBinaryExpr = () => (() => { let binExpr; let result; result = parseBinaryExpr(atom, next, __ink_negate(1), tokens, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()); binExpr = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()) : (__ink_assgn_trgt.idx) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(); return __ink_assgn_trgt})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => ({type: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchColon] || null : (__ink_acc_trgt.MatchColon !== undefined ? __ink_acc_trgt.MatchColon : null)})(), val: __Ink_Empty, line: __Ink_Empty, col: __Ink_Empty, i: __Ink_Empty}), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)) : (__ink_assgn_trgt.idx) = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1); return __ink_assgn_trgt})(); return produceMatchExpr(binExpr) })())], [() => (__Ink_Empty), () => ((() => { consumeDanglingSeparator(); return {node: binExpr, idx: (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: null} })())]]))], [() => (__Ink_Empty), () => (result)]]) })(); produceMatchExpr = condition => (() => { let clauses; let result; result = parseMatchBody(tokens, (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()); clauses = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(idx, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()) : (__ink_assgn_trgt.idx) = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(); return __ink_assgn_trgt})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ((() => { consumeDanglingSeparator(); return {node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchExpr] || null : (__ink_acc_trgt.MatchExpr !== undefined ? __ink_acc_trgt.MatchExpr : null)})(), condition: condition, clauses: clauses}, idx: (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()} })())], [() => (__Ink_Empty), () => (result)]]) })(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(next); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Separator] || null : (__ink_acc_trgt.Separator !== undefined ? __ink_acc_trgt.Separator : null)})()), () => ({node: atom, idx: (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: null})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RightParen] || null : (__ink_acc_trgt.RightParen !== undefined ? __ink_acc_trgt.RightParen : null)})()), () => ({node: atom, idx: ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1), err: null})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[KeyValueSeparator] || null : (__ink_acc_trgt.KeyValueSeparator !== undefined ? __ink_acc_trgt.KeyValueSeparator : null)})()), () => ({node: atom, idx: ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1), err: null})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[CaseArrow] || null : (__ink_acc_trgt.CaseArrow !== undefined ? __ink_acc_trgt.CaseArrow : null)})()), () => ({node: atom, idx: ((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1), err: null})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AddOp] || null : (__ink_acc_trgt.AddOp !== undefined ? __ink_acc_trgt.AddOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[SubOp] || null : (__ink_acc_trgt.SubOp !== undefined ? __ink_acc_trgt.SubOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MulOp] || null : (__ink_acc_trgt.MulOp !== undefined ? __ink_acc_trgt.MulOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DivOp] || null : (__ink_acc_trgt.DivOp !== undefined ? __ink_acc_trgt.DivOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ModOp] || null : (__ink_acc_trgt.ModOp !== undefined ? __ink_acc_trgt.ModOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AndOp] || null : (__ink_acc_trgt.AndOp !== undefined ? __ink_acc_trgt.AndOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[XorOp] || null : (__ink_acc_trgt.XorOp !== undefined ? __ink_acc_trgt.XorOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[OrOp] || null : (__ink_acc_trgt.OrOp !== undefined ? __ink_acc_trgt.OrOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[GtOp] || null : (__ink_acc_trgt.GtOp !== undefined ? __ink_acc_trgt.GtOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LtOp] || null : (__ink_acc_trgt.LtOp !== undefined ? __ink_acc_trgt.LtOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EqOp] || null : (__ink_acc_trgt.EqOp !== undefined ? __ink_acc_trgt.EqOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()), () => (produceBinaryExpr())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchColon] || null : (__ink_acc_trgt.MatchColon !== undefined ? __ink_acc_trgt.MatchColon : null)})()), () => (produceMatchExpr(atom))], [() => (__Ink_Empty), () => ({node: null, idx: (() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: f(__Ink_String(`unexpected token {{0}} (parseExpr)`), [tkString(next)])})]]) })())]]) })())], [() => (__Ink_Empty), () => (result)]]) })();
parseAtom = (tokens, idx) => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})(), [[() => (null), () => ({node: null, idx: idx, err: __Ink_String(`unexpected end of input, expected atom`)})], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NegOp] || null : (__ink_acc_trgt.NegOp !== undefined ? __ink_acc_trgt.NegOp : null)})()), () => ((() => { let result; result = parseAtom(tokens, __as_ink_string(idx + 1)); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[UnaryExpr] || null : (__ink_acc_trgt.UnaryExpr !== undefined ? __ink_acc_trgt.UnaryExpr : null)})(), op: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NegOp] || null : (__ink_acc_trgt.NegOp !== undefined ? __ink_acc_trgt.NegOp : null)})(), left: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()}, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()})], [() => (__Ink_Empty), () => (result)]]) })())], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(idx + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] : null)})(), [[() => (null), () => ({node: null, idx: __as_ink_string(idx + 1), err: __Ink_String(`unexpected end of input, expected start of atom`)})], [() => (__Ink_Empty), () => ((() => { let __ink_trampolined_consumePotentialFunctionCall; let consumePotentialFunctionCall; let tok; tok = (() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})(); consumePotentialFunctionCall = (fnNode, idx) => (() => { __ink_trampolined_consumePotentialFunctionCall = (fnNode, idx) => (() => { return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})(), [[() => ({type: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LParen] || null : (__ink_acc_trgt.LParen !== undefined ? __ink_acc_trgt.LParen : null)})(), val: __Ink_Empty, line: __Ink_Empty, col: __Ink_Empty, i: __Ink_Empty}), () => ((() => { let result; result = parseFnCall(fnNode, tokens, idx); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => (__ink_trampoline(__ink_trampolined_consumePotentialFunctionCall, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()))], [() => (__Ink_Empty), () => (result)]]) })())], [() => (__Ink_Empty), () => ({node: fnNode, idx: idx})]]) })(); return __ink_resolve_trampoline(__ink_trampolined_consumePotentialFunctionCall, fnNode, idx) })(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NumberLiteral] || null : (__ink_acc_trgt.NumberLiteral !== undefined ? __ink_acc_trgt.NumberLiteral : null)})()), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NumberLiteral] || null : (__ink_acc_trgt.NumberLiteral !== undefined ? __ink_acc_trgt.NumberLiteral : null)})(), val: (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()}, idx: __as_ink_string(idx + 1)})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[StringLiteral] || null : (__ink_acc_trgt.StringLiteral !== undefined ? __ink_acc_trgt.StringLiteral : null)})()), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[StringLiteral] || null : (__ink_acc_trgt.StringLiteral !== undefined ? __ink_acc_trgt.StringLiteral : null)})(), val: (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()}, idx: __as_ink_string(idx + 1)})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[TrueLiteral] || null : (__ink_acc_trgt.TrueLiteral !== undefined ? __ink_acc_trgt.TrueLiteral : null)})()), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BooleanLiteral] || null : (__ink_acc_trgt.BooleanLiteral !== undefined ? __ink_acc_trgt.BooleanLiteral : null)})(), val: true}, idx: __as_ink_string(idx + 1)})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FalseLiteral] || null : (__ink_acc_trgt.FalseLiteral !== undefined ? __ink_acc_trgt.FalseLiteral : null)})()), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BooleanLiteral] || null : (__ink_acc_trgt.BooleanLiteral !== undefined ? __ink_acc_trgt.BooleanLiteral : null)})(), val: false}, idx: __as_ink_string(idx + 1)})], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(idx + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FunctionArrow] || null : (__ink_acc_trgt.FunctionArrow !== undefined ? __ink_acc_trgt.FunctionArrow : null)})()), () => (parseFnLiteral(tokens, idx))], [() => (__Ink_Empty), () => (consumePotentialFunctionCall({type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()}, __as_ink_string(idx + 1)))]]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})()), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(idx + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FunctionArrow] || null : (__ink_acc_trgt.FunctionArrow !== undefined ? __ink_acc_trgt.FunctionArrow : null)})()), () => (parseFnLiteral(tokens, idx))], [() => (__Ink_Empty), () => (consumePotentialFunctionCall({type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})(), val: (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()}, __as_ink_string(idx + 1)))]]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LParen] || null : (__ink_acc_trgt.LParen !== undefined ? __ink_acc_trgt.LParen : null)})()), () => ((() => { let exprs; let result; exprs = []; result = parseGroup(tokens, idx, parseExpr, exprs, (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RParen] || null : (__ink_acc_trgt.RParen !== undefined ? __ink_acc_trgt.RParen : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => (null), () => ({node: null, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: __Ink_String(`unexpected end of input, expected continued expression`)})], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FunctionArrow] || null : (__ink_acc_trgt.FunctionArrow !== undefined ? __ink_acc_trgt.FunctionArrow : null)})()), () => (parseFnLiteral(tokens, idx))], [() => (__Ink_Empty), () => (consumePotentialFunctionCall({type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})(), exprs: exprs}, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()))]]))]]))], [() => (__Ink_Empty), () => (result)]]) })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBrace] || null : (__ink_acc_trgt.LBrace !== undefined ? __ink_acc_trgt.LBrace : null)})()), () => ((() => { let entries; let result; entries = []; result = parseGroup(tokens, idx, parseObjectEntry, entries, (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RBrace] || null : (__ink_acc_trgt.RBrace !== undefined ? __ink_acc_trgt.RBrace : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectLiteral] || null : (__ink_acc_trgt.ObjectLiteral !== undefined ? __ink_acc_trgt.ObjectLiteral : null)})(), entries: entries}, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()})], [() => (__Ink_Empty), () => (result)]]) })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LBracket] || null : (__ink_acc_trgt.LBracket !== undefined ? __ink_acc_trgt.LBracket : null)})()), () => (parseListLiteral(tokens, idx))], [() => (__Ink_Empty), () => ({node: null, idx: idx, err: f(__Ink_String(`unexpected token {{0}} (parseAtom)`), [tkString((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})())])})]]) })())]]))]]))]]);
parseGroup = (tokens, idx, subparser, acc, guardTok) => (() => { return (() => { let __ink_trampolined_sub; let sub; return sub = idx => (() => { __ink_trampolined_sub = idx => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})(), [[() => ({type: guardTok, val: __Ink_Empty, line: __Ink_Empty, col: __Ink_Empty, i: __Ink_Empty}), () => ({idx: __as_ink_string(idx + 1)})], [() => (__Ink_Empty), () => ((() => { let expr; let result; result = subparser(tokens, idx); expr = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(acc); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len(acc), expr) : (__ink_assgn_trgt[len(acc)]) = expr; return __ink_assgn_trgt})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => (null), () => ({node: null, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: __as_ink_string(__Ink_String(`unexpected end of input, expected `) + typeName(guardTok))})], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => (guardTok), () => ({node: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), idx: __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)})], [() => (__Ink_Empty), () => (__ink_trampoline(__ink_trampolined_sub, (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()))]]))]]) })())], [() => (__Ink_Empty), () => (result)]]) })())]]); return __ink_resolve_trampoline(__ink_trampolined_sub, idx) })() })()(__as_ink_string(idx + 1)) })();
parseListLiteral = (tokens, idx) => (() => { let exprs; let result; exprs = []; result = parseGroup(tokens, idx, parseExpr, exprs, (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RBracket] || null : (__ink_acc_trgt.RBracket !== undefined ? __ink_acc_trgt.RBracket : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ListLiteral] || null : (__ink_acc_trgt.ListLiteral !== undefined ? __ink_acc_trgt.ListLiteral : null)})(), exprs: exprs}, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()})], [() => (__Ink_Empty), () => (result)]]) })();
parseFnLiteral = (tokens, idx) => (() => { let args; let processBody; let tok; args = []; processBody = idx => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})(), [[() => ({type: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FunctionArrow] || null : (__ink_acc_trgt.FunctionArrow !== undefined ? __ink_acc_trgt.FunctionArrow : null)})(), val: __Ink_Empty, line: __Ink_Empty, col: __Ink_Empty, i: __Ink_Empty}), () => ((() => { let result; result = parseExpr(tokens, __as_ink_string(idx + 1)); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})(), args: args, body: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()}, idx: ((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() - 1)})], [() => (__Ink_Empty), () => (result)]]) })())], [() => (__Ink_Empty), () => ({node: null, idx: idx, error: __Ink_String(`unexpected end of input, expected =>`)})]]); tok = (() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return idx })()] || null : (__ink_acc_trgt[(() => { return idx })()] !== undefined ? __ink_acc_trgt[(() => { return idx })()] : null)})(); return __ink_match(tok, [[() => (null), () => ({node: null, idx: idx, err: __Ink_String(`unexpected end of input, expected fn args list`)})], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})()), () => (processBody(__as_ink_string(idx + 1)))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(args); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(0, {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()}) : (__ink_assgn_trgt[0]) = {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: (() => {let __ink_acc_trgt = __as_ink_string(tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()}; return __ink_assgn_trgt})(); return processBody(__as_ink_string(idx + 1)) })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LParen] || null : (__ink_acc_trgt.LParen !== undefined ? __ink_acc_trgt.LParen : null)})()), () => ((() => { let result; result = parseGroup(tokens, idx, parseExpr, args, (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RParen] || null : (__ink_acc_trgt.RParen !== undefined ? __ink_acc_trgt.RParen : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => (processBody((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()))], [() => (__Ink_Empty), () => (result)]]) })())], [() => (__Ink_Empty), () => ({node: null, idx: idx, err: __Ink_String(`unexpected token, expected start of fn literal`)})]]))]]) })();
parseFnCall = (fnNode, tokens, idx) => (() => { let args; args = []; return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(idx + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] : null)})(), [[() => (null), () => ({node: null, idx: __as_ink_string(idx + 1), err: __Ink_String(`unexpected end of input, expected fn args list`)})], [() => (__Ink_Empty), () => ((() => { let result; result = parseGroup(tokens, idx, parseExpr, args, (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RParen] || null : (__ink_acc_trgt.RParen !== undefined ? __ink_acc_trgt.RParen : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnCall] || null : (__ink_acc_trgt.FnCall !== undefined ? __ink_acc_trgt.FnCall : null)})(), fn: fnNode, args: args}, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()})], [() => (__Ink_Empty), () => (result)]]) })())]]) })();
parseMatchBody = (tokens, idx) => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string(idx + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string(idx + 1) })()] : null)})(), [[() => (null), () => ({node: null, idx: __as_ink_string(idx + 1), err: __Ink_String(`unexpected end of input, expected {`)})], [() => (__Ink_Empty), () => ((() => { let clauses; let result; clauses = []; result = parseGroup(tokens, idx, parseMatchClause, clauses, (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[RBrace] || null : (__ink_acc_trgt.RBrace !== undefined ? __ink_acc_trgt.RBrace : null)})()); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: clauses, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()})], [() => (__Ink_Empty), () => (result)]]) })())]]);
parseMatchClause = (tokens, idx) => (() => { let atom; let result; result = parseExpr(tokens, idx); atom = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => (null), () => ({node: null, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: __Ink_String(`unexpected end of input, expected ->`)})], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1) })()] : null)})(), [[() => (null), () => ({node: null, idx: __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1), err: __Ink_String(`unexpected end of input, expected expression in clause following ->`)})], [() => (__Ink_Empty), () => ((() => { let clauseResult; clauseResult = parseExpr(tokens, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(clauseResult); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchClause] || null : (__ink_acc_trgt.MatchClause !== undefined ? __ink_acc_trgt.MatchClause : null)})(), target: atom, expr: (() => {let __ink_acc_trgt = __as_ink_string(clauseResult); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()}, idx: (() => {let __ink_acc_trgt = __as_ink_string(clauseResult); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()})], [() => (__Ink_Empty), () => (clauseResult)]]) })())]]))]]))], [() => (__Ink_Empty), () => (result)]]) })();
parseObjectEntry = (tokens, idx) => (() => { let atom; let result; result = parseExpr(tokens, idx); atom = (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] || null : (__ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] !== undefined ? __ink_acc_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() })()] : null)})(), [[() => (null), () => ({node: null, idx: (() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})(), err: __Ink_String(`unexpected end of input, expected :`)})], [() => (__Ink_Empty), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string(tokens); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1) })()] || null : (__ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1) })()] !== undefined ? __ink_acc_trgt[(() => { return __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1) })()] : null)})(), [[() => (null), () => ({node: null, idx: __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1), err: __Ink_String(`unexpected end of input, expected expression in entry following :`)})], [() => (__Ink_Empty), () => ((() => { let valResult; valResult = parseExpr(tokens, __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(result); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})() + 1)); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(valResult); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[err] || null : (__ink_acc_trgt.err !== undefined ? __ink_acc_trgt.err : null)})(), [[() => (null), () => ({node: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectEntry] || null : (__ink_acc_trgt.ObjectEntry !== undefined ? __ink_acc_trgt.ObjectEntry : null)})(), key: atom, val: (() => {let __ink_acc_trgt = __as_ink_string(valResult); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})()}, idx: (() => {let __ink_acc_trgt = __as_ink_string(valResult); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[idx] || null : (__ink_acc_trgt.idx !== undefined ? __ink_acc_trgt.idx : null)})()})], [() => (__Ink_Empty), () => (valResult)]]) })())]]))]]))], [() => (__Ink_Empty), () => (result)]]) })()

std = load(__Ink_String(`../vendor/std`));
log = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[log] || null : (__ink_acc_trgt.log !== undefined ? __ink_acc_trgt.log : null)})();
f = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[format] || null : (__ink_acc_trgt.format !== undefined ? __ink_acc_trgt.format : null)})();
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
each = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[each] || null : (__ink_acc_trgt.each !== undefined ? __ink_acc_trgt.each : null)})();
filter = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[filter] || null : (__ink_acc_trgt.filter !== undefined ? __ink_acc_trgt.filter : null)})();
clone = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[clone] || null : (__ink_acc_trgt.clone !== undefined ? __ink_acc_trgt.clone : null)})();
append = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[append] || null : (__ink_acc_trgt.append !== undefined ? __ink_acc_trgt.append : null)})();
Tokenize = load(__Ink_String(`tokenize`));
Tok = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Tok] || null : (__ink_acc_trgt.Tok !== undefined ? __ink_acc_trgt.Tok : null)})();
tkString = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[tkString] || null : (__ink_acc_trgt.tkString !== undefined ? __ink_acc_trgt.tkString : null)})();
Parse = load(__Ink_String(`parse`));
Node = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Node] || null : (__ink_acc_trgt.Node !== undefined ? __ink_acc_trgt.Node : null)})();
ident__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ident__ink_qm__] || null : (__ink_acc_trgt.ident__ink_qm__ !== undefined ? __ink_acc_trgt.ident__ink_qm__ : null)})();
ndString = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ndString] || null : (__ink_acc_trgt.ndString !== undefined ? __ink_acc_trgt.ndString : null)})();
decl__ink_qm__ = expr => __ink_and(__ink_and(__ink_eq((() => {let __ink_acc_trgt = __as_ink_string(expr); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})()), __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(expr); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})())), ident__ink_qm__((() => {let __ink_acc_trgt = __as_ink_string(expr); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()));
analyzeSubexpr = (node, ctx, tail__ink_qm__) => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})()), () => ((() => { ctx = clone(ctx); (() => {let __ink_assgn_trgt = __as_ink_string(ctx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(decls, {}) : (__ink_assgn_trgt.decls) = {}; return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(exprs, map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), (n, i) => analyzeSubexpr(n, ctx, __ink_eq(__as_ink_string(i + 1), len((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})()))))) : (__ink_assgn_trgt.exprs) = map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), (n, i) => analyzeSubexpr(n, ctx, __ink_eq(__as_ink_string(i + 1), len((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})())))); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(decls, filter(keys((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})()), decl => __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return decl })()] || null : (__ink_acc_trgt[(() => { return decl })()] !== undefined ? __ink_acc_trgt[(() => { return decl })()] : null)})(), null))) : (__ink_assgn_trgt.decls) = filter(keys((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})()), decl => __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return decl })()] || null : (__ink_acc_trgt[(() => { return decl })()] !== undefined ? __ink_acc_trgt[(() => { return decl })()] : null)})(), null)); return __ink_assgn_trgt})(); return node })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})()), () => ((() => { ctx = clone(ctx); __ink_match((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[enclosingFnLit] || null : (__ink_acc_trgt.enclosingFnLit !== undefined ? __ink_acc_trgt.enclosingFnLit : null)})(), [[() => (node), () => (null)], [() => (__Ink_Empty), () => ((() => {let __ink_assgn_trgt = __as_ink_string(ctx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(enclosingFn, null) : (__ink_assgn_trgt.enclosingFn) = null; return __ink_assgn_trgt})())]]); (() => {let __ink_assgn_trgt = __as_ink_string(ctx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(decls, {}) : (__ink_assgn_trgt.decls) = {}; return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(ctx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(args, {}) : (__ink_assgn_trgt.args) = {}; return __ink_assgn_trgt})(); each((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})(), n => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(n); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => ((() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return (() => {let __ink_acc_trgt = __as_ink_string(n); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})() })(), true) : (__ink_assgn_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string(n); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})() })()]) = true; return __ink_assgn_trgt})())]])); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(body, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})(), ctx, true)) : (__ink_assgn_trgt.body) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})(), ctx, true); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(decls, filter(keys((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})()), decl => __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return decl })()] || null : (__ink_acc_trgt[(() => { return decl })()] !== undefined ? __ink_acc_trgt[(() => { return decl })()] : null)})(), null))) : (__ink_assgn_trgt.decls) = filter(keys((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})()), decl => __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[(() => { return decl })()] || null : (__ink_acc_trgt[(() => { return decl })()] !== undefined ? __ink_acc_trgt[(() => { return decl })()] : null)})(), null)); return __ink_assgn_trgt})(); return node })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchExpr] || null : (__ink_acc_trgt.MatchExpr !== undefined ? __ink_acc_trgt.MatchExpr : null)})()), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(condition, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[condition] || null : (__ink_acc_trgt.condition !== undefined ? __ink_acc_trgt.condition : null)})(), ctx, false)) : (__ink_assgn_trgt.condition) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[condition] || null : (__ink_acc_trgt.condition !== undefined ? __ink_acc_trgt.condition : null)})(), ctx, false); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(clauses, map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[clauses] || null : (__ink_acc_trgt.clauses !== undefined ? __ink_acc_trgt.clauses : null)})(), n => analyzeSubexpr(n, ctx, true))) : (__ink_assgn_trgt.clauses) = map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[clauses] || null : (__ink_acc_trgt.clauses !== undefined ? __ink_acc_trgt.clauses : null)})(), n => analyzeSubexpr(n, ctx, true)); return __ink_assgn_trgt})(); return node })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchClause] || null : (__ink_acc_trgt.MatchClause !== undefined ? __ink_acc_trgt.MatchClause : null)})()), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(target, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})(), ctx, false)) : (__ink_assgn_trgt.target) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})(), ctx, false); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(expr, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[expr] || null : (__ink_acc_trgt.expr !== undefined ? __ink_acc_trgt.expr : null)})(), ctx, true)) : (__ink_assgn_trgt.expr) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[expr] || null : (__ink_acc_trgt.expr !== undefined ? __ink_acc_trgt.expr : null)})(), ctx, true); return __ink_assgn_trgt})(); return node })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnCall] || null : (__ink_acc_trgt.FnCall !== undefined ? __ink_acc_trgt.FnCall : null)})()), () => ((() => { let recursiveCall__ink_qm__; let simpleName__ink_qm__; (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(fn, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})(), ctx, false)) : (__ink_assgn_trgt.fn) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})(), ctx, false); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(args, map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})(), n => analyzeSubexpr(n, ctx, false))) : (__ink_assgn_trgt.args) = map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})(), n => analyzeSubexpr(n, ctx, false)); return __ink_assgn_trgt})(); simpleName__ink_qm__ = __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()); recursiveCall__ink_qm__ = (() => { return __ink_match((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[enclosingFn] || null : (__ink_acc_trgt.enclosingFn !== undefined ? __ink_acc_trgt.enclosingFn : null)})(), [[() => (null), () => (false)], [() => (__Ink_Empty), () => (__ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(), (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[enclosingFn] || null : (__ink_acc_trgt.enclosingFn !== undefined ? __ink_acc_trgt.enclosingFn : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()))]]) })(); return __ink_match(__ink_and(__ink_and(simpleName__ink_qm__, recursiveCall__ink_qm__), tail__ink_qm__), [[() => (true), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[enclosingFn] || null : (__ink_acc_trgt.enclosingFn !== undefined ? __ink_acc_trgt.enclosingFn : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(recurred__ink_qm__, true) : (__ink_assgn_trgt.recurred__ink_qm__) = true; return __ink_assgn_trgt})(); return {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnCall] || null : (__ink_acc_trgt.FnCall !== undefined ? __ink_acc_trgt.FnCall : null)})(), fn: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: __Ink_String(`__ink_trampoline`)}, args: append([{type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: __as_ink_string(__Ink_String(`__ink_trampolined_`) + (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})())}], (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})())} })())], [() => (__Ink_Empty), () => (node)]]) })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})()), () => ((() => { let defn__ink_qm__; let fnLiteral__ink_qm__; let simpleName__ink_qm__; defn__ink_qm__ = __ink_eq((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})()); simpleName__ink_qm__ = __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()); fnLiteral__ink_qm__ = __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})()); __ink_match(__ink_and(__ink_and(defn__ink_qm__, simpleName__ink_qm__), fnLiteral__ink_qm__), [[() => (true), () => ((() => { let fnCtx; fnCtx = clone(ctx); (() => {let __ink_assgn_trgt = __as_ink_string(fnCtx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(enclosingFn, (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()) : (__ink_assgn_trgt.enclosingFn) = (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(fnCtx); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(enclosingFnLit, (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()) : (__ink_assgn_trgt.enclosingFnLit) = (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})(); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(left, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})(), ctx, false)) : (__ink_assgn_trgt.left) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})(), ctx, false); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(right, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})(), fnCtx, false)) : (__ink_assgn_trgt.right) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})(), fnCtx, false); return __ink_assgn_trgt})(); return __ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(fnCtx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[enclosingFn] || null : (__ink_acc_trgt.enclosingFn !== undefined ? __ink_acc_trgt.enclosingFn : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[recurred__ink_qm__] || null : (__ink_acc_trgt.recurred__ink_qm__ !== undefined ? __ink_acc_trgt.recurred__ink_qm__ : null)})(), [[() => (true), () => ((() => { let trampolinedFnName; trampolinedFnName = __as_ink_string(__Ink_String(`__ink_trampolined_`) + (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(fnCtx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[enclosingFn] || null : (__ink_acc_trgt.enclosingFn !== undefined ? __ink_acc_trgt.enclosingFn : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return trampolinedFnName })(), true) : (__ink_assgn_trgt[(() => { return trampolinedFnName })()]) = true; return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(right, {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})(), args: clone((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()), decls: [], body: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})(), decls: [], exprs: [{type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})(), op: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})(), left: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: trampolinedFnName}, right: (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()}, {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnCall] || null : (__ink_acc_trgt.FnCall !== undefined ? __ink_acc_trgt.FnCall : null)})(), fn: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: __Ink_String(`__ink_resolve_trampoline`)}, args: append([{type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: trampolinedFnName}], clone((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()))}]}}) : (__ink_assgn_trgt.right) = {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})(), args: clone((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()), decls: [], body: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})(), decls: [], exprs: [{type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})(), op: (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})(), left: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: trampolinedFnName}, right: (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()}, {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnCall] || null : (__ink_acc_trgt.FnCall !== undefined ? __ink_acc_trgt.FnCall : null)})(), fn: {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: __Ink_String(`__ink_resolve_trampoline`)}, args: append([{type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: trampolinedFnName}], clone((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()))}]}}; return __ink_assgn_trgt})() })())]]) })())], [() => (__Ink_Empty), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(left, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})(), ctx, false)) : (__ink_assgn_trgt.left) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})(), ctx, false); return __ink_assgn_trgt})(); return (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(right, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})(), ctx, false)) : (__ink_assgn_trgt.right) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})(), ctx, false); return __ink_assgn_trgt})() })())]]); __ink_match(decl__ink_qm__(node), [[() => (true), () => ((() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(ctx); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})() })(), true) : (__ink_assgn_trgt[(() => { return (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})() })()]) = true; return __ink_assgn_trgt})())]]); return node })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[UnaryExpr] || null : (__ink_acc_trgt.UnaryExpr !== undefined ? __ink_acc_trgt.UnaryExpr : null)})()), () => ((() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(left, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})(), ctx, false)) : (__ink_assgn_trgt.left) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})(), ctx, false); return __ink_assgn_trgt})())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectLiteral] || null : (__ink_acc_trgt.ObjectLiteral !== undefined ? __ink_acc_trgt.ObjectLiteral : null)})()), () => ((() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(entries, map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[entries] || null : (__ink_acc_trgt.entries !== undefined ? __ink_acc_trgt.entries : null)})(), e => analyzeSubexpr(e, ctx, false))) : (__ink_assgn_trgt.entries) = map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[entries] || null : (__ink_acc_trgt.entries !== undefined ? __ink_acc_trgt.entries : null)})(), e => analyzeSubexpr(e, ctx, false)); return __ink_assgn_trgt})())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectEntry] || null : (__ink_acc_trgt.ObjectEntry !== undefined ? __ink_acc_trgt.ObjectEntry : null)})()), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(key, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})(), ctx, false)) : (__ink_assgn_trgt.key) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})(), ctx, false); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(val, analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(), ctx, false)) : (__ink_assgn_trgt.val) = analyzeSubexpr((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(), ctx, false); return __ink_assgn_trgt})(); return node })())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ListLiteral] || null : (__ink_acc_trgt.ListLiteral !== undefined ? __ink_acc_trgt.ListLiteral : null)})()), () => ((() => {let __ink_assgn_trgt = __as_ink_string(node); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(exprs, map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), e => analyzeSubexpr(e, ctx, false))) : (__ink_assgn_trgt.exprs) = map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), e => analyzeSubexpr(e, ctx, false)); return __ink_assgn_trgt})())], [() => (__Ink_Empty), () => (node)]]);
analyze = node => analyzeSubexpr(node, {decls: {}, args: {}}, false)

std = load(__Ink_String(`../vendor/std`));
log = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[log] || null : (__ink_acc_trgt.log !== undefined ? __ink_acc_trgt.log : null)})();
f = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[format] || null : (__ink_acc_trgt.format !== undefined ? __ink_acc_trgt.format : null)})();
clone = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[clone] || null : (__ink_acc_trgt.clone !== undefined ? __ink_acc_trgt.clone : null)})();
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
cat = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[cat] || null : (__ink_acc_trgt.cat !== undefined ? __ink_acc_trgt.cat : null)})();
str = load(__Ink_String(`../vendor/str`));
replace = (() => {let __ink_acc_trgt = __as_ink_string(str); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replace] || null : (__ink_acc_trgt.replace !== undefined ? __ink_acc_trgt.replace : null)})();
quicksort = load(__Ink_String(`../vendor/quicksort`));
sort__ink_em__ = (() => {let __ink_acc_trgt = __as_ink_string(quicksort); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[sort__ink_em__] || null : (__ink_acc_trgt.sort__ink_em__ !== undefined ? __ink_acc_trgt.sort__ink_em__ : null)})();
Tokenize = load(__Ink_String(`tokenize`));
Tok = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Tok] || null : (__ink_acc_trgt.Tok !== undefined ? __ink_acc_trgt.Tok : null)})();
Parse = load(__Ink_String(`parse`));
Node = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Node] || null : (__ink_acc_trgt.Node !== undefined ? __ink_acc_trgt.Node : null)})();
ident__ink_qm__ = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ident__ink_qm__] || null : (__ink_acc_trgt.ident__ink_qm__ !== undefined ? __ink_acc_trgt.ident__ink_qm__ : null)})();
ndString = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ndString] || null : (__ink_acc_trgt.ndString !== undefined ? __ink_acc_trgt.ndString : null)})();
gen = node => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnCall] || null : (__ink_acc_trgt.FnCall !== undefined ? __ink_acc_trgt.FnCall : null)})()), () => (genFnCall(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[UnaryExpr] || null : (__ink_acc_trgt.UnaryExpr !== undefined ? __ink_acc_trgt.UnaryExpr : null)})()), () => (genUnaryExpr(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})()), () => (genBinaryExpr(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NumberLiteral] || null : (__ink_acc_trgt.NumberLiteral !== undefined ? __ink_acc_trgt.NumberLiteral : null)})()), () => (genNumberLiteral(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[StringLiteral] || null : (__ink_acc_trgt.StringLiteral !== undefined ? __ink_acc_trgt.StringLiteral : null)})()), () => (genStringLiteral(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BooleanLiteral] || null : (__ink_acc_trgt.BooleanLiteral !== undefined ? __ink_acc_trgt.BooleanLiteral : null)})()), () => (genBooleanLiteral(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})()), () => (genFnLiteral(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ListLiteral] || null : (__ink_acc_trgt.ListLiteral !== undefined ? __ink_acc_trgt.ListLiteral : null)})()), () => (genListLiteral(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectLiteral] || null : (__ink_acc_trgt.ObjectLiteral !== undefined ? __ink_acc_trgt.ObjectLiteral : null)})()), () => (genObjectLiteral(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => (genIdent(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})()), () => (genEmpty())], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})()), () => (genExprList(node))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MatchExpr] || null : (__ink_acc_trgt.MatchExpr !== undefined ? __ink_acc_trgt.MatchExpr : null)})()), () => (genMatchExpr(node))], [() => (__Ink_Empty), () => (genErr(__Ink_String(`not implemented!`)))]]);
genErr = msg => f(__Ink_String(`throw new Error("{{0}}")`), [replace(msg, __Ink_String(`"`), __Ink_String(`\\"`))]);
genEmpty = () => __Ink_String(`__Ink_Empty`);
genBooleanLiteral = node => string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})());
genNumberLiteral = node => string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})());
genStringLiteral = node => f(__Ink_String(`__Ink_String(\`{{0}}\`)`), [(() => { let s; s = (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(); s = replace(s, __Ink_String(`\\`), __Ink_String(`\\\\`)); return s = replace(s, __Ink_String(`\``), __Ink_String(`\\\``)) })()]);
genListLiteral = node => __as_ink_string(__as_ink_string(__Ink_String(`[`) + cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), gen), __Ink_String(`, `))) + __Ink_String(`]`));
genObjectEntry = node => f(__Ink_String(`{{0}}: {{1}}`), [__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => (gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EmptyIdent] || null : (__ink_acc_trgt.EmptyIdent !== undefined ? __ink_acc_trgt.EmptyIdent : null)})()), () => (gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NumberLiteral] || null : (__ink_acc_trgt.NumberLiteral !== undefined ? __ink_acc_trgt.NumberLiteral : null)})()), () => (gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()))], [() => (__Ink_Empty), () => (__as_ink_string(__as_ink_string(__Ink_String(`[`) + gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})())) + __Ink_String(`]`)))]]), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})())]);
genObjectLiteral = node => __as_ink_string(__as_ink_string(__Ink_String(`{`) + cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[entries] || null : (__ink_acc_trgt.entries !== undefined ? __ink_acc_trgt.entries : null)})(), genObjectEntry), __Ink_String(`, `))) + __Ink_String(`}`));
genFnArg = (node, i) => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => (genIdent(node))], [() => (__Ink_Empty), () => (__as_ink_string(__Ink_String(`__`) + string(i)))]]);
genFnLiteral = node => f(__Ink_String(`{{0}} => {{1}}`), [__ink_match(len((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()), [[() => (0), () => (__Ink_String(`()`))], [() => (1), () => (genFnArg((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[0] || null : (__ink_acc_trgt[0] !== undefined ? __ink_acc_trgt[0] : null)})(), 0))], [() => (__Ink_Empty), () => (__as_ink_string(__as_ink_string(__Ink_String(`(`) + cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})(), genFnArg), __Ink_String(`, `))) + __Ink_String(`)`)))]]), __ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ObjectLiteral] || null : (__ink_acc_trgt.ObjectLiteral !== undefined ? __ink_acc_trgt.ObjectLiteral : null)})()), () => (__as_ink_string(__as_ink_string(__Ink_String(`(`) + gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})())) + __Ink_String(`)`)))], [() => (__Ink_Empty), () => (__ink_match(__ink_or(__ink_eq(len((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})()), 0), __ink_eq((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})())), [[() => (true), () => (gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()))], [() => (__Ink_Empty), () => (gen({type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ExprList] || null : (__ink_acc_trgt.ExprList !== undefined ? __ink_acc_trgt.ExprList : null)})(), decls: (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})(), exprs: [(() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[body] || null : (__ink_acc_trgt.body !== undefined ? __ink_acc_trgt.body : null)})()]}))]]))]])]);
genFnCall = node => f(__Ink_String(`{{0}}({{1}})`), [__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[FnLiteral] || null : (__ink_acc_trgt.FnLiteral !== undefined ? __ink_acc_trgt.FnLiteral : null)})()), () => (__as_ink_string(__as_ink_string(__Ink_String(`(`) + gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})())) + __Ink_String(`)`)))], [() => (__Ink_Empty), () => (gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[fn] || null : (__ink_acc_trgt.fn !== undefined ? __ink_acc_trgt.fn : null)})()))]]), cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[args] || null : (__ink_acc_trgt.args !== undefined ? __ink_acc_trgt.args : null)})(), gen), __Ink_String(`, `))]);
genUnaryExpr = node => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[NegOp] || null : (__ink_acc_trgt.NegOp !== undefined ? __ink_acc_trgt.NegOp : null)})()), () => (f(__Ink_String(`__ink_negate({{0}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})())]))], [() => (__Ink_Empty), () => (genErr(f(__Ink_String(`UnaryExpr with unknown op: {{0}}`), [(() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})()])))]]);
genBinaryExpr = node => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AddOp] || null : (__ink_acc_trgt.AddOp !== undefined ? __ink_acc_trgt.AddOp : null)})()), () => (f(__Ink_String(`__as_ink_string({{0}} + {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[SubOp] || null : (__ink_acc_trgt.SubOp !== undefined ? __ink_acc_trgt.SubOp : null)})()), () => (f(__Ink_String(`({{0}} - {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[MulOp] || null : (__ink_acc_trgt.MulOp !== undefined ? __ink_acc_trgt.MulOp : null)})()), () => (f(__Ink_String(`({{0}} * {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DivOp] || null : (__ink_acc_trgt.DivOp !== undefined ? __ink_acc_trgt.DivOp : null)})()), () => (f(__Ink_String(`({{0}} / {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ModOp] || null : (__ink_acc_trgt.ModOp !== undefined ? __ink_acc_trgt.ModOp : null)})()), () => (f(__Ink_String(`({{0}} % {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AndOp] || null : (__ink_acc_trgt.AndOp !== undefined ? __ink_acc_trgt.AndOp : null)})()), () => (f(__Ink_String(`__ink_and({{0}}, {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[XorOp] || null : (__ink_acc_trgt.XorOp !== undefined ? __ink_acc_trgt.XorOp : null)})()), () => (f(__Ink_String(`__ink_xor({{0}}, {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[OrOp] || null : (__ink_acc_trgt.OrOp !== undefined ? __ink_acc_trgt.OrOp : null)})()), () => (f(__Ink_String(`__ink_or({{0}}, {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[EqOp] || null : (__ink_acc_trgt.EqOp !== undefined ? __ink_acc_trgt.EqOp : null)})()), () => (f(__Ink_String(`__ink_eq({{0}}, {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[GtOp] || null : (__ink_acc_trgt.GtOp !== undefined ? __ink_acc_trgt.GtOp : null)})()), () => (f(__Ink_String(`({{0}} > {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[LtOp] || null : (__ink_acc_trgt.LtOp !== undefined ? __ink_acc_trgt.LtOp : null)})()), () => (f(__Ink_String(`({{0}} < {{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[DefineOp] || null : (__ink_acc_trgt.DefineOp !== undefined ? __ink_acc_trgt.DefineOp : null)})()), () => (__ink_match([(() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})()], [[() => ([(() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()]), () => ((() => { let tmpDfn; tmpDfn = clone((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); (() => {let __ink_assgn_trgt = __as_ink_string(tmpDfn); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(left, {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: __Ink_String(`__ink_assgn_trgt`)}) : (__ink_assgn_trgt.left) = {type: (() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})(), val: __Ink_String(`__ink_assgn_trgt`)}; return __ink_assgn_trgt})(); return f(cat([__Ink_String(`(() => {let __ink_assgn_trgt = __as_ink_string({{0}})`), __Ink_String(`__is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign({{3}}, {{2}}) : {{1}} = {{2}}`), __Ink_String(`return __ink_assgn_trgt})()`)], __Ink_String(`; `)), [gen((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), genDefineTarget(tmpDfn), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]) })())], [() => (__Ink_Empty), () => (f(__Ink_String(`{{0}} = {{1}}`), [genDefineTarget((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))]]))], [() => ((() => {let __ink_acc_trgt = __as_ink_string(Tok); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[AccessorOp] || null : (__ink_acc_trgt.AccessorOp !== undefined ? __ink_acc_trgt.AccessorOp : null)})()), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => (f(cat([__Ink_String(`(() => {let __ink_acc_trgt = __as_ink_string({{0}})`), __Ink_String(`return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[{{1}}] || null : (__ink_acc_trgt.{{1}} !== undefined ? __ink_acc_trgt.{{1}} : null)})()`)], __Ink_String(`; `)), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => (__Ink_Empty), () => (f(cat([__Ink_String(`(() => {let __ink_acc_trgt = __as_ink_string({{0}})`), __Ink_String(`return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[{{1}}] || null : (__ink_acc_trgt[{{1}}] !== undefined ? __ink_acc_trgt[{{1}}] : null)})()`)], __Ink_String(`; `)), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))]]))], [() => (__Ink_Empty), () => (genErr(f(__Ink_String(`BinaryExpr with unknown op: {{0}}`), [(() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[op] || null : (__ink_acc_trgt.op !== undefined ? __ink_acc_trgt.op : null)})()])))]]);
genDefineTarget = node => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[BinaryExpr] || null : (__ink_acc_trgt.BinaryExpr !== undefined ? __ink_acc_trgt.BinaryExpr : null)})()), () => (__ink_match((() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[type] || null : (__ink_acc_trgt.type !== undefined ? __ink_acc_trgt.type : null)})(), [[() => ((() => {let __ink_acc_trgt = __as_ink_string(Node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Ident] || null : (__ink_acc_trgt.Ident !== undefined ? __ink_acc_trgt.Ident : null)})()), () => (f(__Ink_String(`({{0}}.{{1}})`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))], [() => (__Ink_Empty), () => (f(__Ink_String(`({{0}}[{{1}}])`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[left] || null : (__ink_acc_trgt.left !== undefined ? __ink_acc_trgt.left : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[right] || null : (__ink_acc_trgt.right !== undefined ? __ink_acc_trgt.right : null)})())]))]]))], [() => (__Ink_Empty), () => (gen(node))]]);
genIdent = node => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(), [[() => (__Ink_String(`break`)), () => (__Ink_String(`__ink_ident_break`))], [() => (__Ink_String(`case`)), () => (__Ink_String(`__ink_ident_case`))], [() => (__Ink_String(`catch`)), () => (__Ink_String(`__ink_ident_catch`))], [() => (__Ink_String(`class`)), () => (__Ink_String(`__ink_ident_class`))], [() => (__Ink_String(`const`)), () => (__Ink_String(`__ink_ident_const`))], [() => (__Ink_String(`continue`)), () => (__Ink_String(`__ink_ident_continue`))], [() => (__Ink_String(`debugger`)), () => (__Ink_String(`__ink_ident_debugger`))], [() => (__Ink_String(`default`)), () => (__Ink_String(`__ink_ident_default`))], [() => (__Ink_String(`delete`)), () => (__Ink_String(`__ink_ident_delete`))], [() => (__Ink_String(`do`)), () => (__Ink_String(`__ink_ident_do`))], [() => (__Ink_String(`else`)), () => (__Ink_String(`__ink_ident_else`))], [() => (__Ink_String(`export`)), () => (__Ink_String(`__ink_ident_export`))], [() => (__Ink_String(`extends`)), () => (__Ink_String(`__ink_ident_extends`))], [() => (__Ink_String(`finally`)), () => (__Ink_String(`__ink_ident_finally`))], [() => (__Ink_String(`for`)), () => (__Ink_String(`__ink_ident_for`))], [() => (__Ink_String(`function`)), () => (__Ink_String(`__ink_ident_function`))], [() => (__Ink_String(`if`)), () => (__Ink_String(`__ink_ident_if`))], [() => (__Ink_String(`import`)), () => (__Ink_String(`__ink_ident_import`))], [() => (__Ink_String(`in`)), () => (__Ink_String(`__ink_ident_in`))], [() => (__Ink_String(`instanceof`)), () => (__Ink_String(`__ink_ident_instanceof`))], [() => (__Ink_String(`new`)), () => (__Ink_String(`__ink_ident_new`))], [() => (__Ink_String(`return`)), () => (__Ink_String(`__ink_ident_return`))], [() => (__Ink_String(`super`)), () => (__Ink_String(`__ink_ident_super`))], [() => (__Ink_String(`switch`)), () => (__Ink_String(`__ink_ident_switch`))], [() => (__Ink_String(`this`)), () => (__Ink_String(`__ink_ident_this`))], [() => (__Ink_String(`throw`)), () => (__Ink_String(`__ink_ident_throw`))], [() => (__Ink_String(`try`)), () => (__Ink_String(`__ink_ident_try`))], [() => (__Ink_String(`typeof`)), () => (__Ink_String(`__ink_ident_typeof`))], [() => (__Ink_String(`var`)), () => (__Ink_String(`__ink_ident_var`))], [() => (__Ink_String(`void`)), () => (__Ink_String(`__ink_ident_void`))], [() => (__Ink_String(`while`)), () => (__Ink_String(`__ink_ident_while`))], [() => (__Ink_String(`with`)), () => (__Ink_String(`__ink_ident_with`))], [() => (__Ink_String(`yield`)), () => (__Ink_String(`__ink_ident_yield`))], [() => (__Ink_Empty), () => ((() => { let ident; ident = replace((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[val] || null : (__ink_acc_trgt.val !== undefined ? __ink_acc_trgt.val : null)})(), __Ink_String(`?`), __Ink_String(`__ink_qm__`)); ident = replace(ident, __Ink_String(`!`), __Ink_String(`__ink_em__`)); return replace(ident, __Ink_String(`@`), __Ink_String(`__ink_am__`)) })())]]);
genExprListExprs = (decls, exprs) => f(__Ink_String(`(() => { {{0}}{{1}} })()`), [cat(map(sort__ink_em__(decls), decl => f(__Ink_String(`let {{0}}; `), [genIdent({val: decl})])), __Ink_String(``)), cat(map(exprs, (expr, i) => __ink_match(__as_ink_string(i + 1), [[() => (len(exprs)), () => (__as_ink_string(__Ink_String(`return `) + gen(expr)))], [() => (__Ink_Empty), () => (gen(expr))]])), __Ink_String(`; `))]);
genExprList = node => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})(), [[() => ([]), () => (__Ink_String(`null`))], [() => (__Ink_Empty), () => (genExprListExprs((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[decls] || null : (__ink_acc_trgt.decls !== undefined ? __ink_acc_trgt.decls : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[exprs] || null : (__ink_acc_trgt.exprs !== undefined ? __ink_acc_trgt.exprs : null)})()))]]);
genMatchExpr = node => f(__Ink_String(`__ink_match({{0}}, [{{1}}])`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[condition] || null : (__ink_acc_trgt.condition !== undefined ? __ink_acc_trgt.condition : null)})()), cat(map((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[clauses] || null : (__ink_acc_trgt.clauses !== undefined ? __ink_acc_trgt.clauses : null)})(), genMatchClause), __Ink_String(`, `))]);
genMatchClause = node => f(__Ink_String(`[() => ({{0}}), () => ({{1}})]`), [gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()), gen((() => {let __ink_acc_trgt = __as_ink_string(node); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[expr] || null : (__ink_acc_trgt.expr !== undefined ? __ink_acc_trgt.expr : null)})())])

std = load(__Ink_String(`../vendor/std`));
log = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[log] || null : (__ink_acc_trgt.log !== undefined ? __ink_acc_trgt.log : null)})();
map = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[map] || null : (__ink_acc_trgt.map !== undefined ? __ink_acc_trgt.map : null)})();
each = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[each] || null : (__ink_acc_trgt.each !== undefined ? __ink_acc_trgt.each : null)})();
cat = (() => {let __ink_acc_trgt = __as_ink_string(std); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[cat] || null : (__ink_acc_trgt.cat !== undefined ? __ink_acc_trgt.cat : null)})();
Tokenize = load(__Ink_String(`tokenize`));
tokenize = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[tokenize] || null : (__ink_acc_trgt.tokenize !== undefined ? __ink_acc_trgt.tokenize : null)})();
tkString = (() => {let __ink_acc_trgt = __as_ink_string(Tokenize); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[tkString] || null : (__ink_acc_trgt.tkString !== undefined ? __ink_acc_trgt.tkString : null)})();
Parse = load(__Ink_String(`parse`));
parse = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[parse] || null : (__ink_acc_trgt.parse !== undefined ? __ink_acc_trgt.parse : null)})();
ndString = (() => {let __ink_acc_trgt = __as_ink_string(Parse); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ndString] || null : (__ink_acc_trgt.ndString !== undefined ? __ink_acc_trgt.ndString : null)})();
Analyze = load(__Ink_String(`analyze`));
analyze = (() => {let __ink_acc_trgt = __as_ink_string(Analyze); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[analyze] || null : (__ink_acc_trgt.analyze !== undefined ? __ink_acc_trgt.analyze : null)})();
Gen = load(__Ink_String(`gen`));
gen = (() => {let __ink_acc_trgt = __as_ink_string(Gen); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[gen] || null : (__ink_acc_trgt.gen !== undefined ? __ink_acc_trgt.gen : null)})();
Newline = char(10);
main = prog => (() => { let nodes; let tokens; tokens = tokenize(prog); nodes = parse(tokens); return __ink_match(type(nodes), [[() => (__Ink_String(`composite`)), () => ((() => { let analyzed; analyzed = map(nodes, analyze); return __as_ink_string(cat(map(analyzed, gen), __as_ink_string(__Ink_String(`;`) + Newline)) + Newline) })())], [() => (__Ink_String(`string`)), () => (nodes)]]) })()

str = s => bind(s, __Ink_String(`valueOf`))(s);
arr = bind(Object, __Ink_String(`values`));
hae = (tag, classList, attrs, events, children) => ({tag: str(tag), attrs: (() => {let __ink_assgn_trgt = __as_ink_string(attrs); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign((() => { return __Ink_String(`class`) })(), arr(map(classList, str))) : (__ink_assgn_trgt[(() => { return __Ink_String(`class`) })()]) = arr(map(classList, str)); return __ink_assgn_trgt})(), events: events, children: arr(map(children, child => __ink_match(type(child), [[() => (__Ink_String(`string`)), () => (str(child))], [() => (__Ink_Empty), () => (child)]])))});
ha = (tag, classList, attrs, children) => hae(tag, classList, attrs, {}, children);
h = (tag, classList, children) => hae(tag, classList, {}, {}, children);
Renderer = root => (() => { let InitialDom; let node; let render; let self; render = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(window); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[Torus] || null : (__ink_acc_trgt.Torus !== undefined ? __ink_acc_trgt.Torus : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[render] || null : (__ink_acc_trgt.render !== undefined ? __ink_acc_trgt.render : null)})(); InitialDom = h(__Ink_String(`div`), [], []); node = render(null, null, InitialDom); bind(root, __Ink_String(`appendChild`))(node); return self = {node: node, prev: InitialDom, update: jdom => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(node, render((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[prev] || null : (__ink_acc_trgt.prev !== undefined ? __ink_acc_trgt.prev : null)})(), jdom)) : (__ink_assgn_trgt.node) = render((() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[prev] || null : (__ink_acc_trgt.prev !== undefined ? __ink_acc_trgt.prev : null)})(), jdom); return __ink_assgn_trgt})(); (() => {let __ink_assgn_trgt = __as_ink_string(self); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(prev, jdom) : (__ink_assgn_trgt.prev) = jdom; return __ink_assgn_trgt})(); return (() => {let __ink_acc_trgt = __as_ink_string(self); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[node] || null : (__ink_acc_trgt.node !== undefined ? __ink_acc_trgt.node : null)})() })()} })()

Tab = char(9);
Newline = char(10);
getItem = bind(localStorage, __Ink_String(`getItem`));
setItem = bind(localStorage, __Ink_String(`setItem`));
removeItem = bind(localStorage, __Ink_String(`removeItem`));
delay = (fn, timeout) => (() => { let S; let dateNow; S = {to: null}; dateNow = bind(Date, __Ink_String(`now`)); return arg => (() => { clearTimeout((() => {let __ink_acc_trgt = __as_ink_string(S); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[to] || null : (__ink_acc_trgt.to !== undefined ? __ink_acc_trgt.to : null)})()); return (() => {let __ink_assgn_trgt = __as_ink_string(S); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(to, setTimeout(() => fn(arg), timeout)) : (__ink_assgn_trgt.to) = setTimeout(() => fn(arg), timeout); return __ink_assgn_trgt})() })() })();
translateInkToJS = (() => {let __ink_acc_trgt = __as_ink_string(load(__Ink_String(`september/ink/translate`))); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[main] || null : (__ink_acc_trgt.main !== undefined ? __ink_acc_trgt.main : null)})();
getEvalOutput = prog => (() => { let compiled; compiled = translateInkToJS(prog); return __ink_match(index(compiled, __Ink_String(`err @`)), [[() => (__ink_negate(1)), () => ((() => { let log; let out; let replOutput; out = s => (() => { append((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replOutputs] || null : (__ink_acc_trgt.replOutputs !== undefined ? __ink_acc_trgt.replOutputs : null)})(), split(s, Newline)); return render() })(); log = s => out(__as_ink_string(string(s) + Newline)); replOutput = eval(bind(compiled, __Ink_String(`toString`))()); return string(replOutput) })())], [() => (__Ink_Empty), () => (compiled)]]) })();
Link = (name, href) => ha(__Ink_String(`a`), [], {href: href, target: __Ink_String(`_blank`)}, name);
Header = () => h(__Ink_String(`header`), [], [__Ink_String(`Ink playground`)]);
Editor = () => h(__Ink_String(`editor`), [], [hae(__Ink_String(`textarea`), [], {value: (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[file] || null : (__ink_acc_trgt.file !== undefined ? __ink_acc_trgt.file : null)})()}, {input: evt => (() => { (() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(file, (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})()) : (__ink_assgn_trgt.file) = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); return __ink_assgn_trgt})(); persistFile(); return render() })(), keydown: evt => __ink_match([__ink_or((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[ctrlKey] || null : (__ink_acc_trgt.ctrlKey !== undefined ? __ink_acc_trgt.ctrlKey : null)})(), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[metaKey] || null : (__ink_acc_trgt.metaKey !== undefined ? __ink_acc_trgt.metaKey : null)})()), (() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})()], [[() => ([true, __Ink_String(`Enter`)]), () => (runRepl())], [() => ([__Ink_Empty, __Ink_String(`Tab`)]), () => (null)]])}, [])]);
Repl = () => h(__Ink_String(`div`), [__Ink_String(`repl`)], [hae(__Ink_String(`button`), [], {}, {click: runRepl}, [__Ink_String(`Run`)]), h(__Ink_String(`ol`), [__Ink_String(`replOutput`)], map((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replOutputs] || null : (__ink_acc_trgt.replOutputs !== undefined ? __ink_acc_trgt.replOutputs : null)})(), output => h(__Ink_String(`li`), [], [h(__Ink_String(`code`), [], [output])]))), hae(__Ink_String(`input`), [__Ink_String(`replLine`)], {value: (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})()}, {input: evt => render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})()) : (__ink_assgn_trgt.line) = (() => {let __ink_acc_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[target] || null : (__ink_acc_trgt.target !== undefined ? __ink_acc_trgt.target : null)})()); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[value] || null : (__ink_acc_trgt.value !== undefined ? __ink_acc_trgt.value : null)})(); return __ink_assgn_trgt})()), keydown: evt => __ink_match((() => {let __ink_acc_trgt = __as_ink_string(evt); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[key] || null : (__ink_acc_trgt.key !== undefined ? __ink_acc_trgt.key : null)})(), [[() => (__Ink_String(`Enter`)), () => ((() => { (() => {let __ink_assgn_trgt = __as_ink_string((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replOutputs] || null : (__ink_acc_trgt.replOutputs !== undefined ? __ink_acc_trgt.replOutputs : null)})()); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replOutputs] || null : (__ink_acc_trgt.replOutputs !== undefined ? __ink_acc_trgt.replOutputs : null)})()), getEvalOutput((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})())) : (__ink_assgn_trgt[len((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[replOutputs] || null : (__ink_acc_trgt.replOutputs !== undefined ? __ink_acc_trgt.replOutputs : null)})())]) = getEvalOutput((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[line] || null : (__ink_acc_trgt.line !== undefined ? __ink_acc_trgt.line : null)})()); return __ink_assgn_trgt})(); return render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(line, __Ink_String(``)) : (__ink_assgn_trgt.line) = __Ink_String(``); return __ink_assgn_trgt})()) })())]])}, [])]);
root = bind(document, __Ink_String(`querySelector`))(__Ink_String(`#root`));
r = Renderer(root);
update = (() => {let __ink_acc_trgt = __as_ink_string(r); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[update] || null : (__ink_acc_trgt.update !== undefined ? __ink_acc_trgt.update : null)})();
State = {file: __ink_match(restored = getItem(__Ink_String(`State.file`)), [[() => (null), () => (__Ink_String(`'Hello, ' + 'World!'`))], [() => (__Ink_Empty), () => (restored)]]), line: __Ink_String(``), replOutputs: []};
clearRepl = () => render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(replOutputs, []) : (__ink_assgn_trgt.replOutputs) = []; return __ink_assgn_trgt})());
runRepl = () => render((() => {let __ink_assgn_trgt = __as_ink_string(State); __is_ink_string(__ink_assgn_trgt) ? __ink_assgn_trgt.assign(replOutputs, [getEvalOutput((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[file] || null : (__ink_acc_trgt.file !== undefined ? __ink_acc_trgt.file : null)})())]) : (__ink_assgn_trgt.replOutputs) = [getEvalOutput((() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[file] || null : (__ink_acc_trgt.file !== undefined ? __ink_acc_trgt.file : null)})())]; return __ink_assgn_trgt})());
persistFileImmediately = () => setItem(__Ink_String(`State.file`), (() => {let __ink_acc_trgt = __as_ink_string(State); return __is_ink_string(__ink_acc_trgt) ? __ink_acc_trgt.valueOf()[file] || null : (__ink_acc_trgt.file !== undefined ? __ink_acc_trgt.file : null)})());
persistFile = delay(persistFileImmediately, 800);
render = () => (() => { return update(h(__Ink_String(`div`), [__Ink_String(`app`)], [Header(), Editor(), Repl()])) })();
render()

